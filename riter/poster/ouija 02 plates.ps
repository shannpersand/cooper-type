%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: ouija 02 plates.ai
%%Creator: Adobe Graphics Manager
%%For: Shannon
%%CreationDate: 11/9/16
%%BoundingBox: -1 -34 613 826
%%HiResBoundingBox: -0.6377 -33.9448 612.6379 825.9449
%%CropBox: 8.3623 -24.9448 603.6379 816.9449
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Special
%%TargetDevice: (Canon MG3200 series) (3010.000) 705
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "AI11"
%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840
%ADOEndClientInjection: DocumentHeader "AI11"
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 1 -1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_OnHost_Seps 1.0 0
%%Copyright: Copyright(C)1997-2006 Adobe Systems, Inc. All Rights Reserved.
%%Version: 1.0 0
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_OnHost_Seps 149 dict dup begin put
/ds{
	Adobe_AGM_OnHost_Seps begin
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	0 1 AGMOHS_gstack length 1 sub{
			AGMOHS_gstack exch AGMOHS_gstackframekeys dict put
	}for
	false setoverprint
	false setinkoverprint
	[/DeviceGray]set_colorspace
	false setregistration
	1 settint
	()setspotcolorant
	/AGMOHS_have_reported_unsupported_color_space false def
	/current_image_decode[]def
	level2 
	{
		currentpagedevice/Separations known
		{
			currentpagedevice/Separations get
			{
				<<
				/Separations false
				/ProcessColorModel/DeviceGray
				/SeparationColorNames[]
				/SeparationOrder[]
				/Policies<</PolicyNotFound 1>>
				>>setpagedevice
			}if
		}if
	}if
	end
}def
/pt{end}def
/dt{}def
/AGMOHS_inkdict nd
/AGMOHS_sepink nd
/AGMOHS_sep_plate nd
/AGMOHS_sepMX matrix def
/AGMOHS_isDCS? false def
/AGMOHS_isDCSComposite? false def
/AGMOHS_pattern nd
/AGMOHS_gstack 64 array def
/AGMOHS_gstackptr 0 def
/AGMOHS_gstacksaveptr 0 def
/AGMOHS_gstackframekeys 6 def
/AGMOHS_image_dict 9 dict def
/AGMOHS_colorspace_error
{
	/Adobe_AGM_Core where
		{
		pop
		Adobe_AGM_Core/AGMCORE_cur_err/AGMCORE_color_space_onhost_seps put
		AGMCORE_color_space_onhost_seps
		}if
}def
/AGMOHS_report_unsupported_color_space
{
	AGMOHS_have_reported_unsupported_color_space false eq
	{
		(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
		Adobe_AGM_OnHost_Seps/AGMOHS_have_reported_unsupported_color_space true ddf
	}if
}def
/AGMOHS_&gsave/gsave ldf
/AGMOHS_&grestore/grestore ldf
/AGMOHS_&grestoreall/grestoreall ldf
/AGMOHS_&save/save ldf
/AGMOHS_&setgray/setgray ldf
/AGMOHS_&sethsbcolor/sethsbcolor ldf
/AGMOHS_&setrgbcolor/setrgbcolor ldf
/AGMOHS_&setcolor level2{/setcolor ldf}{/AGMOHS_colorspace_error ldf}ifelse
/AGMOHS_&setcolorspace level2{/setcolorspace ldf}{/AGMOHS_colorspace_error ldf}ifelse
/AGMOHS_&image[
	/dup cvx/type cvx/dicttype/eq cvx[
		/begin cvx/AGMIMG_init_common cvx/currentdict cvx/end cvx
	]cvx/if cvx
	/image load dup type/operatortype eq not{/exec cvx}if
]cvx def
/colorimage{AGMOHS_&image}ndf
/AGMOHS_&colorimage/colorimage ldf
/AGMOHS_&imagemask/imagemask ldf
/AGMOHS_&stroke/stroke ldf
/AGMOHS_&fill/fill ldf
/AGMOHS_&eofill/eofill ldf
/AGMOHS_&show/show ldf
/AGMOHS_&ashow/ashow ldf
/AGMOHS_&widthshow/widthshow ldf
/AGMOHS_&awidthshow/awidthshow ldf
/AGMOHS_&kshow/kshow ldf
level2{
	/AGMOHS_&ustroke/ustroke ldf
	/AGMOHS_&ufill/ufill ldf
	/AGMOHS_&ueofill/ueofill ldf
	/AGMOHS_&rectstroke/rectstroke ldf
	/AGMOHS_&rectfill/rectfill ldf
	/AGMOHS_&xshow/xshow ldf
	/AGMOHS_&yshow/yshow ldf
	/AGMOHS_&xyshow/xyshow ldf
	/AGMOHS_&glyphshow/glyphshow ldf
	/AGMOHS_&cshow/cshow ldf
}if
/gsave nd
/grestore nd
/grestoreall nd
/save nd
/setgray nd
/setcmykcolor{4{pop}repeat}def
/setcolor nd
/setcolorspace nd
/setpattern nd
/image nd
/imagemask nd
/colorimage nd
/setoverprint nd
/currentoverprint nd
/setrgbcolor nd
/sethsbcolor nd
/setrgbcolor nd
/ufill nd
/ueofill nd
/rectstroke nd
/rectfill nd
/stroke nd
/fill nd
/eofill nd
/show nd
/ashow nd
/widthshow nd
/awidthshow nd
/kshow nd
/xshow nd
/yshow nd
/xyshow nd
/glyphshow nd
/cshow nd
/makeinkdict
{
	dict Adobe_AGM_OnHost_Seps/AGMOHS_inkdict xddf
}def
/addink
{
	3 dict begin
	/op_thold xdf
	/op xdf
	map_reserved_ink_name
	dup/name xdf
	currentdict end
	AGMOHS_inkdict begin def end
}def
/plate_setup
{
	Adobe_AGM_OnHost_Seps begin
	dup/AGMOHS_sep_plate xdf
	load exec
	map_reserved_ink_name
	/AGMOHS_sepink xdf
	/AGMOHS_get_ink_data
		AGMOHS_sep_plate/c eq{
			{pop pop pop}
		}{
			AGMOHS_sep_plate/m eq{
				{4 3 roll pop pop pop}
			}{
				AGMOHS_sep_plate/y eq{
			 		{4 2 roll pop pop pop}
				}{
			 		{4 1 roll pop pop pop}
				}ifelse
			}ifelse
		}ifelse
	def
}def
level2{
	/AGMOHS_&image_L2/AGMOHS_&image ldf
	/AGMOHS_invert_image_samples
	{
		Adobe_AGM_Core/AGMCORE_tmp Decode length ddf
		/Decode[Decode 1 get Decode 0 get]def
	}def
	/AGMOHS_knockout_image_samples
	{
		/Decode[1 1]def
	}def
}{
	/AGMOHS_&image_L2
	{
		begin
		Width Height BitsPerComponent ImageMatrix/DataSource load 
		AGMOHS_&image
		end
	}def
	/AGMOHS_invert_image_samples
	{
		{1 exch sub}currenttransfer addprocs settransfer
	}def
	/AGMOHS_knockout_image_samples
	{
		{pop 1}currenttransfer addprocs settransfer
	}def
}ifelse
/setcmybcolor
{
	setcmykcolor
}def
/setcmykcoloroverprint
{pop pop pop pop}def
/findcmykcustomcolor
{5 makereadonlyarray}def
/setcolorspace
{	
	dup set_colorspace
	currentcolorspace 0 get/Separation eq
		{
		currentcolorspace 1 get
		}
		{
		()
		}ifelse
		setspotcolorant
	AGMOHS_&setcolorspace
}def
/AGMOHS_mapL2and3colorspace
{
	dup 0 get/DeviceCMYK eq
		{
		5 1 roll setcmykcolor
		}
		{
		dup 0 get/DeviceGray eq
			{
			exch 1 exch sub 0 0 0 4 -1 roll
			setcmykcolor
			}
			{
			dup 0 get/DeviceRGB eq
				{
				4 1 roll setrgbcolor
				}
				{
				dup 0 get/Separation eq
					{
					dup 1 get
					dup type/stringtype eq{
						cvn
					}if
					dup/Cyan eq
						{
						3 -1 roll 0 0 0 setcmykcolor
						pop
						}
						{
						dup/Magenta eq
							{
							0 4 -1 roll 0 0 setcmykcolor
							pop
							}
							{
							dup/Yellow eq
								{
								0 0 5 -1 roll 0 setcmykcolor
								pop
								}
								{
								dup/Black eq
									{
									0 0 0 6 -1 roll setcmykcolor
									pop
									}
									{
									dup/All eq
										{
										3 -1 roll 1 exch sub setseparationgray
										pop
										}
										{
										1 index 2 get base_colorspace_type/DeviceCMYK eq
											{
											2 index 2 index 3 get
											exec
												}
												{
												0 0 0 5 index
											}ifelse
											5 -1 roll dup length string cvs
										findcmykcustomcolor
										3 2 roll setcustomcolor
										}ifelse
									}ifelse
								}ifelse
							}ifelse
						}ifelse
					}
					{
					dup 0 get/DeviceN eq
						{
						3 dict begin
						/devncolorspace exch def
						/painted? false def
						/names_index 0 def
						devncolorspace 1 get
							{
							dup AGMOHS_onmask?
								{
								0 0 0 0 5 -1 roll findcmykcustomcolor
								devncolorspace 1 get length names_index sub index setcustomcolor
								devncolorspace 1 get length{pop}repeat
								/painted? true def
								exit
								}
								{
								pop
								}ifelse
							/names_index names_index 1 add def
							}forall
						painted? not
							{
							devncolorspace 1 get length{pop}repeat
							0 0 0 0()findcmykcustomcolor 0 setcustomcolor
							}if
						end
						}
						{
						AGMOHS_report_unsupported_color_space
						AGMOHS_&setcolorspace
						AGMOHS_&setcolor
						AGMOHS_sep_plate/k ne
							{
							0 0 0 0 setcmykcolor
							}if
						}ifelse
						currentcolorspace
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	pop
}def
/setcolor
{
	current_colorspace
	dup 0 get/Pattern eq
		{
		1 index/PatternType get 2 eq
			{
			pop
			}{
			1 index/PaintType get 2 eq 2 index/EmittedGSCS known not and
				{
				exch Adobe_AGM_OnHost_Seps exch/AGMOHS_pattern xpt
				1 get base_colorspace_type 1 array dup 0 4 -1 roll put AGMOHS_mapL2and3colorspace
				currentgray[/Pattern/DeviceGray]AGMOHS_&setcolorspace
				AGMOHS_pattern
				}{
				pop
				}ifelse
			}ifelse
		AGMOHS_&setcolor
		}
		{
		dup 0 get/Indexed eq
			{
			dup 1 get AGMOHS_&setcolorspace
			dup 3 get type/stringtype eq
				{
				3 get exch
				currentcolorspace 0 get dup dup/DeviceGray eq 3 1 roll/CIEBasedA eq
				exch/Separation eq or or
					{
					1
					}{
					currentcolorspace 0 get dup dup/DeviceRGB eq 3 1 roll/CIEBasedABC eq
					exch/CIEBasedDEF eq or or
						{
						3
						}{
						currentcolorspace 0 get dup/DeviceCMYK eq exch/CIEBasedDEFG eq or
							{
							4
							}{
							currentcolorspace 1 get length
							}ifelse
						}ifelse
					}ifelse
				Adobe_AGM_OnHost_Seps/AGMOHS_ncomps xddf
				AGMOHS_ncomps mul AGMOHS_ncomps getinterval{}forall
				AGMOHS_ncomps{
					0.0 1.0 map255_to_range
					AGMOHS_ncomps 1 roll
				}repeat
				}{
				3 gx
				}ifelse
			currentcolorspace
			}if
		AGMOHS_mapL2and3colorspace
		}ifelse
}def
/setpattern
{
	currentcolorspace 0 get/Pattern ne
		{
		current_colorspace 0 get/Pattern eq
			{current_colorspace}
			{[/Pattern currentcolorspace]}ifelse
			AGMOHS_&setcolorspace
		}if
	currentcolorspace set_colorspace
	setcolor
}def
/setgray
{	
	false setinkoverprint
	AGMOHS_isDCS?
	{
		AGMOHS_&setgray
	}{
		1 exch sub 0 0 0 4 -1 roll
		setcmykcolor
	}
	ifelse
	false setregistration
	1 settint
	()setspotcolorant
}def
/AGMOHS_toprocess?
{
	map_reserved_ink_name
	dup/All eq
	{
		pop false
	}{
		AGMOHS_inkdict exch known not
	}
	ifelse
}def
/AGMOHS_onmask?
{
	map_reserved_ink_name
	dup AGMOHS_sepink eq exch/All eq or
}def
/AGMOHS_pure?
{
	aload pop 0 ne exch 0 ne 3 -1 roll 0 ne 4 -1 roll 0 ne 0 5 1 roll
	3 -1 0
	{
		exch true eq
		{
			dup 0 gt
			{
				2 add dup -1 roll 1 add exch 1 sub 1 roll
			}{
				pop 1 add
			}ifelse
		}{
			pop
		}ifelse
	}for
	1 eq
}def
/AGMOHS_overprintprocess
{
	false setinkoverprint
	dup AGMOHS_pure?
	{
		aload pop mark 5 1 roll
		0 1 3
		{
			exch dup 0 ne
			{
				settint
				dup 0 eq
				{
					pop(Black)
				}{
					dup 1 eq
					{
						pop(Yellow)
					}{
						dup 2 eq
						{
							pop(Magenta)
						}{
							pop(Cyan)
						}ifelse
					}ifelse
				}ifelse
				AGMOHS_inkoverprint?
				{
					true setinkoverprint exit
				}if
			}{
				pop pop
			}ifelse	
		}for
		cleartomark
	}{
	pop
	}ifelse
}def
/AGMOHS_inkoverprint?
{
	AGMUTIL_str256 copy
	length Adobe_AGM_Utils/AGMUTIL_srcLen xddf
	false
	AGMOHS_inkdict
	{
		begin
		pop
		name AGMUTIL_str256 0 AGMUTIL_srcLen getinterval eq
		{
			pop
			op currenttint op_thold ge and
			end exit
		}if
		end
	}forall
}def
/AGMOHS_generateKOImage
{
	<<
		/ImageType 1
		/Width 1
		/Height 1
		/ImageMatrix[1 0 0 -1 0 1]
		/DataSource<00>
		/BitsPerComponent 8
		/Decode[1 0]
	>>
	AGMOHS_&image
}def
/setcustomcolor
{
	dup settint 
	exch aload 4 get setspotcolorant
	dup AGMOHS_toprocess?
		{
			pop
			4
				{4 index mul 4 1 roll}
			repeat 
			setcmykcolor
			pop
		}{		 
			dup AGMOHS_inkoverprint? setinkoverprint
			5 1 roll
			4
				{pop}
			repeat 
			AGMOHS_onmask?
				{1 exch sub AGMOHS_&setgray}
				{pop 1 AGMOHS_&setgray}
			ifelse
		}
	ifelse
	false setregistration
}def
/setseparationgray
{AGMOHS_&setgray true setregistration}def
/setregistration
{/current_registration exch AGMOHS_gput}def
/currentregistration
{/current_registration AGMOHS_gget}def
/setoverprint
{/current_overprint exch AGMOHS_gput}def
/currentoverprint
{/current_overprint AGMOHS_gget}def
/setinkoverprint
{/current_ink_overprint exch AGMOHS_gput}def
/currentinkoverprint
{/current_ink_overprint AGMOHS_gget}def
/settint
{/current_tint exch AGMOHS_gput}def
/currenttint
{/current_tint AGMOHS_gget}def
/setspotcolorant
{/current_spot_colorant exch AGMOHS_gput}def
/currentspotcolorant
{/current_spot_colorant AGMOHS_gget}def
/set_colorspace
{
	dup type dup/arraytype eq exch/packedarraytype eq or not{
		[exch]
	}if
	/current_colorspace exch AGMOHS_gput
}def
/current_colorspace
{/current_colorspace AGMOHS_gget}def
/AGMOHS_paint?
{
	Adobe_AGM_OnHost_Seps begin
		currentoverprint currentinkoverprint or not
		currentgray 1 ne or
		currentregistration or
		currentspotcolorant AGMOHS_sepink eq or
	end
}def
/setrgbcolor
{
	AGMOHS_sep_plate/k ne
		{3{pop}repeat 1 1 1}if
	AGMOHS_&setrgbcolor
	AGMOHS_report_unsupported_color_space
	false setregistration
	1 settint
	()setspotcolorant
}def
/sethsbcolor
{
	AGMOHS_&sethsbcolor currentrgbcolor setrgbcolor
	false setregistration
	1 settint
}def
/stroke
{
	AGMOHS_paint?
		{AGMOHS_&stroke}
		{newpath}
	ifelse
}def
/fill
{
	AGMOHS_paint?
		{AGMOHS_&fill}
		{newpath}
	ifelse
}def
/eofill
{
	AGMOHS_paint?
		{AGMOHS_&eofill}
		{newpath}
	ifelse
}def
/show
{
	AGMOHS_paint?
		{AGMOHS_&show}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&show currentpoint grestore moveto}
	ifelse
}def
/ashow
{
	AGMOHS_paint?
		{AGMOHS_&ashow}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&ashow currentpoint grestore moveto}
	ifelse
}def
/widthshow
{
	AGMOHS_paint?
		{AGMOHS_&widthshow}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&widthshow currentpoint grestore moveto}
	ifelse
}def
/awidthshow
{
	AGMOHS_paint?
		{AGMOHS_&awidthshow}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&awidthshow currentpoint grestore moveto}
	ifelse
}def
/kshow
{
	AGMOHS_paint?
		{AGMOHS_&kshow}
		{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&kshow currentpoint grestore moveto}
	ifelse
}def
level2{
	/ustroke{
		AGMOHS_paint?
			{AGMOHS_&ustroke}
			{
			gsave nulldevice AGMOHS_&ustroke grestore
			}
		ifelse
	}def
	/ufill{
		AGMOHS_paint?
			{AGMOHS_&ufill}
			{pop}
		ifelse
	}def
	/ueofill{
		AGMOHS_paint?
			{AGMOHS_&ueofill}
			{pop}
		ifelse
	}def
	/rectstroke{
		AGMOHS_paint?
			{AGMOHS_&rectstroke}
			{
			gsave nulldevice AGMOHS_&rectstroke grestore
			}
		ifelse
	}def
	/rectfill{
		AGMOHS_paint?
			{AGMOHS_&rectfill}
			{
			gsave nulldevice AGMOHS_&rectfill grestore
			}
		ifelse
	}def
	/xshow
	{
		AGMOHS_paint?
			{AGMOHS_&xshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&xshow currentpoint grestore moveto}
		ifelse
	}def
	/yshow
	{
		AGMOHS_paint?
			{AGMOHS_&yshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&yshow currentpoint grestore moveto}
		ifelse
	}def
	/xyshow
	{
		AGMOHS_paint?
			{AGMOHS_&xyshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&xyshow currentpoint grestore moveto}
		ifelse
	}def
	/glyphshow
	{
		AGMOHS_paint?
			{AGMOHS_&glyphshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&glyphshow currentpoint grestore moveto}
		ifelse
	}def
	/cshow
	{
		AGMOHS_paint?
			{AGMOHS_&cshow}
			{gsave AGMOHS_sepMX currentmatrix nulldevice setmatrix AGMOHS_&cshow currentpoint grestore moveto}
		ifelse
	}def
}if
/separationimage
{
	AGMOHS_&image
}def 
/imagemask
{
	AGMOHS_isDCS?
	{
		AGMOHS_&imagemask
	}
	{
		AGMOHS_paint?
			{AGMOHS_&imagemask}
			{gsave nulldevice AGMOHS_&imagemask grestore}
		ifelse
	}
	ifelse
}def
/image
{
	AGMOHS_isDCS?{
		AGMOHS_&image
	}{
		dup type/dicttype eq{
			current_colorspace 0 get/Separation eq{
				current_colorspace 2 get base_colorspace_type
				/DeviceCMYK eq{
					begin
					ImageType 1 eq
					currentdict/MultipleDataSources known
						{MultipleDataSources not}{true}ifelse
					and
					currentdict end exch
				}{
					false
				}ifelse
			}{
				current_colorspace 0 get/DeviceN eq{
					current_colorspace 2 get base_colorspace_type
					dup/DeviceCMYK eq exch dup/DeviceRGB eq exch/DeviceGray eq or or{
						begin
						ImageType 1 eq
						currentdict end exch
					}{
						false
					}ifelse
				}{
					false
				}ifelse
			}ifelse
			current_colorspace 0 get
			dup/DeviceGray eq exch
			dup/DeviceRGB eq exch
			dup/DeviceCMYK eq exch
			dup/Pattern eq exch
			dup/DeviceN eq exch
			/Indexed eq
				{
				current_colorspace 1 get base_colorspace_type dup/DeviceCMYK eq exch/DeviceN eq or
				}
				{false}
				ifelse
			or or or or or or
		}{
			true
		}ifelse
		not{
			AGMOHS_report_unsupported_color_space
			AGMOHS_sep_plate/k ne
			{
			dup type/dicttype eq
				{
				dup
				ignoreimagedata
				AGMCORE_distilling
					{
						gsave
						/DeviceGray setcolorspace
						begin
						/Height 1 def
						/Width 1 def
						/DataSource( )def
						/MultipleDataSources false def
						currentdict end
						AGMOHS_&image
						grestore
					}{
					pop
					}ifelse
				}{
				nulldevice image
				}ifelse
			}{
				AGMOHS_&image
			}ifelse
		}{
			gsave
			dup type/dicttype ne{
				AGMOHS_image_dict begin
					/ImageType 1 def
					/Decode[0 1]def
					/DataSource xdf
					/ImageMatrix xdf
					/BitsPerComponent xdf
					/Height xdf
					/Width xdf
					/MultipleDataSources false def
					/DeviceGray
			}{
				begin
				current_colorspace 0 get
			}ifelse
			dup/DeviceN eq{
				pop
				<<
					/Names current_colorspace 1 get
					/CSA current_colorspace 2 get base_colorspace_type get_csa_by_name
					/TintProc null
					/TintTransform current_colorspace 3 get
				>>setdevicencolorspace
				<<
					/Width Width
					/Height Height
					/BitsPerComponent BitsPerComponent
					/ImageMatrix ImageMatrix
					/Decode Decode
					/MultipleDataSources currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
					/DataSource DataSource
					/Operator/image
					/NComponents current_colorspace 1 get length
					/ImageType ImageType
				>>devn_imageormask
			}{
				dup/Separation eq{
					pop
					Adobe_AGM_OnHost_Seps/current_image_decode Decode ddf
					Width Height BitsPerComponent ImageMatrix DataSource
					1 current_colorspace 3 gx current_colorspace 1 get findcmykcustomcolor
					1 setcolor
					customcolorimage
					Adobe_AGM_OnHost_Seps/current_image_decode[]ddf
				}{
					dup/DeviceGray eq{
						pop
						AGMOHS_sep_plate/k ne AGMOHS_isDCSComposite? or{
							currentdict ignoreimagedata
						}{
							0 AGMOHS_&setgray	
							currentdict AGMOHS_&image_L2
						}ifelse
					}{
						dup/DeviceRGB eq{pop
							Width Height BitsPerComponent ImageMatrix
							currentdict/MultipleDataSources known{
								MultipleDataSources{
									DataSource 0 get DataSource 1 get DataSource 2 get true
								}{
									/DataSource load false
								}ifelse
							}{
								/DataSource load false
							}ifelse
							3 colorimage
						}{
							dup/DeviceCMYK eq{
								pop
								Width Height BitsPerComponent ImageMatrix
								currentdict/MultipleDataSources known{
									MultipleDataSources{
										DataSource 0 get DataSource 1 get DataSource 2 get DataSource 3 get true
									}{
										/DataSource load false
									}ifelse
								}{
									/DataSource load false
								}ifelse
								4 colorimage
							}{
								dup/Indexed eq{
									pop
									currentcolorspace 1 get 
									base_colorspace_type
									dup/DeviceCMYK eq
									AGMCORE_plate_ndx 4 lt and
									{
										pop
										2 dict begin
										/GrayTable currentcolorspace 2 get 1 add string def
										/CMYKTable currentcolorspace 3 get def
										AGMCORE_plate_ndx 4 CMYKTable length 1 sub
										{
											GrayTable exch dup 4 idiv exch CMYKTable exch get 255 exch sub put
										}for
										[
											/Indexed 
											[/DeviceGray]
											currentcolorspace 2 get
											GrayTable
										]
										setcolorspace
										end
										currentdict AGMOHS_&image_L2
									}{
										pop
										5 dict begin
										/DevNIndex -1 def
										/DevNCand -1 def
										currentcolorspace 1 get 1 get
										dup/DevNCompCnt exch length def
										{
											/DevNCand DevNCand 1 add def
											AGMOHS_sepink eq{/DevNIndex DevNCand def exit}if
										}forall
										DevNIndex -1 eq{
											end
											currentdict
											gsave
											nulldevice AGMOHS_&image
											grestore
											knockout_unitsq
										}{
											/GrayTable currentcolorspace 2 get 1 add string def
											/DevNTable currentcolorspace 3 get def
											DevNIndex DevNCompCnt DevNTable length 1 sub
											{
												GrayTable exch dup DevNCompCnt idiv exch DevNTable exch get 255 exch sub put
											}for
											[
												/Indexed 
												[/DeviceGray]
												currentcolorspace 2 get
												GrayTable
											]
											setcolorspace
											end
											currentdict AGMOHS_&image_L2
										}ifelse
									}ifelse
								}{
									pop
									currentdict AGMOHS_&image_L2
								}ifelse
							}ifelse
						}ifelse
					}ifelse			
				}ifelse			
			}ifelse			
			end			
			grestore
		}ifelse		
	}ifelse
}def
/customcolorimage
{
	gsave
	aload 4 get setspotcolorant
	dup AGMOHS_toprocess?{		
		pop
		setcmykcolor
		1 currentgray sub settint
	}{
		AGMOHS_onmask? not{
			0 settint
		}if
		4{pop}repeat
	}ifelse
	AGMOHS_image_dict begin
		/DoImage true def
		/ImageType 1 def
		/DataSource xdf
		/ImageMatrix xdf
		/BitsPerComponent xdf
		/Height xdf
		/Width xdf
		/MultipleDataSources false def
		level2{
			current_colorspace 0 get/Separation eq
			current_image_decode length 2 eq
				{
				current_image_decode 0 get current_image_decode 1 get lt
				}{
				false
				}ifelse
			and
				{
				/Decode[1 currenttint 1 exch sub]def
				}{
				/Decode[currenttint 1 exch sub 1]def
				}ifelse
		}{
			{currenttint mul 1 currenttint sub add}currenttransfer addprocs settransfer
		}ifelse
		currenttint 1 exch sub AGMOHS_&setgray
		AGMOHS_paint?{
			currentgray 1 eq{
				gsave
				knockout_unitsq
				grestore
				/DoImage false def 
			}if
		}{
			/DoImage false def 
		}ifelse
		currentdict 
	end
	dup/DoImage get
	{
		AGMOHS_&image_L2
	}{
		consumeimagedata
	}ifelse
	grestore
}def
/AGMOHS_begindcsplate
{Adobe_AGM_OnHost_Seps/AGMOHS_isDCS? true ddf}def
/AGMOHS_enddcsplate
{Adobe_AGM_OnHost_Seps/AGMOHS_isDCS? false ddf}def
/AGMOHS_begindcscomposite
{Adobe_AGM_OnHost_Seps/AGMOHS_isDCSComposite? true ddf}def
/AGMOHS_enddcscomposite
{Adobe_AGM_OnHost_Seps/AGMOHS_isDCSComposite? false ddf}def
/colorimage
{
	gsave 
	1 AGMOHS_&setgray
	()setspotcolorant
	AGMOHS_image_dict begin
		/NComponents xdf
		/MultipleDataSources xdf
		MultipleDataSources NComponents 3 ne and{
			NComponents 4 eq{
				/DataSource[
					5 index/exec cvx
					6 index/exec cvx
					7 index/exec cvx
					8 index/exec cvx
					/AGMOHS_get_ink_data cvx
				]cvx def
				NComponents{pop}repeat
			}if
			/ImageType 1 def
			/Decode[0 1]def
			/ImageMatrix xdf
			/BitsPerComponent xdf
			/Height xdf
			/Width xdf
			/MultipleDataSources false def
			/DoImage true def
			AGMOHS_sep_plate/spot ne{
				NComponents 4 eq{
					AGMOHS_invert_image_samples
				}{
					NComponents 1 eq AGMOHS_sep_plate/k ne AGMOHS_isDCSComposite? or and{
						/DoImage false def
						currentdict ignoreimagedata
					}if
				}ifelse
			}{
				/DoImage false def
				currentdict ignoreimagedata
			}ifelse
			DoImage{
				currentdict AGMOHS_&image_L2
				}if
		}{
			AGMOHS_sep_plate/spot ne{
				NComponents 1 eq{
					AGMOHS_&image
				}{
					level2 not NComponents 3 eq or{
						AGMOHS_report_unsupported_color_space
						AGMOHS_sep_plate/k ne
							{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{pop 1}exch addprocs 4 1 roll
							{pop 1}exch addprocs 4 1 roll
							{pop 1}exch addprocs 4 1 roll
							setcolortransfer
							}if
						MultipleDataSources NComponents AGMOHS_&colorimage
					}{
						/DataSource xdf
						/ImageType 1 def
						/Decode[1 0]def
						/ImageMatrix xdf
						/BitsPerComponent xdf
						/Height xdf
						/Width xdf
						/DataSource Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							/DataSource load filter_cmyk 0()/SubFileDecode filter def
						currentdict AGMOHS_&image
					}ifelse
				}ifelse
			}{
				MultipleDataSources
					{
					/DataSource[
						1 1 NComponents
							{2 add -1 roll}for
						]def
					}{
					/DataSource exch def
					}ifelse
				/ImageType 1 def
				/Decode[NComponents{0 1}repeat]def
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				currentdict ignoreimagedata
			}ifelse
		}ifelse
	end
	grestore
}def
/spot
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor 
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		pop pop pop pop 1 AGMOHS_&setgray
		false setregistration
		1 settint
		()setspotcolorant
	}def		
	end
}def
/c
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		pop pop pop 1 exch sub AGMOHS_&setgray
		false setregistration
		1 settint
		()setspotcolorant
	}def
	end
}def
/m
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor 
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		pop pop exch pop 1 exch sub AGMOHS_&setgray
		false setregistration		
		1 settint
		()setspotcolorant
	}def
	end
}def
/y
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		pop 3 1 roll pop pop 1 exch sub AGMOHS_&setgray
		false setregistration		
		1 settint
		()setspotcolorant
	}def
	end
}def
/k
{
	Adobe_AGM_OnHost_Seps begin
	/setcmykcolor 
	{
		4 copy
		4 makereadonlyarray AGMOHS_overprintprocess
		4 1 roll pop pop pop 1 exch sub AGMOHS_&setgray
		false setregistration		
		1 settint
		()setspotcolorant
	}def
	end
}def
/AGMOHS_gdictcopy{
	begin
	{def}forall
	end
}def
/AGMOHS_gput{
	 AGMOHS_gstack AGMOHS_gstackptr get
	 3 1 roll
	 put
}def
/AGMOHS_gget{
		 AGMOHS_gstack AGMOHS_gstackptr get
		 exch
		 get
}def
/gsave{
		 AGMOHS_&gsave
		 AGMOHS_gstack AGMOHS_gstackptr get
		 AGMOHS_gstackptr 1 add
		 dup 64 ge{limitcheck}if
		 Adobe_AGM_OnHost_Seps exch
		 /AGMOHS_gstackptr xpt
		 AGMOHS_gstack AGMOHS_gstackptr get
		 AGMOHS_gdictcopy
}def
/grestore{
		 AGMOHS_&grestore
		 AGMOHS_gstackptr 1 sub
		 dup AGMOHS_gstacksaveptr lt{1 add}if
		 Adobe_AGM_OnHost_Seps exch
		 /AGMOHS_gstackptr xpt
}def
/grestoreall{
		 AGMOHS_&grestoreall
		 Adobe_AGM_OnHost_Seps
		/AGMOHS_gstackptr AGMOHS_gstacksaveptr put 
}def
/save{
		 AGMOHS_&save
		 AGMOHS_gstack AGMOHS_gstackptr get
		 AGMOHS_gstackptr 1 add
		 dup 64 ge{limitcheck}if
		 Adobe_AGM_OnHost_Seps begin
			/AGMOHS_gstackptr exch def
			/AGMOHS_gstacksaveptr AGMOHS_gstackptr def
		 end
		 AGMOHS_gstack AGMOHS_gstackptr get
		 AGMOHS_gdictcopy
}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
Adobe_AGM_OnHost_Seps begin
%%BeginSetup
Adobe_AGM_Utils begin
Adobe_AGM_OnHost_Seps/ds gx
2 2010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *PageSize Letter
<</PageSize[612.00 792.00]/ImagingBBox null>>setpagedevice
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Core/driver_media_override gx
4 makeinkdict
/Cyan false 0 addink
/Magenta false 0 addink
/Yellow false 0 addink
/Black false 0 addink
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
end
%%Page: 1 1
%%PlateColor: Black
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1) /PlateColor (Black)]
[/TrimBox [8.3622045516968 0 603.63781738281 792]]
[/BleedBox [0 0 612 792]]
]xpdfm
/Black /k Adobe_AGM_OnHost_Seps /plate_setup gx
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_check_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_AGM_Core begin
60 45 getspotfunction setscreen
end
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[0 -1 1 0 0 792 ]ct
gsave
np
gsave
-33.9449 -.637795 mo
-33.9449 612.638 li
825.945 612.638 li
825.945 -.637795 li
cp
clp
64.9129 514.09 mo
63.924 514.239 li
68.4088 544.052 li
55.2921 544.052 li
59.6488 515.09 li
64.9129 515.09 li
64.9129 514.09 li
63.924 514.239 li
64.9129 514.09 li
64.9129 513.09 li
57.9272 513.09 li
52.9687 546.052 li
70.7322 546.052 li
65.7737 513.09 li
64.9129 513.09 li
64.9129 514.09 li
cp
true sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 .6 nzopmsc
f
64.9127 464.021 mo
69.5708 494.982 li
54.1302 494.982 li
58.7878 464.021 li
64.9127 464.021 li
cp
false sop
0 0 0 0 cmyk
f
64.9127 464.021 mo
63.9238 464.17 li
68.409 493.982 li
55.2919 493.982 li
59.6486 465.021 li
64.9127 465.021 li
64.9127 464.021 li
63.9238 464.17 li
64.9127 464.021 li
64.9127 463.021 li
57.9269 463.021 li
52.9685 495.982 li
70.7325 495.982 li
65.7735 463.021 li
64.9127 463.021 li
64.9127 464.021 li
cp
true sop
0 0 0 .6 nzopmsc
f
64.9129 413.951 mo
69.5705 444.913 li
54.1304 444.913 li
58.788 413.951 li
64.9129 413.951 li
cp
false sop
0 0 0 .6 cmyk
f
61.85 433.128 mo
64.2 433.128 66.1058 435.033 66.1058 437.383 cv
66.1058 439.733 64.2 441.638 61.85 441.638 cv
59.5004 441.638 57.5952 439.733 57.5952 437.383 cv
57.5952 435.033 59.5004 433.128 61.85 433.128 cv
cp
0 0 0 0 cmyk
f
64.9129 413.951 mo
63.9241 414.1 li
68.4088 443.913 li
55.2921 443.913 li
59.6488 414.951 li
64.9129 414.951 li
64.9129 413.951 li
63.9241 414.1 li
64.9129 413.951 li
64.9129 412.951 li
57.9272 412.951 li
52.9687 445.913 li
70.7322 445.913 li
65.7737 412.951 li
64.9129 412.951 li
64.9129 413.951 li
cp
true sop
0 0 0 .6 nzopmsc
f
67.242 279.224 mo
64.9134 263.743 li
58.7875 263.743 li
56.459 279.224 li
67.242 279.224 li
cp
false sop
0 0 0 .6 cmyk
f
64.9134 263.743 mo
63.9245 263.892 li
68.4088 293.705 li
55.2921 293.705 li
59.6483 264.743 li
64.9134 264.743 li
64.9134 263.743 li
63.9245 263.892 li
64.9134 263.743 li
64.9134 262.743 li
57.9266 262.743 li
52.9687 295.705 li
70.7322 295.705 li
65.7742 262.743 li
64.9134 262.743 li
64.9134 263.743 li
cp
true sop
0 0 0 .6 nzopmsc
f
69.5708 244.636 mo
64.9132 213.674 li
61.8497 213.674 li
61.8497 244.636 li
69.5708 244.636 li
cp
false sop
0 0 0 0 cmyk
f
61.8497 244.636 mo
61.8497 213.674 li
58.7872 213.674 li
54.1302 244.636 li
61.8497 244.636 li
cp
true sop
0 0 0 .8 nzopmsc
f
64.9137 213.674 mo
63.9248 213.823 li
68.4091 243.636 li
55.2918 243.636 li
59.6486 214.674 li
64.9137 214.674 li
64.9137 213.674 li
63.9248 213.823 li
64.9137 213.674 li
64.9137 212.674 li
57.9269 212.674 li
52.9685 245.636 li
70.7324 245.636 li
65.7745 212.674 li
64.9137 212.674 li
64.9137 213.674 li
cp
0 0 0 .6 nzopmsc
f
55.8786 82.8069 mo
54.1302 94.4273 li
61.8507 94.4273 li
61.8507 82.8069 li
55.8786 82.8069 li
cp
false sop
0 0 0 0 cmyk
f
61.8507 82.8069 mo
61.8507 63.4662 li
58.7878 63.4662 li
55.8786 82.8069 li
61.8507 82.8069 li
cp
true sop
0 0 0 .8 nzopmsc
f
64.9132 63.4662 mo
63.9243 63.615 li
68.4091 93.4273 li
55.2918 93.4273 li
59.6486 64.4662 li
64.9132 64.4662 li
64.9132 63.4662 li
63.9243 63.615 li
64.9132 63.4662 li
64.9132 62.4662 li
57.9269 62.4662 li
52.9685 95.4273 li
70.7325 95.4273 li
65.774 62.4662 li
64.9132 62.4662 li
64.9132 63.4662 li
cp
0 0 0 .6 nzopmsc
f
55.4222 135.91 mo
54.1302 144.497 li
60.7496 144.497 li
60.7496 135.91 li
55.4222 135.91 li
cp
false sop
0 0 0 0 cmyk
f
60.7496 133.708 mo
60.7496 113.535 li
58.7878 113.535 li
55.7533 133.708 li
60.7496 133.708 li
cp
f
62.9519 144.497 mo
69.5708 144.497 li
68.2792 135.91 li
62.9519 135.91 li
62.9519 144.497 li
cp
f
67.9481 133.708 mo
64.9132 113.535 li
62.9519 113.535 li
62.9519 133.708 li
67.9481 133.708 li
cp
f
64.9132 113.535 mo
63.9243 113.684 li
68.4091 143.497 li
55.2918 143.497 li
59.6486 114.535 li
64.9132 114.535 li
64.9132 113.535 li
63.9243 113.684 li
64.9132 113.535 li
64.9132 112.535 li
57.9269 112.535 li
52.9685 145.497 li
70.7324 145.497 li
65.774 112.535 li
64.9132 112.535 li
64.9132 113.535 li
cp
true sop
0 0 0 .6 nzopmsc
f
64.9132 163.605 mo
63.9243 163.753 li
68.4091 193.566 li
55.2918 193.566 li
59.6486 164.605 li
64.9132 164.605 li
64.9132 163.605 li
63.9243 163.753 li
64.9132 163.605 li
64.9132 162.605 li
57.9269 162.605 li
52.9685 195.566 li
70.7324 195.566 li
65.774 162.605 li
64.9132 162.605 li
64.9132 163.605 li
cp
f
55.7531 333.986 mo
55.4219 336.187 li
60.7493 336.187 li
60.7493 344.774 li
62.9511 344.774 li
62.9511 336.187 li
68.2794 336.187 li
67.9478 333.986 li
62.9511 333.986 li
62.9511 313.813 li
60.7493 313.813 li
60.7493 333.986 li
55.7531 333.986 li
cp
false sop
0 0 0 0 cmyk
f
64.9134 313.813 mo
63.9245 313.961 li
68.4089 343.774 li
55.2921 343.774 li
59.6483 314.812 li
64.9134 314.813 li
64.9134 313.813 li
63.9245 313.961 li
64.9134 313.813 li
64.9134 312.813 li
57.9266 312.813 li
52.9687 345.774 li
70.7322 345.774 li
65.7742 312.813 li
64.9134 312.813 li
64.9134 313.813 li
cp
true sop
0 0 0 .6 nzopmsc
f
55.6827 384.523 mo
68.0182 384.523 li
66.4657 374.203 li
57.2352 374.203 li
55.6827 384.523 li
cp
false sop
0 0 0 0 cmyk
f
66.4657 374.203 mo
64.9137 363.882 li
58.7877 363.882 li
57.2352 374.203 li
66.4657 374.203 li
cp
0 0 0 .6 cmyk
f
64.9137 363.882 mo
63.9248 364.031 li
68.4091 393.843 li
55.2918 393.843 li
59.6485 364.882 li
64.9137 364.882 li
64.9137 363.882 li
63.9248 364.031 li
64.9137 363.882 li
64.9137 362.882 li
57.9269 362.882 li
52.9684 395.843 li
70.7325 395.843 li
65.7745 362.882 li
64.9137 362.882 li
64.9137 363.882 li
cp
true sop
0 0 0 .6 nzopmsc
f
146.238 527.847 mo
145.238 527.847 li
145.238 545.529 li
128.555 545.529 li
128.555 529.465 li
136.896 533.635 li
146.685 528.741 li
146.238 527.847 li
145.238 527.847 li
146.238 527.847 li
145.79 526.952 li
136.896 531.399 li
126.555 526.229 li
126.555 547.529 li
147.238 547.529 li
147.238 526.229 li
145.79 526.952 li
146.238 527.847 li
cp
f
113.538 527.847 mo
113.538 537.188 li
94.8553 537.188 li
94.8553 527.847 li
104.197 532.518 li
113.538 527.847 li
cp
false sop
0 0 0 .6 cmyk
f
113.538 537.188 mo
113.538 546.529 li
94.8553 546.529 li
94.8553 537.188 li
113.538 537.188 li
cp
0 0 0 0 cmyk
f
113.538 527.847 mo
112.538 527.847 li
112.538 545.529 li
95.8553 545.529 li
95.8553 529.465 li
104.197 533.636 li
113.985 528.741 li
113.538 527.847 li
112.538 527.847 li
113.538 527.847 li
113.091 526.953 li
104.197 531.4 li
93.8553 526.229 li
93.8553 547.529 li
114.538 547.529 li
114.538 526.229 li
113.091 526.953 li
113.538 527.847 li
cp
true sop
0 0 0 .6 nzopmsc
f
207.901 527.847 mo
207.901 546.529 li
196.691 546.529 li
196.691 527.847 li
207.901 527.847 li
cp
false sop
0 0 0 .6 cmyk
f
211.637 527.847 mo
210.637 527.847 li
210.637 545.529 li
193.954 545.529 li
193.954 528.847 li
211.637 528.847 li
211.637 527.847 li
210.637 527.847 li
211.637 527.847 li
211.637 526.847 li
191.954 526.847 li
191.954 547.529 li
212.637 547.529 li
212.637 526.847 li
211.637 526.847 li
211.637 527.847 li
cp
true sop
0 0 0 .6 nzopmsc
f
160.255 546.529 mo
160.255 527.847 li
163.991 527.847 li
163.991 546.529 li
160.255 546.529 li
cp
false sop
0 0 0 .6 cmyk
f
163.991 546.529 mo
163.991 527.847 li
167.728 527.847 li
167.728 546.529 li
163.991 546.529 li
cp
0 0 0 0 cmyk
f
171.464 546.529 mo
171.464 527.847 li
175.201 527.847 li
175.201 546.529 li
171.464 546.529 li
cp
f
175.201 546.529 mo
175.201 527.847 li
178.937 527.847 li
178.937 546.529 li
175.201 546.529 li
cp
0 0 0 .6 cmyk
f
178.937 527.847 mo
177.937 527.847 li
177.937 545.529 li
161.254 545.529 li
161.254 528.847 li
178.937 528.847 li
178.937 527.847 li
177.937 527.847 li
178.937 527.847 li
178.937 526.847 li
159.254 526.847 li
159.254 547.529 li
179.937 547.529 li
179.937 526.847 li
178.937 526.847 li
178.937 527.847 li
cp
true sop
0 0 0 .6 nzopmsc
f
234.995 527.847 mo
234.995 546.529 li
225.653 546.529 li
225.653 527.847 li
234.995 527.847 li
cp
false sop
0 0 0 .6 cmyk
f
244.336 527.847 mo
243.336 527.847 li
243.336 545.529 li
226.653 545.529 li
226.653 528.847 li
244.336 528.847 li
244.336 527.847 li
243.336 527.847 li
244.336 527.847 li
244.336 526.847 li
224.653 526.847 li
224.653 547.529 li
245.336 547.529 li
245.336 526.847 li
244.336 526.847 li
244.336 527.847 li
cp
true sop
0 0 0 .6 nzopmsc
f
277.036 527.847 mo
277.036 546.529 li
258.353 546.529 li
258.353 527.847 li
277.036 527.847 li
cp
false sop
0 0 0 0 cmyk
f
277.036 527.847 mo
276.036 527.847 li
276.036 545.529 li
259.353 545.529 li
259.353 528.847 li
277.036 528.847 li
277.036 527.847 li
276.036 527.847 li
277.036 527.847 li
277.036 526.847 li
257.353 526.847 li
257.353 547.529 li
278.036 547.529 li
278.036 526.847 li
277.036 526.847 li
277.036 527.847 li
cp
true sop
0 0 0 .6 nzopmsc
f
291.052 543.415 mo
291.052 540.302 li
309.735 540.302 li
309.735 543.415 li
291.052 543.415 li
cp
false sop
0 0 0 .6 cmyk
f
291.052 537.188 mo
291.052 534.074 li
309.735 534.074 li
309.735 537.188 li
291.052 537.188 li
cp
f
291.052 530.961 mo
291.052 527.847 li
309.735 527.847 li
309.735 530.961 li
291.052 530.961 li
cp
f
309.735 527.847 mo
308.735 527.847 li
308.735 545.529 li
292.052 545.529 li
292.052 528.847 li
309.735 528.847 li
309.735 527.847 li
308.735 527.847 li
309.735 527.847 li
309.735 526.847 li
290.052 526.847 li
290.052 547.529 li
310.735 547.529 li
310.735 526.847 li
309.735 526.847 li
309.735 527.847 li
cp
true sop
0 0 0 .6 nzopmsc
f
113.538 413.753 mo
113.538 432.435 li
94.8555 432.435 li
94.8555 413.753 li
113.538 413.753 li
cp
false sop
0 0 0 0 cmyk
f
113.538 413.753 mo
112.538 413.753 li
112.538 431.435 li
95.8555 431.435 li
95.8555 414.753 li
113.538 414.753 li
113.538 413.753 li
112.538 413.753 li
113.538 413.753 li
113.538 412.753 li
93.8555 412.753 li
93.8555 433.435 li
114.538 433.435 li
114.538 412.753 li
113.538 412.753 li
113.538 413.753 li
cp
true sop
0 0 0 .6 nzopmsc
f
211.636 413.753 mo
211.636 423.093 li
192.954 423.093 li
192.954 413.753 li
211.636 413.753 li
cp
false sop
0 0 0 .6 cmyk
f
211.636 413.753 mo
210.636 413.753 li
210.636 431.435 li
193.954 431.435 li
193.954 414.753 li
211.636 414.753 li
211.636 413.753 li
210.636 413.753 li
211.636 413.753 li
211.636 412.753 li
191.954 412.753 li
191.954 433.435 li
212.636 433.435 li
212.636 412.753 li
211.636 412.753 li
211.636 413.753 li
cp
true sop
0 0 0 .6 nzopmsc
f
225.654 423.094 mo
225.654 413.753 li
234.995 413.753 li
234.995 423.094 li
225.654 423.094 li
cp
0 0 0 .8 nzopmsc
f
234.995 432.435 mo
234.995 423.094 li
244.336 423.094 li
244.336 432.435 li
234.995 432.435 li
cp
f
244.336 413.753 mo
243.336 413.753 li
243.336 431.435 li
226.653 431.435 li
226.654 414.753 li
244.336 414.753 li
244.336 413.753 li
243.336 413.753 li
244.336 413.753 li
244.336 412.753 li
224.654 412.753 li
224.654 433.435 li
245.336 433.435 li
245.336 412.753 li
244.336 412.753 li
244.336 413.753 li
cp
0 0 0 .6 nzopmsc
f
160.255 432.435 mo
160.255 413.753 li
166.482 413.753 li
166.482 432.435 li
160.255 432.435 li
cp
false sop
0 0 0 .6 cmyk
f
172.709 432.435 mo
172.709 413.753 li
178.937 413.753 li
178.937 432.435 li
172.709 432.435 li
cp
f
178.937 413.753 mo
177.937 413.753 li
177.937 431.435 li
161.255 431.435 li
161.255 414.753 li
178.937 414.753 li
178.937 413.753 li
177.937 413.753 li
178.937 413.753 li
178.937 412.753 li
159.255 412.753 li
159.255 433.435 li
179.937 433.435 li
179.937 412.753 li
178.937 412.753 li
178.937 413.753 li
cp
true sop
0 0 0 .6 nzopmsc
f
136.896 417.674 mo
139.889 417.674 142.316 420.1 142.316 423.094 cv
142.316 426.087 139.889 428.513 136.896 428.513 cv
133.903 428.513 131.476 426.087 131.476 423.094 cv
131.476 420.1 133.903 417.674 136.896 417.674 cv
cp
0 0 0 .8 nzopmsc
f
146.237 413.752 mo
145.237 413.752 li
145.237 431.435 li
128.555 431.435 li
128.555 414.752 li
146.237 414.752 li
146.237 413.752 li
145.237 413.752 li
146.237 413.752 li
146.237 412.752 li
126.555 412.752 li
126.555 433.435 li
147.237 433.435 li
147.237 412.752 li
146.237 412.752 li
146.237 413.752 li
cp
0 0 0 .6 nzopmsc
f
277.035 413.752 mo
277.035 432.435 li
258.353 432.435 li
258.353 413.752 li
277.035 413.752 li
cp
false sop
0 0 0 .6 cmyk
f
267.694 421.837 mo
259.609 413.752 li
258.353 413.752 li
258.353 415.008 li
266.439 423.093 li
258.353 431.179 li
258.353 432.435 li
259.609 432.435 li
267.694 424.349 li
275.779 432.435 li
277.035 432.435 li
277.035 431.179 li
268.95 423.093 li
277.035 415.008 li
277.035 413.752 li
275.779 413.752 li
267.694 421.837 li
cp
0 0 0 0 cmyk
f
277.035 413.752 mo
276.035 413.752 li
276.035 431.435 li
259.353 431.435 li
259.353 414.752 li
277.035 414.752 li
277.035 413.752 li
276.035 413.752 li
277.035 413.752 li
277.035 412.752 li
257.353 412.752 li
257.353 433.435 li
278.035 433.435 li
278.035 412.752 li
277.035 412.752 li
277.035 413.752 li
cp
true sop
0 0 0 .6 nzopmsc
f
291.053 432.435 mo
291.053 427.764 li
295.723 427.764 li
295.723 432.435 li
291.053 432.435 li
cp
false sop
0 0 0 0 cmyk
f
291.053 427.764 mo
291.053 423.094 li
295.723 423.094 li
295.723 427.764 li
291.053 427.764 li
cp
0 0 0 .6 cmyk
f
291.053 423.094 mo
291.053 418.423 li
295.723 418.423 li
295.723 423.094 li
291.053 423.094 li
cp
0 0 0 0 cmyk
f
291.053 418.423 mo
291.053 413.753 li
295.723 413.753 li
295.723 418.423 li
291.053 418.423 li
cp
0 0 0 .6 cmyk
f
295.723 432.435 mo
295.723 427.764 li
300.393 427.764 li
300.393 432.435 li
295.723 432.435 li
cp
f
295.723 427.764 mo
295.723 423.094 li
300.393 423.094 li
300.393 427.764 li
295.723 427.764 li
cp
0 0 0 0 cmyk
f
295.723 423.094 mo
295.723 418.423 li
300.393 418.423 li
300.393 423.094 li
295.723 423.094 li
cp
0 0 0 .6 cmyk
f
295.723 418.423 mo
295.723 413.753 li
300.393 413.753 li
300.393 418.423 li
295.723 418.423 li
cp
0 0 0 0 cmyk
f
300.393 432.435 mo
300.393 427.764 li
305.064 427.764 li
305.064 432.435 li
300.393 432.435 li
cp
f
300.393 427.764 mo
300.393 423.094 li
305.064 423.094 li
305.064 427.764 li
300.393 427.764 li
cp
0 0 0 .6 cmyk
f
300.393 423.094 mo
300.393 418.423 li
305.064 418.423 li
305.064 423.094 li
300.393 423.094 li
cp
0 0 0 0 cmyk
f
300.393 418.423 mo
300.393 413.753 li
305.064 413.753 li
305.064 418.423 li
300.393 418.423 li
cp
0 0 0 .6 cmyk
f
305.064 432.435 mo
305.064 427.764 li
309.735 427.764 li
309.735 432.435 li
305.064 432.435 li
cp
f
305.064 427.764 mo
305.064 423.094 li
309.735 423.094 li
309.735 427.764 li
305.064 427.764 li
cp
0 0 0 0 cmyk
f
305.064 423.094 mo
305.064 418.423 li
309.735 418.423 li
309.735 423.094 li
305.064 423.094 li
cp
0 0 0 .6 cmyk
f
305.064 418.423 mo
305.064 413.753 li
309.735 413.753 li
309.735 418.423 li
305.064 418.423 li
cp
0 0 0 0 cmyk
f
309.735 413.753 mo
308.735 413.753 li
308.735 431.435 li
292.052 431.435 li
292.052 414.753 li
309.735 414.753 li
309.735 413.753 li
308.735 413.753 li
309.735 413.753 li
309.735 412.753 li
290.053 412.753 li
290.053 433.435 li
310.735 433.435 li
310.735 412.753 li
309.735 412.753 li
309.735 413.753 li
cp
true sop
0 0 0 .6 nzopmsc
f
145.969 274.069 mo
145.969 292.751 li
127.287 292.751 li
127.287 274.069 li
145.969 274.069 li
cp
false sop
0 0 0 .6 cmyk
f
141.71 278.328 mo
141.71 288.492 li
131.546 288.492 li
131.546 278.328 li
141.71 278.328 li
cp
0 0 0 0 cmyk
f
145.969 274.069 mo
144.969 274.069 li
144.969 291.751 li
128.287 291.751 li
128.287 275.069 li
145.969 275.069 li
145.969 274.069 li
144.969 274.069 li
145.969 274.069 li
145.969 273.069 li
126.287 273.069 li
126.287 293.751 li
146.969 293.751 li
146.969 273.069 li
145.969 273.069 li
145.969 274.069 li
cp
true sop
0 0 0 .6 nzopmsc
f
112.853 274.069 mo
111.853 274.069 li
111.853 291.751 li
95.1707 291.751 li
95.1707 275.069 li
112.853 275.069 li
112.853 274.069 li
111.853 274.069 li
112.853 274.069 li
112.853 273.069 li
93.1707 273.069 li
93.1707 293.751 li
113.853 293.751 li
113.853 273.069 li
112.853 273.069 li
112.853 274.069 li
cp
f
309.735 274.069 mo
308.735 274.069 li
308.735 291.751 li
292.052 291.751 li
292.052 275.068 li
309.735 275.068 li
309.735 274.069 li
308.735 274.069 li
309.735 274.069 li
309.735 273.069 li
290.052 273.069 li
290.052 293.751 li
310.735 293.751 li
310.735 273.069 li
309.735 273.069 li
309.735 274.069 li
cp
f
145.642 150.63 mo
145.642 169.313 li
126.959 169.313 li
126.959 150.63 li
145.642 150.63 li
cp
false sop
0 0 0 .6 cmyk
f
142.499 153.772 mo
142.499 166.17 li
130.102 166.17 li
130.102 153.772 li
142.499 153.772 li
cp
0 0 0 0 cmyk
f
145.642 150.63 mo
144.642 150.63 li
144.642 168.312 li
127.959 168.312 li
127.959 151.63 li
145.642 151.63 li
145.642 150.63 li
144.642 150.63 li
145.642 150.63 li
145.642 149.63 li
125.959 149.63 li
125.959 170.312 li
146.642 170.312 li
146.642 149.63 li
145.642 149.63 li
145.642 150.63 li
cp
true sop
0 0 0 .6 nzopmsc
f
113.538 150.63 mo
113.538 169.313 li
94.8552 169.313 li
94.8552 150.63 li
113.538 150.63 li
cp
false sop
0 0 0 0 cmyk
f
96.1111 169.313 mo
112.282 169.313 li
104.197 161.228 li
96.1111 169.313 li
cp
f
113.538 168.057 mo
113.538 151.886 li
105.453 159.971 li
113.538 168.057 li
cp
f
94.8552 151.886 mo
94.8552 168.057 li
102.941 159.971 li
94.8552 151.886 li
cp
f
112.282 150.63 mo
96.1111 150.63 li
104.197 158.716 li
112.282 150.63 li
cp
f
113.538 150.63 mo
112.538 150.63 li
112.538 168.313 li
95.8551 168.313 li
95.8551 151.63 li
113.538 151.63 li
113.538 150.63 li
112.538 150.63 li
113.538 150.63 li
113.538 149.63 li
93.8552 149.63 li
93.8552 170.313 li
114.538 170.313 li
114.538 149.63 li
113.538 149.63 li
113.538 150.63 li
cp
true sop
0 0 0 .6 nzopmsc
f
159.623 169.313 mo
159.623 161.357 li
167.58 161.357 li
167.58 169.313 li
159.623 169.313 li
cp
false sop
0 0 0 0 cmyk
f
159.623 158.586 mo
159.623 150.63 li
167.58 150.63 li
167.58 158.586 li
159.623 158.586 li
cp
f
170.35 169.313 mo
170.35 161.357 li
178.305 161.357 li
178.305 169.313 li
170.35 169.313 li
cp
f
170.35 158.586 mo
170.35 150.63 li
178.305 150.63 li
178.305 158.586 li
170.35 158.586 li
cp
f
159.623 158.586 mo
159.623 161.357 li
167.58 161.357 li
167.58 169.313 li
170.35 169.313 li
170.35 161.357 li
178.305 161.357 li
178.305 158.586 li
170.35 158.586 li
170.35 150.63 li
167.58 150.63 li
167.58 158.586 li
159.623 158.586 li
cp
0 0 0 .6 cmyk
f
178.305 150.63 mo
177.305 150.63 li
177.305 168.313 li
160.623 168.313 li
160.623 151.63 li
178.305 151.63 li
178.305 150.63 li
177.305 150.63 li
178.305 150.63 li
178.305 149.63 li
158.623 149.63 li
158.623 170.313 li
179.305 170.313 li
179.305 149.63 li
178.305 149.63 li
178.305 150.63 li
cp
true sop
0 0 0 .6 nzopmsc
f
211.637 150.63 mo
210.637 150.63 li
210.637 168.313 li
193.954 168.313 li
193.954 151.63 li
211.637 151.63 li
211.637 150.63 li
210.637 150.63 li
211.637 150.63 li
211.637 149.63 li
191.954 149.63 li
191.954 170.313 li
212.637 170.313 li
212.637 149.63 li
211.637 149.63 li
211.637 150.63 li
cp
f
225.653 150.631 mo
244.336 150.631 li
234.996 159.971 li
225.653 150.631 li
cp
false sop
0 0 0 .6 cmyk
f
244.336 169.313 mo
225.653 169.313 li
234.996 159.971 li
244.336 169.313 li
cp
true sop
0 0 0 .8 nzopmsc
f
244.336 150.631 mo
243.336 150.631 li
243.336 168.313 li
226.653 168.313 li
226.653 151.631 li
244.336 151.631 li
244.336 150.631 li
243.336 150.631 li
244.336 150.631 li
244.336 149.631 li
224.653 149.631 li
224.653 170.313 li
245.336 170.313 li
245.336 149.631 li
244.336 149.631 li
244.336 150.631 li
cp
0 0 0 .6 nzopmsc
f
211.637 274.069 mo
210.637 274.069 li
210.637 291.751 li
193.954 291.751 li
193.954 275.069 li
211.637 275.069 li
211.637 274.069 li
210.637 274.069 li
211.637 274.069 li
211.637 273.069 li
191.954 273.069 li
191.954 293.751 li
212.637 293.751 li
212.637 273.069 li
211.637 273.069 li
211.637 274.069 li
cp
f
240.076 278.328 mo
240.076 288.492 li
229.912 288.492 li
229.912 278.328 li
240.076 278.328 li
cp
false sop
0 0 0 .6 cmyk
f
244.336 274.069 mo
243.336 274.069 li
243.336 291.751 li
226.653 291.751 li
226.653 275.069 li
244.336 275.069 li
244.336 274.069 li
243.336 274.069 li
244.336 274.069 li
244.336 273.069 li
224.653 273.069 li
224.653 293.751 li
245.336 293.751 li
245.336 273.069 li
244.336 273.069 li
244.336 274.069 li
cp
true sop
0 0 0 .6 nzopmsc
f
258.056 280.296 mo
258.056 274.069 li
276.739 274.069 li
276.739 280.296 li
258.056 280.296 li
cp
false sop
0 0 0 .6 cmyk
f
276.739 274.069 mo
275.739 274.069 li
275.739 291.751 li
259.056 291.751 li
259.056 275.069 li
276.739 275.069 li
276.739 274.069 li
275.739 274.069 li
276.739 274.069 li
276.739 273.069 li
257.056 273.069 li
257.056 293.751 li
277.739 293.751 li
277.739 273.069 li
276.739 273.069 li
276.739 274.069 li
cp
true sop
0 0 0 .6 nzopmsc
f
178.746 274.069 mo
177.746 274.069 li
177.746 291.751 li
161.064 291.751 li
161.064 275.068 li
178.746 275.068 li
178.746 274.069 li
177.746 274.069 li
178.746 274.069 li
178.746 273.069 li
159.064 273.069 li
159.064 293.751 li
179.746 293.751 li
179.746 273.069 li
178.746 273.069 li
178.746 274.069 li
cp
f
344.344 349.055 mo
344.344 346.61 342.618 346.265 339.619 346.265 cv
336.709 346.265 334.82 346.55 334.82 349.039 cv
334.82 351.485 336.709 351.844 339.619 351.844 cv
342.618 351.844 344.344 351.499 344.344 349.055 cv
cp
333.679 349.055 mo
333.679 345.574 335.674 344.539 339.619 344.539 cv
343.654 344.539 345.559 345.515 345.559 349.055 cv
345.559 352.534 343.654 353.57 339.619 353.57 cv
335.674 353.57 333.679 352.534 333.679 349.055 cv
cp
false sop
0 0 0 1 cmyk
f
338.524 342.709 mo
338.134 343.669 li
337.399 343.669 li
337.399 340.43 li
338.134 340.43 li
338.524 341.195 li
343.399 339.454 li
344.089 339.244 li
343.399 339.05 li
338.524 337.28 li
338.134 338.09 li
337.399 338.09 li
337.399 334.85 li
338.134 334.85 li
338.524 335.855 li
345.274 338.63 li
345.274 340.13 li
338.524 342.709 li
cp
f
340.564 332.24 mo
340.564 328.414 li
340.309 328.385 340.069 328.385 339.859 328.385 cv
339.139 328.385 338.269 328.73 338.269 330.185 cv
338.269 331.579 338.809 332.119 340.564 332.24 cv
cp
345.514 330.244 mo
345.514 332.794 344.299 333.799 341.314 333.799 cv
338.464 333.799 337.099 332.72 337.099 330.095 cv
337.099 327.244 338.824 327.02 340.414 327.005 cv
340.969 327.005 341.629 327.065 341.764 327.095 cv
341.764 332.254 li
343.623 332.18 344.314 331.699 344.314 330.065 cv
344.314 328.775 343.908 328.1 343.594 327.725 cv
344.719 327.199 li
345.094 327.784 345.514 328.76 345.514 330.244 cv
cp
f
345.288 321.53 mo
345.288 325.145 li
344.554 325.145 li
344.163 324.515 li
338.689 324.515 li
338.164 325.579 li
337.399 325.579 li
337.399 323.3 li
338.794 323.3 li
337.999 322.82 337.249 321.8 337.249 320.69 cv
337.249 319.97 337.384 319.385 337.549 319.265 cv
339.724 319.34 li
339.724 320.24 li
338.494 320.675 li
338.584 321.935 339.259 322.64 340.054 323.03 cv
344.149 323.03 li
344.554 321.53 li
345.288 321.53 li
cp
f
342.889 308.615 mo
341.779 308.615 li
341.689 309.199 341.644 309.935 341.644 310.534 cv
341.644 311.81 342.019 312.44 342.934 312.44 cv
343.654 312.44 344.224 312.11 344.224 311.344 cv
344.224 310.504 343.474 309.244 342.889 308.615 cv
cp
344.118 308.51 mo
344.689 309.079 345.484 310.145 345.484 311.525 cv
345.484 313.28 344.283 313.969 342.904 313.969 cv
340.939 313.969 340.489 312.065 340.489 310.624 cv
340.489 309.874 340.549 309.155 340.624 308.615 cv
339.844 308.615 li
338.809 308.615 338.254 309.199 338.254 310.475 cv
338.254 311.435 338.524 312.034 338.674 312.304 cv
339.544 312.544 li
339.544 313.549 li
337.894 313.549 li
337.519 312.874 337.129 311.869 337.129 310.339 cv
337.129 308.135 337.954 307.145 339.814 307.145 cv
344.149 307.145 li
344.569 306.185 li
345.274 306.185 li
345.274 308.51 li
344.118 308.51 li
cp
f
345.274 300.966 mo
345.274 304.58 li
344.538 304.58 li
344.149 303.95 li
338.689 303.95 li
338.164 305.016 li
337.399 305.016 li
337.399 302.736 li
338.749 302.736 li
338.014 302.301 337.249 301.356 337.249 299.886 cv
337.249 297.696 338.059 297.171 340.158 297.171 cv
344.149 297.171 li
344.538 296.046 li
345.274 296.046 li
345.274 299.375 li
344.538 299.375 li
344.149 298.656 li
340.579 298.656 li
338.809 298.656 338.434 298.926 338.434 300.17 cv
338.434 301.146 339.064 302.045 339.934 302.465 cv
344.149 302.465 li
344.538 300.966 li
345.274 300.966 li
cp
f
342.889 288.936 mo
338.884 288.936 li
338.509 289.325 338.209 289.986 338.209 291.05 cv
338.209 292.731 339.499 293.045 341.328 293.045 cv
343.084 293.045 344.359 292.43 344.359 291.35 cv
344.359 290.165 343.684 289.46 342.889 288.936 cv
cp
344.118 288.861 mo
344.794 289.37 345.514 290.21 345.514 291.68 cv
345.514 293.48 344.059 294.605 341.328 294.605 cv
338.554 294.605 337.054 293.781 337.054 291.366 cv
337.054 290.18 337.369 289.446 337.759 288.936 cv
334.564 288.936 li
334.039 289.986 li
333.275 289.986 li
333.275 287.481 li
343.953 287.481 li
344.569 286.566 li
345.259 286.566 li
345.259 288.726 li
344.118 288.861 li
cp
f
344.344 276.546 mo
344.344 274.101 342.618 273.756 339.619 273.756 cv
336.709 273.756 334.82 274.041 334.82 276.531 cv
334.82 278.976 336.709 279.335 339.619 279.335 cv
342.618 279.335 344.344 278.991 344.344 276.546 cv
cp
333.679 276.546 mo
333.679 273.066 335.674 272.031 339.619 272.031 cv
343.654 272.031 345.559 273.006 345.559 276.546 cv
345.559 280.026 343.654 281.061 339.619 281.061 cv
335.674 281.061 333.679 280.026 333.679 276.546 cv
cp
f
343.998 264.305 mo
344.884 264.89 345.469 265.985 345.469 267.35 cv
345.469 269.284 344.583 269.78 342.334 269.78 cv
338.554 269.78 li
338.194 270.8 li
337.399 270.8 li
337.399 268.28 li
341.749 268.28 li
343.623 268.28 344.254 268.04 344.254 266.991 cv
344.254 265.82 343.578 264.95 343.054 264.545 cv
338.599 264.545 li
338.194 265.79 li
337.399 265.79 li
337.399 263.06 li
344.044 263.06 li
344.569 261.95 li
345.274 261.95 li
345.274 264.305 li
343.998 264.305 li
cp
f
342.499 260.241 mo
338.464 260.241 li
338.464 261.2 li
337.399 261.2 li
337.399 260.241 li
335.944 259.745 li
335.944 258.801 li
337.399 258.801 li
337.399 256.521 li
338.464 256.521 li
338.464 258.801 li
342.334 258.801 li
343.639 258.801 344.389 258.696 344.389 257.481 cv
344.389 256.971 344.239 256.626 344.104 256.371 cv
344.974 256.086 li
345.184 256.341 345.469 257.001 345.469 257.976 cv
345.469 259.641 344.689 260.241 342.499 260.241 cv
cp
f
23.6155 443.863 mo
27.678 443.863 li
27.678 442.083 li
27.678 440.865 26.9778 440.262 25.5628 440.262 cv
24.2044 440.262 23.5735 440.739 23.5735 442.07 cv
23.5735 442.713 23.6019 443.371 23.6155 443.863 cv
cp
33.1409 442.825 mo
33.1409 446.272 li
32.5247 446.272 li
32.0901 445.333 li
23.7142 445.333 li
23.3636 446.299 li
22.6351 446.299 li
22.6067 445.291 22.5374 442.797 22.5374 441.971 cv
22.5374 440.15 22.9573 438.763 25.4368 438.763 cv
27.1741 438.763 28.3226 439.352 28.6722 440.655 cv
32.0765 438.833 li
32.5667 437.783 li
33.1409 437.783 li
33.1409 439.926 li
28.7981 442.083 li
28.7981 443.863 li
32.0628 443.863 li
32.5247 442.825 li
33.1409 442.825 li
cp
f
28.7425 435.477 mo
28.7425 431.905 li
28.5042 431.876 28.2806 431.876 28.0843 431.876 cv
27.4114 431.876 26.5989 432.199 26.5989 433.558 cv
26.5989 434.861 27.1038 435.365 28.7425 435.477 cv
cp
33.3645 433.614 mo
33.3645 435.994 32.2308 436.933 29.4427 436.933 cv
26.7815 436.933 25.5071 435.925 25.5071 433.473 cv
25.5071 430.812 27.1175 430.602 28.6028 430.588 cv
29.1204 430.588 29.7366 430.644 29.8636 430.672 cv
29.8636 435.491 li
31.5999 435.42 32.2444 434.972 32.2444 433.446 cv
32.2444 432.241 31.8665 431.611 31.5716 431.26 cv
32.6224 430.77 li
32.9729 431.317 33.3645 432.227 33.3645 433.614 cv
cp
f
28.2239 423.855 mo
26.9212 424.121 li
26.7112 424.36 26.5989 424.724 26.5989 425.228 cv
26.5989 426.839 27.6644 427.469 29.4427 427.469 cv
31.222 427.469 32.2581 426.95 32.2581 425.298 cv
32.2581 424.205 31.8245 423.574 31.5296 423.225 cv
32.553 422.735 li
32.9026 423.281 33.3792 424.037 33.3792 425.298 cv
33.3792 428.057 31.9642 428.911 29.4427 428.911 cv
26.9212 428.911 25.5071 427.679 25.5071 425.228 cv
25.5071 424.415 25.8147 423.407 26.137 422.874 cv
28.2239 422.874 li
28.2239 423.855 li
cp
f
28.7425 419.853 mo
28.7425 416.281 li
28.5042 416.252 28.2806 416.252 28.0843 416.252 cv
27.4114 416.252 26.5989 416.574 26.5989 417.934 cv
26.5989 419.236 27.1038 419.741 28.7425 419.853 cv
cp
33.3645 417.99 mo
33.3645 420.37 32.2308 421.309 29.4427 421.309 cv
26.7815 421.309 25.5071 420.301 25.5071 417.849 cv
25.5071 415.188 27.1175 414.978 28.6028 414.964 cv
29.1204 414.964 29.7366 415.02 29.8636 415.048 cv
29.8636 419.866 li
31.5999 419.796 32.2444 419.348 32.2444 417.822 cv
32.2444 416.616 31.8665 415.987 31.5716 415.636 cv
32.6224 415.146 li
32.9729 415.693 33.3645 416.603 33.3645 417.99 cv
cp
f
22.1731 411.873 mo
22.1731 411.046 22.3128 410.949 23.1536 410.949 cv
23.9798 410.949 24.1624 411.046 24.1624 411.873 cv
24.1624 412.713 23.9798 412.797 23.1536 412.797 cv
22.3128 412.797 22.1731 412.713 22.1731 411.873 cv
cp
32.4544 413.092 mo
32.1048 412.448 li
26.9212 412.448 li
26.5013 413.287 li
25.7874 413.287 li
25.7874 411.061 li
32.0901 411.061 li
32.0901 411.046 li
32.4544 409.982 li
33.1409 409.982 li
33.1409 413.092 li
32.4544 413.092 li
cp
f
26.8372 408.346 mo
26.4729 409.242 li
25.7874 409.242 li
25.7874 406.216 li
26.4729 406.216 li
26.8372 406.931 li
31.3899 405.306 li
32.0345 405.11 li
31.3899 404.928 li
26.8372 403.275 li
26.4729 404.032 li
25.7874 404.032 li
25.7874 401.005 li
26.4729 401.005 li
26.8372 401.944 li
33.1409 404.535 li
33.1409 405.936 li
26.8372 408.346 li
cp
f
28.7425 398.574 mo
28.7425 395.001 li
28.5042 394.973 28.2806 394.973 28.0843 394.973 cv
27.4114 394.973 26.5989 395.295 26.5989 396.655 cv
26.5989 397.956 27.1038 398.461 28.7425 398.574 cv
cp
33.3645 396.71 mo
33.3645 399.091 32.2308 400.03 29.4427 400.03 cv
26.7815 400.03 25.5071 399.022 25.5071 396.57 cv
25.5071 393.908 27.1175 393.699 28.6028 393.685 cv
29.1204 393.685 29.7366 393.741 29.8636 393.769 cv
29.8636 398.587 li
31.5999 398.517 32.2444 398.069 32.2444 396.542 cv
32.2444 395.337 31.8665 394.707 31.5716 394.357 cv
32.6224 393.866 li
32.9729 394.413 33.3645 395.324 33.3645 396.71 cv
cp
f
33.1409 384.559 mo
33.1409 387.935 li
32.4544 387.935 li
32.0901 387.346 li
26.9915 387.346 li
26.5013 388.341 li
25.7874 388.341 li
25.7874 386.211 li
27.0335 386.211 li
26.1927 385.568 25.6048 384.727 25.6048 383.298 cv
25.6048 382.429 26.1653 381.701 26.9212 381.379 cv
26.095 380.721 25.6185 379.81 25.6185 378.703 cv
25.6185 376.84 26.5013 376.378 28.3645 376.378 cv
32.0901 376.378 li
32.4544 375.272 li
33.1409 375.272 li
33.1409 378.381 li
32.4544 378.381 li
32.1185 377.779 li
28.8548 377.779 li
27.3841 377.779 26.7815 378.045 26.7815 379.039 cv
26.7815 380.104 27.4817 380.861 28.3079 381.197 cv
32.0901 381.197 li
32.4544 379.768 li
33.1409 379.768 li
33.1409 383.144 li
32.4544 383.144 li
32.1185 382.598 li
28.8685 382.598 li
27.3694 382.598 26.7815 382.85 26.7815 383.859 cv
26.7815 384.895 27.5101 385.623 28.2239 385.959 cv
32.0901 385.959 li
32.4544 384.559 li
33.1409 384.559 li
cp
f
35.4241 373.276 mo
34.4573 372.883 li
34.7376 372.408 34.9895 371.706 34.9895 370.699 cv
34.9895 369.143 34.4153 368.667 32.9446 368.667 cv
32.4681 368.667 li
32.931 369.129 33.3226 369.829 33.3226 370.908 cv
33.3226 372.729 32.4964 373.373 30.3958 373.373 cv
26.8655 373.373 li
26.5296 374.326 li
25.7874 374.326 li
25.7874 371.973 li
30.0169 371.973 li
31.6282 371.973 32.1468 371.637 32.1468 370.628 cv
32.1468 369.661 31.6839 369.032 31.18 368.667 cv
26.8938 368.667 li
26.5296 369.787 li
25.7874 369.787 li
25.7874 367.281 li
33.0149 367.281 li
35.3118 367.281 36.0823 368.695 36.0823 370.46 cv
36.0823 372.043 35.6487 372.953 35.4241 373.276 cv
cp
f
30.9974 359.455 mo
32.5247 359.455 33.3509 360.352 33.3509 362.425 cv
33.3509 364.077 32.679 365.002 32.4407 365.241 cv
30.7737 365.241 li
30.7737 364.344 li
31.8938 364.022 li
32.0208 363.867 32.3147 363.391 32.3147 362.41 cv
32.3147 361.374 31.9778 360.772 31.0813 360.772 cv
30.4935 360.772 30.1292 361.374 29.8909 362.887 cv
29.639 364.484 29.0091 365.268 27.678 365.268 cv
26.431 365.268 25.4788 364.497 25.4788 362.41 cv
25.4788 360.953 25.9407 360.211 26.2493 359.862 cv
27.7903 359.862 li
27.7903 360.743 li
26.8792 361.01 li
26.7395 361.122 26.4456 361.655 26.4456 362.452 cv
26.4456 363.49 27.0472 363.951 27.6077 363.951 cv
28.3079 363.951 28.6165 363.364 28.8265 361.865 cv
29.0364 360.31 29.5833 359.455 30.9974 359.455 cv
cp
f
30.5491 357.652 mo
26.7815 357.652 li
26.7815 358.548 li
25.7874 358.548 li
25.7874 357.652 li
24.428 357.19 li
24.428 356.308 li
25.7874 356.308 li
25.7874 354.178 li
26.7815 354.178 li
26.7815 356.308 li
30.3958 356.308 li
31.6145 356.308 32.3147 356.209 32.3147 355.074 cv
32.3147 354.599 32.1741 354.277 32.0481 354.038 cv
32.8606 353.772 li
33.0569 354.01 33.3226 354.626 33.3226 355.537 cv
33.3226 357.092 32.595 357.652 30.5491 357.652 cv
cp
f
22.1731 351.17 mo
22.1731 350.343 22.3128 350.245 23.1536 350.245 cv
23.9798 350.245 24.1624 350.343 24.1624 351.17 cv
24.1624 352.01 23.9798 352.094 23.1536 352.094 cv
22.3128 352.094 22.1731 352.01 22.1731 351.17 cv
cp
32.4544 352.389 mo
32.1048 351.744 li
26.9212 351.744 li
26.5013 352.584 li
25.7874 352.584 li
25.7874 350.358 li
32.0901 350.358 li
32.0901 350.343 li
32.4544 349.279 li
33.1409 349.279 li
33.1409 352.389 li
32.4544 352.389 li
cp
f
28.2239 342.782 mo
26.9212 343.048 li
26.7112 343.286 26.5989 343.651 26.5989 344.155 cv
26.5989 345.765 27.6644 346.396 29.4427 346.396 cv
31.222 346.396 32.2581 345.877 32.2581 344.225 cv
32.2581 343.132 31.8245 342.501 31.5296 342.152 cv
32.553 341.661 li
32.9026 342.207 33.3792 342.964 33.3792 344.225 cv
33.3792 346.984 31.9642 347.838 29.4427 347.838 cv
26.9212 347.838 25.5071 346.606 25.5071 344.155 cv
25.5071 343.342 25.8147 342.333 26.137 341.801 cv
28.2239 341.801 li
28.2239 342.782 li
cp
f
30.9974 330.419 mo
32.5247 330.419 33.3509 331.316 33.3509 333.389 cv
33.3509 335.041 32.679 335.966 32.4407 336.204 cv
30.7737 336.204 li
30.7737 335.308 li
31.8938 334.986 li
32.0208 334.831 32.3147 334.355 32.3147 333.374 cv
32.3147 332.338 31.9778 331.736 31.0813 331.736 cv
30.4935 331.736 30.1292 332.338 29.8909 333.851 cv
29.639 335.448 29.0091 336.232 27.678 336.232 cv
26.431 336.232 25.4788 335.461 25.4788 333.374 cv
25.4788 331.917 25.9407 331.175 26.2493 330.825 cv
27.7903 330.825 li
27.7903 331.707 li
26.8792 331.974 li
26.7395 332.086 26.4456 332.618 26.4456 333.416 cv
26.4456 334.453 27.0472 334.915 27.6077 334.915 cv
28.3079 334.915 28.6165 334.327 28.8265 332.828 cv
29.0364 331.274 29.5833 330.419 30.9974 330.419 cv
cp
f
22.1731 327.482 mo
22.1731 326.655 22.3128 326.557 23.1536 326.557 cv
23.9798 326.557 24.1624 326.655 24.1624 327.482 cv
24.1624 328.322 23.9798 328.406 23.1536 328.406 cv
22.3128 328.406 22.1731 328.322 22.1731 327.482 cv
cp
32.4544 328.7 mo
32.1048 328.056 li
26.9212 328.056 li
26.5013 328.896 li
25.7874 328.896 li
25.7874 326.669 li
32.0901 326.669 li
32.0901 326.655 li
32.4544 325.59 li
33.1409 325.59 li
33.1409 328.7 li
32.4544 328.7 li
cp
f
31.4036 319.038 mo
27.4114 319.038 li
27.0472 319.431 26.6556 320.089 26.6556 320.999 cv
26.6556 322.344 27.7757 322.722 29.4847 322.722 cv
31.18 322.722 32.0628 322.246 32.0628 321.013 cv
32.0628 320.033 31.7825 319.445 31.4036 319.038 cv
cp
35.4241 323.647 mo
34.4573 323.254 li
34.7376 322.779 34.9895 322.077 34.9895 321.07 cv
34.9895 319.515 34.3733 319.038 32.805 319.038 cv
32.4964 319.038 li
32.931 319.557 33.2112 320.299 33.2112 321.434 cv
33.2112 323.227 32.1048 324.151 29.4847 324.151 cv
26.8938 324.151 25.5628 323.199 25.5628 321.181 cv
25.5628 320.089 25.9407 319.374 26.389 318.898 cv
25.7874 318.632 li
25.7874 316.811 li
26.5013 316.811 li
26.9212 317.652 li
32.8743 317.652 li
35.2698 317.652 36.0823 319.067 36.0823 320.831 cv
36.0823 322.414 35.6487 323.324 35.4241 323.647 cv
cp
f
33.1409 311.885 mo
33.1409 315.261 li
32.4544 315.261 li
32.0901 314.673 li
26.9915 314.673 li
26.5013 315.667 li
25.7874 315.667 li
25.7874 313.538 li
27.0472 313.538 li
26.3616 313.132 25.6468 312.249 25.6468 310.877 cv
25.6468 308.831 26.4036 308.341 28.3645 308.341 cv
32.0901 308.341 li
32.4544 307.291 li
33.1409 307.291 li
33.1409 310.401 li
32.4544 310.401 li
32.0901 309.728 li
28.7561 309.728 li
27.1038 309.728 26.7532 309.981 26.7532 311.143 cv
26.7532 312.054 27.3421 312.894 28.1546 313.286 cv
32.0901 313.286 li
32.4544 311.885 li
33.1409 311.885 li
cp
f
30.9134 300.908 mo
29.8772 300.908 li
29.7933 301.454 29.7513 302.141 29.7513 302.701 cv
29.7513 303.892 30.1009 304.48 30.9554 304.48 cv
31.6282 304.48 32.1604 304.172 32.1604 303.457 cv
32.1604 302.673 31.4602 301.496 30.9134 300.908 cv
cp
32.0628 300.81 mo
32.595 301.342 33.3372 302.337 33.3372 303.625 cv
33.3372 305.265 32.2161 305.908 30.928 305.908 cv
29.0931 305.908 28.6722 304.13 28.6722 302.785 cv
28.6722 302.085 28.7288 301.412 28.7981 300.908 cv
28.0706 300.908 li
27.1038 300.908 26.5852 301.454 26.5852 302.645 cv
26.5852 303.541 26.8372 304.102 26.9778 304.354 cv
27.7903 304.578 li
27.7903 305.517 li
26.2493 305.517 li
25.8987 304.886 25.5345 303.948 25.5345 302.519 cv
25.5345 300.46 26.305 299.535 28.0423 299.535 cv
32.0901 299.535 li
32.4827 298.639 li
33.1409 298.639 li
33.1409 300.81 li
32.0628 300.81 li
cp
f
32.4544 297.271 mo
32.0901 296.613 li
23.1253 296.613 li
22.6497 297.566 li
21.9349 297.566 li
21.9349 295.24 li
32.0901 295.24 li
32.0901 295.226 li
32.4544 294.161 li
33.1409 294.161 li
33.1409 297.271 li
32.4544 297.271 li
cp
f
30.9974 286.853 mo
32.5247 286.853 33.3509 287.749 33.3509 289.823 cv
33.3509 291.475 32.679 292.4 32.4407 292.638 cv
30.7737 292.638 li
30.7737 291.741 li
31.8938 291.419 li
32.0208 291.265 32.3147 290.788 32.3147 289.808 cv
32.3147 288.772 31.9778 288.169 31.0813 288.169 cv
30.4935 288.169 30.1292 288.772 29.8909 290.284 cv
29.639 291.881 29.0091 292.665 27.678 292.665 cv
26.431 292.665 25.4788 291.895 25.4788 289.808 cv
25.4788 288.351 25.9407 287.609 26.2493 287.259 cv
27.7903 287.259 li
27.7903 288.141 li
26.8792 288.408 li
26.7395 288.52 26.4456 289.052 26.4456 289.85 cv
26.4456 290.887 27.0472 291.349 27.6077 291.349 cv
28.3079 291.349 28.6165 290.761 28.8265 289.262 cv
29.0364 287.707 29.5833 286.853 30.9974 286.853 cv
cp
f
31.138 283.733 mo
31.138 282.977 31.306 282.739 32.2161 282.739 cv
33.1272 282.739 33.3226 282.977 33.3226 283.733 cv
33.3226 284.503 33.1272 284.728 32.2161 284.728 cv
31.306 284.728 31.138 284.503 31.138 283.733 cv
cp
30.1155 284.335 mo
21.9349 284.77 li
21.9349 282.697 li
30.1155 283.13 li
30.1155 284.335 li
cp
f
30.3118 269.394 mo
32.721 269.394 33.3509 270.739 33.3509 272.84 cv
33.3509 275.249 32.511 276.062 32.3704 276.201 cv
29.8909 276.201 li
29.8909 275.109 li
31.7259 274.717 li
31.7825 274.633 32.1888 274.086 32.1888 272.825 cv
32.1888 271.341 31.6839 270.809 30.3958 270.809 cv
29.1487 270.809 28.8548 271.551 28.4485 273.316 cv
27.93 275.53 27.0472 276.188 25.3392 276.188 cv
23.5315 276.188 22.3411 275.207 22.3411 272.756 cv
22.3411 270.542 23.0833 269.898 23.2659 269.8 cv
25.4925 269.8 li
25.4925 270.851 li
23.8401 271.215 li
23.6722 271.341 23.4759 271.915 23.4759 272.825 cv
23.4759 274.283 24.2317 274.843 25.2405 274.843 cv
26.2493 274.843 26.6136 274.534 27.0335 272.77 cv
27.5384 270.655 28.1126 269.394 30.3118 269.394 cv
cp
f
28.7425 266.205 mo
28.7425 262.633 li
28.5042 262.605 28.2806 262.605 28.0843 262.605 cv
27.4114 262.605 26.5989 262.927 26.5989 264.286 cv
26.5989 265.589 27.1038 266.093 28.7425 266.205 cv
cp
33.3645 264.342 mo
33.3645 266.723 32.2308 267.661 29.4427 267.661 cv
26.7815 267.661 25.5071 266.654 25.5071 264.201 cv
25.5071 261.54 27.1175 261.33 28.6028 261.317 cv
29.1204 261.317 29.7366 261.372 29.8636 261.401 cv
29.8636 266.219 li
31.5999 266.149 32.2444 265.7 32.2444 264.174 cv
32.2444 262.969 31.8665 262.339 31.5716 261.989 cv
32.6224 261.498 li
32.9729 262.045 33.3645 262.955 33.3645 264.342 cv
cp
f
30.9134 254.597 mo
29.8772 254.597 li
29.7933 255.143 29.7513 255.829 29.7513 256.39 cv
29.7513 257.58 30.1009 258.168 30.9554 258.168 cv
31.6282 258.168 32.1604 257.861 32.1604 257.146 cv
32.1604 256.362 31.4602 255.185 30.9134 254.597 cv
cp
32.0628 254.498 mo
32.595 255.031 33.3372 256.026 33.3372 257.314 cv
33.3372 258.953 32.2161 259.597 30.928 259.597 cv
29.0931 259.597 28.6722 257.819 28.6722 256.474 cv
28.6722 255.773 28.7288 255.101 28.7981 254.597 cv
28.0706 254.597 li
27.1038 254.597 26.5852 255.143 26.5852 256.333 cv
26.5852 257.23 26.8372 257.79 26.9778 258.042 cv
27.7903 258.267 li
27.7903 259.205 li
26.2493 259.205 li
25.8987 258.574 25.5345 257.636 25.5345 256.207 cv
25.5345 254.149 26.305 253.224 28.0423 253.224 cv
32.0901 253.224 li
32.4827 252.327 li
33.1409 252.327 li
33.1409 254.498 li
32.0628 254.498 li
cp
f
35.4241 246.409 mo
34.4573 246.017 li
34.7376 245.541 34.9895 244.84 34.9895 243.832 cv
34.9895 242.277 34.4153 241.801 32.9446 241.801 cv
32.4681 241.801 li
32.931 242.263 33.3226 242.963 33.3226 244.042 cv
33.3226 245.863 32.4964 246.507 30.3958 246.507 cv
26.8655 246.507 li
26.5296 247.46 li
25.7874 247.46 li
25.7874 245.107 li
30.0169 245.107 li
31.6282 245.107 32.1468 244.771 32.1468 243.762 cv
32.1468 242.795 31.6839 242.165 31.18 241.801 cv
26.8938 241.801 li
26.5296 242.921 li
25.7874 242.921 li
25.7874 240.414 li
33.0149 240.414 li
35.3118 240.414 36.0823 241.828 36.0823 243.594 cv
36.0823 245.177 35.6487 246.087 35.4241 246.409 cv
cp
f
29.3313 232.995 mo
27.5657 232.995 26.5296 233.345 26.5296 235.026 cv
26.5296 236.833 27.6644 237.057 29.471 237.057 cv
31.264 237.057 32.2727 236.721 32.2727 235.026 cv
32.2727 233.219 31.1663 232.995 29.3313 232.995 cv
cp
29.471 238.486 mo
26.9358 238.486 25.4231 237.701 25.4231 235.026 cv
25.4231 232.407 26.8372 231.567 29.3313 231.567 cv
31.8938 231.567 33.3792 232.351 33.3792 235.026 cv
33.3792 237.646 31.9925 238.486 29.471 238.486 cv
cp
f
31.9505 224.189 mo
32.7767 224.736 33.3226 225.758 33.3226 227.033 cv
33.3226 228.84 32.4964 229.302 30.3958 229.302 cv
26.8655 229.302 li
26.5296 230.254 li
25.7874 230.254 li
25.7874 227.902 li
29.8489 227.902 li
31.5999 227.902 32.1888 227.677 32.1888 226.697 cv
32.1888 225.604 31.5579 224.791 31.0677 224.413 cv
26.9075 224.413 li
26.5296 225.575 li
25.7874 225.575 li
25.7874 223.027 li
31.9925 223.027 li
32.4827 221.99 li
33.1409 221.99 li
33.1409 224.189 li
31.9505 224.189 li
cp
f
33.1546 217.246 mo
33.1546 220.622 li
32.4681 220.622 li
32.1048 220.034 li
26.9915 220.034 li
26.5013 221.029 li
25.7874 221.029 li
25.7874 218.9 li
27.0892 218.9 li
26.347 218.451 25.6468 217.498 25.6468 216.462 cv
25.6468 215.789 25.7727 215.243 25.927 215.131 cv
27.9583 215.201 li
27.9583 216.042 li
26.8099 216.449 li
26.8938 217.624 27.5237 218.283 28.2659 218.648 cv
32.0901 218.648 li
32.4681 217.246 li
33.1546 217.246 li
cp
f
32.4544 210.318 mo
32.0901 209.562 li
26.7532 209.562 li
26.7532 210.388 li
25.8011 210.388 li
25.8011 209.562 li
24.1204 209.562 li
22.3411 209.562 21.7669 208.581 21.7669 207.237 cv
21.7669 206.634 21.9905 206.018 22.2015 205.751 cv
22.971 206.088 li
22.7757 206.382 22.677 206.76 22.677 207.124 cv
22.677 207.965 23.2659 208.175 24.2884 208.175 cv
25.8011 208.175 li
25.8011 206.34 li
26.7532 206.34 li
26.7532 208.175 li
32.0901 208.175 li
32.4544 206.802 li
33.1409 206.802 li
33.1409 210.318 li
32.4544 210.318 li
cp
f
31.9505 199.423 mo
32.7767 199.97 33.3226 200.992 33.3226 202.267 cv
33.3226 204.074 32.4964 204.536 30.3958 204.536 cv
26.8655 204.536 li
26.5296 205.489 li
25.7874 205.489 li
25.7874 203.136 li
29.8489 203.136 li
31.5999 203.136 32.1888 202.911 32.1888 201.931 cv
32.1888 200.838 31.5579 200.026 31.0677 199.648 cv
26.9075 199.648 li
26.5296 200.81 li
25.7874 200.81 li
25.7874 198.261 li
31.9925 198.261 li
32.4827 197.224 li
33.1409 197.224 li
33.1409 199.423 li
31.9505 199.423 li
cp
f
30.5491 195.632 mo
26.7815 195.632 li
26.7815 196.529 li
25.7874 196.529 li
25.7874 195.632 li
24.428 195.17 li
24.428 194.288 li
25.7874 194.288 li
25.7874 192.158 li
26.7815 192.158 li
26.7815 194.288 li
30.3958 194.288 li
31.6145 194.288 32.3147 194.19 32.3147 193.055 cv
32.3147 192.579 32.1741 192.257 32.0481 192.019 cv
32.8606 191.752 li
33.0569 191.991 33.3226 192.607 33.3226 193.518 cv
33.3226 195.073 32.595 195.632 30.5491 195.632 cv
cp
f
31.9505 184.864 mo
32.7767 185.41 33.3226 186.433 33.3226 187.707 cv
33.3226 189.515 32.4964 189.977 30.3958 189.977 cv
26.8655 189.977 li
26.5296 190.929 li
25.7874 190.929 li
25.7874 188.576 li
29.8489 188.576 li
31.5999 188.576 32.1888 188.352 32.1888 187.371 cv
32.1888 186.279 31.5579 185.466 31.0677 185.088 cv
26.9075 185.088 li
26.5296 186.251 li
25.7874 186.251 li
25.7874 183.701 li
31.9925 183.701 li
32.4827 182.665 li
33.1409 182.665 li
33.1409 184.864 li
31.9505 184.864 li
cp
f
33.1546 177.921 mo
33.1546 181.297 li
32.4681 181.297 li
32.1048 180.709 li
26.9915 180.709 li
26.5013 181.703 li
25.7874 181.703 li
25.7874 179.574 li
27.0892 179.574 li
26.347 179.126 25.6468 178.173 25.6468 177.137 cv
25.6468 176.464 25.7727 175.918 25.927 175.806 cv
27.9583 175.876 li
27.9583 176.717 li
26.8099 177.123 li
26.8938 178.299 27.5237 178.958 28.2659 179.323 cv
32.0901 179.323 li
32.4681 177.921 li
33.1546 177.921 li
cp
f
28.7425 173.372 mo
28.7425 169.8 li
28.5042 169.772 28.2806 169.772 28.0843 169.772 cv
27.4114 169.772 26.5989 170.094 26.5989 171.453 cv
26.5989 172.755 27.1038 173.26 28.7425 173.372 cv
cp
33.3645 171.509 mo
33.3645 173.89 32.2308 174.828 29.4427 174.828 cv
26.7815 174.828 25.5071 173.821 25.5071 171.368 cv
25.5071 168.707 27.1175 168.497 28.6028 168.484 cv
29.1204 168.484 29.7366 168.539 29.8636 168.568 cv
29.8636 173.386 li
31.5999 173.316 32.2444 172.867 32.2444 171.341 cv
32.2444 170.136 31.8665 169.506 31.5716 169.156 cv
32.6224 168.665 li
32.9729 169.212 33.3645 170.122 33.3645 171.509 cv
cp
f
31.138 165.21 mo
31.138 164.454 31.306 164.216 32.2161 164.216 cv
33.1272 164.216 33.3226 164.454 33.3226 165.21 cv
33.3226 165.981 33.1272 166.205 32.2161 166.205 cv
31.306 166.205 31.138 165.981 31.138 165.21 cv
cp
30.1155 165.813 mo
21.9349 166.247 li
21.9349 164.174 li
30.1155 164.608 li
30.1155 165.813 li
cp
f
340.639 544.144 mo
340.639 541.009 li
336.229 542.448 li
335.764 542.614 li
336.214 542.749 li
340.639 544.144 li
cp
345.274 544.009 mo
345.274 547.743 li
344.569 547.743 li
344.059 546.724 li
333.874 543.274 li
333.874 541.714 li
344.044 538.324 li
344.569 537.289 li
345.274 537.289 li
345.274 541.054 li
344.569 541.054 li
344.059 539.884 li
341.809 540.619 li
341.809 544.504 li
344.044 545.208 li
344.569 544.009 li
345.274 544.009 li
cp
f
344.538 536.405 mo
344.149 535.594 li
338.434 535.594 li
338.434 536.479 li
337.414 536.479 li
337.414 535.594 li
335.615 535.594 li
333.709 535.594 333.094 534.544 333.094 533.105 cv
333.094 532.459 333.334 531.799 333.559 531.514 cv
334.384 531.874 li
334.174 532.19 334.07 532.594 334.07 532.985 cv
334.07 533.884 334.699 534.11 335.794 534.11 cv
337.414 534.11 li
337.414 532.145 li
338.434 532.145 li
338.434 534.11 li
344.149 534.11 li
344.538 532.639 li
345.274 532.639 li
345.274 536.405 li
344.538 536.405 li
cp
f
344.538 530.929 mo
344.149 530.118 li
338.434 530.118 li
338.434 531.003 li
337.414 531.003 li
337.414 530.118 li
335.615 530.118 li
333.709 530.118 333.094 529.069 333.094 527.629 cv
333.094 526.984 333.334 526.323 333.559 526.038 cv
334.384 526.399 li
334.174 526.714 334.07 527.118 334.07 527.509 cv
334.07 528.408 334.699 528.634 335.794 528.634 cv
337.414 528.634 li
337.414 526.669 li
338.434 526.669 li
338.434 528.634 li
344.149 528.634 li
344.538 527.163 li
345.274 527.163 li
345.274 530.929 li
344.538 530.929 li
cp
f
333.53 523.849 mo
333.53 522.964 333.679 522.859 334.579 522.859 cv
335.464 522.859 335.659 522.964 335.659 523.849 cv
335.659 524.749 335.464 524.839 334.579 524.839 cv
333.679 524.839 333.53 524.749 333.53 523.849 cv
cp
344.538 525.154 mo
344.163 524.464 li
338.614 524.464 li
338.164 525.364 li
337.399 525.364 li
337.399 522.979 li
344.149 522.979 li
344.149 522.964 li
344.538 521.824 li
345.274 521.824 li
345.274 525.154 li
344.538 525.154 li
cp
f
345.288 516.604 mo
345.288 520.219 li
344.554 520.219 li
344.163 519.589 li
338.689 519.589 li
338.164 520.654 li
337.399 520.654 li
337.399 518.374 li
338.794 518.374 li
337.999 517.894 337.249 516.874 337.249 515.764 cv
337.249 515.044 337.384 514.459 337.549 514.339 cv
339.724 514.414 li
339.724 515.314 li
338.494 515.749 li
338.584 517.009 339.259 517.714 340.054 518.104 cv
344.149 518.104 li
344.554 516.604 li
345.288 516.604 li
cp
f
345.274 509.51 mo
345.274 513.124 li
344.538 513.124 li
344.149 512.494 li
338.689 512.494 li
338.164 513.56 li
337.399 513.56 li
337.399 511.28 li
338.734 511.28 li
337.834 510.59 337.204 509.69 337.204 508.16 cv
337.204 507.23 337.804 506.45 338.614 506.105 cv
337.729 505.4 337.219 504.425 337.219 503.241 cv
337.219 501.245 338.164 500.75 340.158 500.75 cv
344.149 500.75 li
344.538 499.566 li
345.274 499.566 li
345.274 502.895 li
344.538 502.895 li
344.179 502.25 li
340.684 502.25 li
339.109 502.25 338.464 502.535 338.464 503.6 cv
338.464 504.741 339.214 505.55 340.099 505.91 cv
344.149 505.91 li
344.538 504.38 li
345.274 504.38 li
345.274 507.995 li
344.538 507.995 li
344.179 507.41 li
340.699 507.41 li
339.094 507.41 338.464 507.68 338.464 508.76 cv
338.464 509.869 339.244 510.65 340.009 511.01 cv
344.149 511.01 li
344.538 509.51 li
345.274 509.51 li
cp
f
342.889 492.74 mo
341.779 492.74 li
341.689 493.324 341.644 494.06 341.644 494.659 cv
341.644 495.935 342.019 496.565 342.934 496.565 cv
343.654 496.565 344.224 496.235 344.224 495.469 cv
344.224 494.629 343.474 493.369 342.889 492.74 cv
cp
344.118 492.635 mo
344.689 493.204 345.484 494.27 345.484 495.65 cv
345.484 497.405 344.283 498.094 342.904 498.094 cv
340.939 498.094 340.489 496.19 340.489 494.749 cv
340.489 493.999 340.549 493.28 340.624 492.74 cv
339.844 492.74 li
338.809 492.74 338.254 493.324 338.254 494.6 cv
338.254 495.56 338.524 496.159 338.674 496.429 cv
339.544 496.669 li
339.544 497.674 li
337.894 497.674 li
337.519 496.999 337.129 495.994 337.129 494.464 cv
337.129 492.26 337.954 491.27 339.814 491.27 cv
344.149 491.27 li
344.569 490.31 li
345.274 490.31 li
345.274 492.635 li
344.118 492.635 li
cp
f
342.499 488.584 mo
338.464 488.584 li
338.464 489.544 li
337.399 489.544 li
337.399 488.584 li
335.944 488.089 li
335.944 487.145 li
337.399 487.145 li
337.399 484.865 li
338.464 484.865 li
338.464 487.145 li
342.334 487.145 li
343.639 487.145 344.389 487.039 344.389 485.824 cv
344.389 485.315 344.239 484.97 344.104 484.715 cv
344.974 484.43 li
345.184 484.685 345.469 485.345 345.469 486.32 cv
345.469 487.985 344.689 488.584 342.499 488.584 cv
cp
f
333.53 481.64 mo
333.53 480.755 333.679 480.65 334.579 480.65 cv
335.464 480.65 335.659 480.755 335.659 481.64 cv
335.659 482.54 335.464 482.63 334.579 482.63 cv
333.679 482.63 333.53 482.54 333.53 481.64 cv
cp
344.538 482.945 mo
344.163 482.255 li
338.614 482.255 li
338.164 483.155 li
337.399 483.155 li
337.399 480.77 li
344.149 480.77 li
344.149 480.755 li
344.538 479.616 li
345.274 479.616 li
345.274 482.945 li
344.538 482.945 li
cp
f
338.524 477.86 mo
338.134 478.82 li
337.399 478.82 li
337.399 475.58 li
338.134 475.58 li
338.524 476.345 li
343.399 474.605 li
344.089 474.395 li
343.399 474.2 li
338.524 472.43 li
338.134 473.241 li
337.399 473.241 li
337.399 470 li
338.134 470 li
338.524 471.005 li
345.274 473.781 li
345.274 475.281 li
338.524 477.86 li
cp
f
340.564 467.39 mo
340.564 463.565 li
340.309 463.535 340.069 463.535 339.859 463.535 cv
339.139 463.535 338.269 463.88 338.269 465.335 cv
338.269 466.73 338.809 467.27 340.564 467.39 cv
cp
345.514 465.395 mo
345.514 467.945 344.299 468.949 341.314 468.949 cv
338.464 468.949 337.099 467.87 337.099 465.245 cv
337.099 462.395 338.824 462.17 340.414 462.156 cv
340.969 462.156 341.629 462.215 341.764 462.245 cv
341.764 467.405 li
343.623 467.33 344.314 466.85 344.314 465.215 cv
344.314 463.925 343.908 463.25 343.594 462.875 cv
344.719 462.35 li
345.094 462.935 345.514 463.91 345.514 465.395 cv
cp
f
345.274 125.25 mo
345.274 128.909 li
344.658 128.909 li
344.134 127.784 li
335.149 127.784 li
334.639 128.909 li
334.024 128.909 li
334.024 126.284 li
341.719 121.545 li
342.649 121.005 li
341.389 121.125 li
335.149 121.125 li
334.639 122.25 li
334.024 122.25 li
334.024 118.605 li
334.639 118.605 li
335.149 119.73 li
345.274 119.73 li
345.274 121.125 li
337.804 125.88 li
336.574 126.449 li
338.134 126.374 li
344.134 126.374 li
344.658 125.25 li
345.274 125.25 li
cp
f
340.564 115.47 mo
340.564 111.645 li
340.309 111.616 340.069 111.616 339.859 111.616 cv
339.139 111.616 338.269 111.96 338.269 113.415 cv
338.269 114.81 338.809 115.35 340.564 115.47 cv
cp
345.514 113.475 mo
345.514 116.025 344.299 117.03 341.314 117.03 cv
338.464 117.03 337.099 115.95 337.099 113.325 cv
337.099 110.475 338.824 110.25 340.414 110.236 cv
340.969 110.236 341.629 110.295 341.764 110.325 cv
341.764 115.485 li
343.623 115.41 344.314 114.93 344.314 113.295 cv
344.314 112.005 343.908 111.33 343.594 110.955 cv
344.719 110.43 li
345.094 111.015 345.514 111.991 345.514 113.475 cv
cp
f
343.413 102.96 mo
339.139 102.96 li
338.749 103.38 338.329 104.085 338.329 105.061 cv
338.329 106.5 339.529 106.906 341.359 106.906 cv
343.174 106.906 344.118 106.396 344.118 105.075 cv
344.118 104.026 343.819 103.396 343.413 102.96 cv
cp
347.719 107.896 mo
346.684 107.475 li
346.984 106.965 347.253 106.215 347.253 105.135 cv
347.253 103.47 346.594 102.96 344.913 102.96 cv
344.583 102.96 li
345.049 103.516 345.349 104.311 345.349 105.526 cv
345.349 107.446 344.163 108.435 341.359 108.435 cv
338.584 108.435 337.159 107.415 337.159 105.255 cv
337.159 104.085 337.564 103.321 338.044 102.811 cv
337.399 102.526 li
337.399 100.575 li
338.164 100.575 li
338.614 101.476 li
344.989 101.476 li
347.554 101.476 348.423 102.991 348.423 104.88 cv
348.423 106.575 347.958 107.55 347.719 107.896 cv
cp
f
342.889 93.6907 mo
341.779 93.6907 li
341.689 94.2757 341.644 95.011 341.644 95.6106 cv
341.644 96.886 342.019 97.5159 342.934 97.5159 cv
343.654 97.5159 344.224 97.1858 344.224 96.4202 cv
344.224 95.5804 343.474 94.3206 342.889 93.6907 cv
cp
344.118 93.5862 mo
344.689 94.1555 345.484 95.221 345.484 96.6009 cv
345.484 98.3557 344.283 99.0452 342.904 99.0452 cv
340.939 99.0452 340.489 97.1409 340.489 95.7005 cv
340.489 94.9505 340.549 94.2307 340.624 93.6907 cv
339.844 93.6907 li
338.809 93.6907 338.254 94.2757 338.254 95.5511 cv
338.254 96.511 338.524 97.1106 338.674 97.3802 cv
339.544 97.6204 li
339.544 98.6253 li
337.894 98.6253 li
337.519 97.9505 337.129 96.9456 337.129 95.4153 cv
337.129 93.2112 337.954 92.221 339.814 92.221 cv
344.149 92.221 li
344.569 91.261 li
345.274 91.261 li
345.274 93.5862 li
344.118 93.5862 li
cp
f
342.499 89.5354 mo
338.464 89.5354 li
338.464 90.4954 li
337.399 90.4954 li
337.399 89.5354 li
335.944 89.0403 li
335.944 88.096 li
337.399 88.096 li
337.399 85.8157 li
338.464 85.8157 li
338.464 88.096 li
342.334 88.096 li
343.639 88.096 344.389 87.9905 344.389 86.7757 cv
344.389 86.2659 344.239 85.9212 344.104 85.6663 cv
344.974 85.3811 li
345.184 85.636 345.469 86.2962 345.469 87.2708 cv
345.469 88.9358 344.689 89.5354 342.499 89.5354 cv
cp
f
333.53 82.5901 mo
333.53 81.7054 333.679 81.5999 334.579 81.5999 cv
335.464 81.5999 335.659 81.7054 335.659 82.5901 cv
335.659 83.4905 335.464 83.5804 334.579 83.5804 cv
333.679 83.5804 333.53 83.4905 333.53 82.5901 cv
cp
344.538 83.8948 mo
344.163 83.2054 li
338.614 83.2054 li
338.164 84.1048 li
337.399 84.1048 li
337.399 81.72 li
344.149 81.72 li
344.149 81.7054 li
344.538 80.5657 li
345.274 80.5657 li
345.274 83.8948 li
344.538 83.8948 li
cp
f
338.524 78.8098 mo
338.134 79.7698 li
337.399 79.7698 li
337.399 76.5305 li
338.134 76.5305 li
338.524 77.2952 li
343.399 75.555 li
344.089 75.345 li
343.399 75.1507 li
338.524 73.3802 li
338.134 74.1907 li
337.399 74.1907 li
337.399 70.9505 li
338.134 70.9505 li
338.524 71.9554 li
345.274 74.7307 li
345.274 76.2307 li
338.524 78.8098 li
cp
f
340.564 68.3411 mo
340.564 64.5159 li
340.309 64.4866 340.069 64.4866 339.859 64.4866 cv
339.139 64.4866 338.269 64.8313 338.269 66.2864 cv
338.269 67.6809 338.809 68.221 340.564 68.3411 cv
cp
345.514 66.346 mo
345.514 68.8958 344.299 69.9007 341.314 69.9007 cv
338.464 69.9007 337.099 68.8216 337.099 66.1966 cv
337.099 63.346 338.824 63.1214 340.414 63.1067 cv
340.969 63.1067 341.629 63.1663 341.764 63.1966 cv
341.764 68.3557 li
343.623 68.2815 344.314 67.8011 344.314 66.1663 cv
344.314 64.8763 343.908 64.2014 343.594 63.8264 cv
344.719 63.3011 li
345.094 63.886 345.514 64.8616 345.514 66.346 cv
cp
f
273.062 171.441 mo
276.703 171.441 li
276.703 170.066 li
276.703 168.9 276.131 168.591 274.668 168.591 cv
273.546 168.591 273.04 169.02 273.04 170.087 cv
273.04 170.549 273.051 171.056 273.062 171.441 cv
cp
280.554 170.363 mo
280.554 173.289 li
280.07 173.289 li
279.729 172.552 li
273.15 172.552 li
272.875 173.311 li
272.303 173.311 li
272.281 172.519 272.226 170.879 272.226 170.231 cv
272.226 168.503 272.577 167.513 274.668 167.513 cv
276.593 167.513 277.595 168.283 277.595 169.857 cv
277.595 171.441 li
279.707 171.441 li
280.07 170.396 li
280.554 170.363 li
cp
f
280.565 163.609 mo
280.565 166.26 li
280.026 166.26 li
279.74 165.798 li
275.724 165.798 li
275.339 166.579 li
274.779 166.579 li
274.779 164.907 li
275.801 164.907 li
275.218 164.555 274.668 163.807 274.668 162.992 cv
274.668 162.464 274.767 162.035 274.888 161.948 cv
276.484 162.002 li
276.484 162.662 li
275.581 162.982 li
275.648 163.906 276.142 164.423 276.726 164.709 cv
279.729 164.709 li
280.026 163.609 li
280.565 163.609 li
cp
f
277.1 160.033 mo
277.1 157.229 li
276.912 157.206 276.737 157.206 276.582 157.206 cv
276.054 157.206 275.416 157.459 275.416 158.527 cv
275.416 159.55 275.813 159.946 277.1 160.033 cv
cp
280.73 158.571 mo
280.73 160.441 279.839 161.178 277.65 161.178 cv
275.559 161.178 274.558 160.386 274.558 158.46 cv
274.558 156.37 275.824 156.205 276.99 156.195 cv
277.397 156.195 277.88 156.239 277.98 156.26 cv
277.98 160.045 li
279.344 159.99 279.85 159.638 279.85 158.439 cv
279.85 157.492 279.553 156.997 279.322 156.722 cv
280.147 156.337 li
280.422 156.767 280.73 157.482 280.73 158.571 cv
cp
f
277.495 150.398 mo
276.054 150.398 275.483 150.739 275.483 151.63 cv
275.483 152.433 275.945 152.983 276.428 153.357 cv
279.399 153.357 li
279.608 153.071 279.839 152.576 279.839 151.729 cv
279.839 150.617 278.838 150.398 277.495 150.398 cv
cp
282.754 154.875 mo
282.215 154.875 li
281.929 154.413 li
275.736 154.413 li
275.284 155.161 li
274.779 155.161 li
274.779 153.511 li
275.515 153.423 li
275.02 152.983 274.591 152.367 274.591 151.399 cv
274.591 149.892 275.362 149.265 277.495 149.265 cv
279.531 149.265 280.697 149.947 280.697 151.564 cv
280.697 152.466 280.532 152.994 280.301 153.357 cv
281.885 153.357 li
282.215 152.356 li
282.754 152.356 li
282.754 154.875 li
cp
f
278.805 143.985 mo
277.991 143.985 li
277.925 144.414 277.892 144.953 277.892 145.393 cv
277.892 146.328 278.166 146.79 278.838 146.79 cv
279.366 146.79 279.783 146.548 279.783 145.988 cv
279.783 145.371 279.234 144.448 278.805 143.985 cv
cp
279.707 143.908 mo
280.125 144.326 280.708 145.108 280.708 146.119 cv
280.708 147.407 279.827 147.912 278.816 147.912 cv
277.374 147.912 277.044 146.516 277.044 145.459 cv
277.044 144.909 277.088 144.381 277.144 143.985 cv
276.572 143.985 li
275.813 143.985 275.406 144.414 275.406 145.349 cv
275.406 146.053 275.603 146.493 275.713 146.692 cv
276.352 146.867 li
276.352 147.605 li
275.141 147.605 li
274.866 147.11 274.58 146.372 274.58 145.25 cv
274.58 143.633 275.185 142.907 276.549 142.907 cv
279.729 142.907 li
280.037 142.202 li
280.554 142.202 li
280.554 143.908 li
279.707 143.908 li
cp
f
280.565 138.463 mo
280.565 141.115 li
280.026 141.115 li
279.74 140.653 li
275.724 140.653 li
275.339 141.434 li
274.779 141.434 li
274.779 139.761 li
275.801 139.761 li
275.218 139.409 274.668 138.661 274.668 137.847 cv
274.668 137.319 274.767 136.89 274.888 136.802 cv
276.484 136.857 li
276.484 137.517 li
275.581 137.836 li
275.648 138.76 276.142 139.278 276.726 139.564 cv
279.729 139.564 li
280.026 138.463 li
280.565 138.463 li
cp
f
277.1 134.888 mo
277.1 132.083 li
276.912 132.061 276.737 132.061 276.582 132.061 cv
276.054 132.061 275.416 132.314 275.416 133.381 cv
275.416 134.405 275.813 134.8 277.1 134.888 cv
cp
280.73 133.425 mo
280.73 135.295 279.839 136.033 277.65 136.033 cv
275.559 136.033 274.558 135.241 274.558 133.315 cv
274.558 131.225 275.824 131.06 276.99 131.049 cv
277.397 131.049 277.88 131.093 277.98 131.115 cv
277.98 134.9 li
279.344 134.844 279.85 134.492 279.85 133.293 cv
279.85 132.347 279.553 131.852 279.322 131.576 cv
280.147 131.192 li
280.422 131.621 280.73 132.336 280.73 133.425 cv
cp
f
282.347 126.121 mo
281.588 125.814 li
281.808 125.44 282.006 124.89 282.006 124.097 cv
282.006 122.876 281.555 122.502 280.4 122.502 cv
280.026 122.502 li
280.389 122.866 280.697 123.415 280.697 124.262 cv
280.697 125.693 280.048 126.199 278.398 126.199 cv
275.625 126.199 li
275.362 126.947 li
274.779 126.947 li
274.779 125.099 li
278.101 125.099 li
279.366 125.099 279.773 124.834 279.773 124.042 cv
279.773 123.283 279.409 122.788 279.014 122.502 cv
275.648 122.502 li
275.362 123.382 li
274.779 123.382 li
274.779 121.413 li
280.455 121.413 li
282.259 121.413 282.865 122.524 282.865 123.91 cv
282.865 125.154 282.524 125.868 282.347 126.121 cv
cp
f
277.562 115.583 mo
276.175 115.583 275.362 115.859 275.362 117.178 cv
275.362 118.598 276.252 118.774 277.671 118.774 cv
279.079 118.774 279.872 118.51 279.872 117.178 cv
279.872 115.759 279.003 115.583 277.562 115.583 cv
cp
277.671 119.896 mo
275.68 119.896 274.492 119.28 274.492 117.178 cv
274.492 115.121 275.603 114.461 277.562 114.461 cv
279.574 114.461 280.741 115.077 280.741 117.178 cv
280.741 119.236 279.652 119.896 277.671 119.896 cv
cp
f
279.618 108.664 mo
280.268 109.093 280.697 109.897 280.697 110.898 cv
280.697 112.317 280.048 112.68 278.398 112.68 cv
275.625 112.68 li
275.362 113.428 li
274.779 113.428 li
274.779 111.579 li
277.969 111.579 li
279.344 111.579 279.806 111.404 279.806 110.633 cv
279.806 109.776 279.311 109.137 278.926 108.84 cv
275.658 108.84 li
275.362 109.753 li
274.779 109.753 li
274.779 107.751 li
279.652 107.751 li
280.037 106.937 li
280.554 106.937 li
280.554 108.664 li
279.618 108.664 li
cp
f
280.565 103.208 mo
280.565 105.86 li
280.026 105.86 li
279.74 105.398 li
275.724 105.398 li
275.339 106.179 li
274.779 106.179 li
274.779 104.506 li
275.801 104.506 li
275.218 104.155 274.668 103.407 274.668 102.592 cv
274.668 102.064 274.767 101.635 274.888 101.547 cv
276.484 101.602 li
276.484 102.262 li
275.581 102.581 li
275.648 103.505 276.142 104.023 276.726 104.309 cv
279.729 104.309 li
280.026 103.208 li
280.565 103.208 li
cp
f
278.87 96.1458 mo
280.07 96.1458 280.719 96.8499 280.719 98.4788 cv
280.719 99.7766 280.191 100.502 280.004 100.69 cv
278.695 100.69 li
278.695 99.9856 li
279.574 99.7327 li
279.674 99.6116 279.905 99.2376 279.905 98.4671 cv
279.905 97.6536 279.641 97.18 278.937 97.18 cv
278.475 97.18 278.189 97.6536 278.001 98.8411 cv
277.804 100.096 277.309 100.711 276.263 100.711 cv
275.284 100.711 274.536 100.107 274.536 98.4671 cv
274.536 97.3235 274.899 96.7405 275.141 96.4651 cv
276.352 96.4651 li
276.352 97.1585 li
275.636 97.3675 li
275.527 97.4554 275.295 97.8733 275.295 98.5003 cv
275.295 99.3147 275.768 99.678 276.208 99.678 cv
276.758 99.678 277 99.2151 277.165 98.0384 cv
277.33 96.8167 277.76 96.1458 278.87 96.1458 cv
cp
f
277.1 93.803 mo
277.1 90.9983 li
276.912 90.9759 276.737 90.9759 276.582 90.9759 cv
276.054 90.9759 275.416 91.2288 275.416 92.2962 cv
275.416 93.3196 275.813 93.7151 277.1 93.803 cv
cp
280.73 92.3401 mo
280.73 94.2102 279.839 94.9475 277.65 94.9475 cv
275.559 94.9475 274.558 94.1555 274.558 92.2298 cv
274.558 90.1399 275.824 89.9749 276.99 89.9641 cv
277.397 89.9641 277.88 90.0081 277.98 90.0296 cv
277.98 93.8147 li
279.344 93.7591 279.85 93.4075 279.85 92.2083 cv
279.85 91.262 279.553 90.7669 279.322 90.4915 cv
280.147 90.1067 li
280.422 90.5364 280.73 91.2513 280.73 92.3401 cv
cp
f
280.015 88.6116 mo
279.729 88.095 li
272.688 88.095 li
272.314 88.843 li
271.752 88.843 li
271.752 87.0169 li
279.729 87.0169 li
279.729 87.0052 li
280.015 86.1692 li
280.554 86.1692 li
280.554 88.6116 li
280.015 88.6116 li
cp
f
280.015 85.1253 mo
279.729 84.5305 li
275.537 84.5305 li
275.537 85.18 li
274.789 85.18 li
274.789 84.5305 li
273.469 84.5305 li
272.072 84.5305 271.62 83.761 271.62 82.7044 cv
271.62 82.2317 271.797 81.7473 271.962 81.5384 cv
272.567 81.802 li
272.412 82.0335 272.336 82.3304 272.336 82.6165 cv
272.336 83.2766 272.798 83.4417 273.601 83.4417 cv
274.789 83.4417 li
274.789 82.0003 li
275.537 82.0003 li
275.537 83.4417 li
279.729 83.4417 li
280.015 82.3636 li
280.554 82.3636 li
280.554 85.1253 li
280.015 85.1253 li
cp
f
280.015 78.0305 mo
279.729 77.4358 li
275.537 77.4358 li
275.537 78.0852 li
274.789 78.0852 li
274.789 77.4358 li
273.469 77.4358 li
272.072 77.4358 271.62 76.6663 271.62 75.6096 cv
271.62 75.137 271.797 74.6526 271.962 74.4436 cv
272.567 74.7073 li
272.412 74.9388 272.336 75.2356 272.336 75.5218 cv
272.336 76.1819 272.798 76.347 273.601 76.347 cv
274.789 76.347 li
274.789 74.9055 li
275.537 74.9055 li
275.537 76.347 li
279.729 76.347 li
280.015 75.2688 li
280.554 75.2688 li
280.554 78.0305 li
280.015 78.0305 li
cp
f
277.562 69.637 mo
276.175 69.637 275.362 69.9124 275.362 71.2317 cv
275.362 72.6516 276.252 72.8274 277.671 72.8274 cv
279.079 72.8274 279.872 72.5638 279.872 71.2317 cv
279.872 69.8128 279.003 69.637 277.562 69.637 cv
cp
277.671 73.9495 mo
275.68 73.9495 274.492 73.3333 274.492 71.2317 cv
274.492 69.1751 275.603 68.5149 277.562 68.5149 cv
279.574 68.5149 280.741 69.1311 280.741 71.2317 cv
280.741 73.2893 279.652 73.9495 277.671 73.9495 cv
cp
f
280.565 64.5003 mo
280.565 67.1516 li
280.026 67.1516 li
279.74 66.6897 li
275.724 66.6897 li
275.339 67.471 li
274.779 67.471 li
274.779 65.7981 li
275.801 65.7981 li
275.218 65.4466 274.668 64.6985 274.668 63.8841 cv
274.668 63.3557 274.767 62.927 274.888 62.8391 cv
276.484 62.8938 li
276.484 63.554 li
275.581 63.8733 li
275.648 64.7971 276.142 65.3147 276.726 65.6009 cv
279.729 65.6009 li
280.026 64.5003 li
280.565 64.5003 li
cp
f
292.005 155.93 mo
291.191 155.93 li
291.125 156.36 291.092 156.899 291.092 157.338 cv
291.092 158.274 291.366 158.736 292.038 158.736 cv
292.566 158.736 292.984 158.493 292.984 157.933 cv
292.984 157.317 292.434 156.393 292.005 155.93 cv
cp
292.908 155.854 mo
293.325 156.272 293.908 157.053 293.908 158.065 cv
293.908 159.352 293.028 159.858 292.016 159.858 cv
290.574 159.858 290.244 158.461 290.244 157.405 cv
290.244 156.855 290.288 156.326 290.344 155.93 cv
289.772 155.93 li
289.013 155.93 288.606 156.36 288.606 157.294 cv
288.606 157.998 288.803 158.439 288.913 158.637 cv
289.552 158.813 li
289.552 159.55 li
288.341 159.55 li
288.067 159.055 287.781 158.318 287.781 157.196 cv
287.781 155.578 288.385 154.852 289.749 154.852 cv
292.929 154.852 li
293.238 154.148 li
293.754 154.148 li
293.754 155.854 li
292.908 155.854 li
cp
f
292.071 145.392 mo
293.27 145.392 293.919 146.096 293.919 147.725 cv
293.919 149.023 293.391 149.748 293.204 149.936 cv
291.895 149.936 li
291.895 149.232 li
292.775 148.979 li
292.874 148.858 293.105 148.484 293.105 147.713 cv
293.105 146.9 292.841 146.426 292.137 146.426 cv
291.675 146.426 291.389 146.9 291.201 148.087 cv
291.004 149.342 290.509 149.957 289.463 149.957 cv
288.485 149.957 287.737 149.353 287.737 147.713 cv
287.737 146.57 288.099 145.987 288.341 145.711 cv
289.552 145.711 li
289.552 146.405 li
288.836 146.614 li
288.727 146.701 288.495 147.119 288.495 147.746 cv
288.495 148.561 288.968 148.924 289.408 148.924 cv
289.958 148.924 290.2 148.461 290.366 147.284 cv
290.531 146.063 290.96 145.392 292.071 145.392 cv
cp
f
290.696 139.716 mo
289.254 139.716 288.683 140.057 288.683 140.949 cv
288.683 141.751 289.145 142.301 289.628 142.675 cv
292.599 142.675 li
292.808 142.389 293.039 141.895 293.039 141.047 cv
293.039 139.936 292.038 139.716 290.696 139.716 cv
cp
295.954 144.194 mo
295.415 144.194 li
295.129 143.732 li
288.936 143.732 li
288.485 144.48 li
287.979 144.48 li
287.979 142.829 li
288.715 142.741 li
288.22 142.301 287.791 141.686 287.791 140.717 cv
287.791 139.21 288.562 138.583 290.696 138.583 cv
292.731 138.583 293.897 139.265 293.897 140.882 cv
293.897 141.784 293.732 142.313 293.501 142.675 cv
295.085 142.675 li
295.415 141.674 li
295.954 141.674 li
295.954 144.194 li
cp
f
285.14 136.153 mo
285.14 135.504 285.25 135.427 285.91 135.427 cv
286.559 135.427 286.702 135.504 286.702 136.153 cv
286.702 136.813 286.559 136.879 285.91 136.879 cv
285.25 136.879 285.14 136.813 285.14 136.153 cv
cp
293.215 137.11 mo
292.94 136.604 li
288.869 136.604 li
288.539 137.264 li
287.979 137.264 li
287.979 135.515 li
292.929 135.515 li
292.929 135.504 li
293.215 134.667 li
293.754 134.667 li
293.754 137.11 li
293.215 137.11 li
cp
f
293.765 130.84 mo
293.765 133.491 li
293.226 133.491 li
292.94 133.03 li
288.924 133.03 li
288.539 133.811 li
287.979 133.811 li
287.979 132.138 li
289.001 132.138 li
288.418 131.786 287.868 131.038 287.868 130.224 cv
287.868 129.696 287.967 129.267 288.088 129.179 cv
289.684 129.234 li
289.684 129.894 li
288.782 130.213 li
288.848 131.137 289.342 131.655 289.926 131.941 cv
292.929 131.941 li
293.226 130.84 li
293.765 130.84 li
cp
f
285.14 127.298 mo
285.14 126.65 285.25 126.573 285.91 126.573 cv
286.559 126.573 286.702 126.65 286.702 127.298 cv
286.702 127.958 286.559 128.025 285.91 128.025 cv
285.25 128.025 285.14 127.958 285.14 127.298 cv
cp
293.215 128.255 mo
292.94 127.749 li
288.869 127.749 li
288.539 128.409 li
287.979 128.409 li
287.979 126.66 li
292.929 126.66 li
292.929 126.65 li
293.215 125.813 li
293.754 125.813 li
293.754 128.255 li
293.215 128.255 li
cp
f
291.719 124.461 mo
288.759 124.461 li
288.759 125.165 li
287.979 125.165 li
287.979 124.461 li
286.911 124.098 li
286.911 123.405 li
287.979 123.405 li
287.979 121.733 li
288.759 121.733 li
288.759 123.405 li
291.598 123.405 li
292.555 123.405 293.105 123.327 293.105 122.437 cv
293.105 122.063 292.995 121.81 292.896 121.622 cv
293.534 121.413 li
293.688 121.601 293.897 122.084 293.897 122.8 cv
293.897 124.021 293.325 124.461 291.719 124.461 cv
cp
f
292.819 116.001 mo
293.468 116.43 293.897 117.234 293.897 118.235 cv
293.897 119.654 293.248 120.017 291.598 120.017 cv
288.825 120.017 li
288.562 120.765 li
287.979 120.765 li
287.979 118.916 li
291.169 118.916 li
292.544 118.916 293.006 118.741 293.006 117.971 cv
293.006 117.113 292.511 116.474 292.126 116.177 cv
288.859 116.177 li
288.562 117.09 li
287.979 117.09 li
287.979 115.088 li
292.852 115.088 li
293.238 114.274 li
293.754 114.274 li
293.754 116.001 li
292.819 116.001 li
cp
f
292.005 109.28 mo
291.191 109.28 li
291.125 109.709 291.092 110.248 291.092 110.688 cv
291.092 111.623 291.366 112.085 292.038 112.085 cv
292.566 112.085 292.984 111.843 292.984 111.283 cv
292.984 110.666 292.434 109.742 292.005 109.28 cv
cp
292.908 109.203 mo
293.325 109.621 293.908 110.403 293.908 111.414 cv
293.908 112.701 293.028 113.207 292.016 113.207 cv
290.574 113.207 290.244 111.811 290.244 110.754 cv
290.244 110.204 290.288 109.676 290.344 109.28 cv
289.772 109.28 li
289.013 109.28 288.606 109.709 288.606 110.644 cv
288.606 111.348 288.803 111.788 288.913 111.987 cv
289.552 112.162 li
289.552 112.9 li
288.341 112.9 li
288.067 112.405 287.781 111.667 287.781 110.545 cv
287.781 108.928 288.385 108.201 289.749 108.201 cv
292.929 108.201 li
293.238 107.497 li
293.754 107.497 li
293.754 109.203 li
292.908 109.203 li
cp
f
293.215 106.42 mo
292.929 105.904 li
285.888 105.904 li
285.514 106.652 li
284.953 106.652 li
284.953 104.825 li
292.929 104.825 li
292.929 104.814 li
293.215 103.978 li
293.754 103.978 li
293.754 106.42 li
293.215 106.42 li
cp
f
292.005 95.8274 mo
291.191 95.8274 li
291.125 96.2571 291.092 96.7962 291.092 97.2356 cv
291.092 98.1712 291.366 98.6331 292.038 98.6331 cv
292.566 98.6331 292.984 98.3909 292.984 97.8304 cv
292.984 97.2141 292.434 96.2903 292.005 95.8274 cv
cp
292.908 95.7513 mo
293.325 96.1692 293.908 96.9505 293.908 97.9622 cv
293.908 99.2493 293.028 99.7552 292.016 99.7552 cv
290.574 99.7552 290.244 98.3587 290.244 97.302 cv
290.244 96.7522 290.288 96.2239 290.344 95.8274 cv
289.772 95.8274 li
289.013 95.8274 288.606 96.2571 288.606 97.1917 cv
288.606 97.8958 288.803 98.3362 288.913 98.5345 cv
289.552 98.7102 li
289.552 99.4475 li
288.341 99.4475 li
288.067 98.9524 287.781 98.2151 287.781 97.093 cv
287.781 95.4759 288.385 94.7493 289.749 94.7493 cv
292.929 94.7493 li
293.238 94.0452 li
293.754 94.0452 li
293.754 95.7513 li
292.908 95.7513 li
cp
f
293.754 90.218 mo
293.754 92.8694 li
293.215 92.8694 li
292.929 92.4075 li
288.924 92.4075 li
288.539 93.1888 li
287.979 93.1888 li
287.979 91.5159 li
288.968 91.5159 li
288.429 91.1975 287.868 90.5042 287.868 89.4261 cv
287.868 87.8196 288.462 87.4348 290.002 87.4348 cv
292.929 87.4348 li
293.215 86.6096 li
293.754 86.6096 li
293.754 89.052 li
293.215 89.052 li
292.929 88.5237 li
290.311 88.5237 li
289.013 88.5237 288.738 88.722 288.738 89.635 cv
288.738 90.3499 289.199 91.01 289.837 91.3177 cv
292.929 91.3177 li
293.215 90.218 li
293.754 90.218 li
cp
f
292.005 81.3958 mo
289.068 81.3958 li
288.792 81.6819 288.573 82.1653 288.573 82.9466 cv
288.573 84.179 289.519 84.4095 290.861 84.4095 cv
292.148 84.4095 293.083 83.9593 293.083 83.1663 cv
293.083 82.2971 292.588 81.7805 292.005 81.3958 cv
cp
292.908 81.3401 mo
293.403 81.7141 293.93 82.3304 293.93 83.4085 cv
293.93 84.7288 292.863 85.554 290.861 85.554 cv
288.825 85.554 287.725 84.9485 287.725 83.178 cv
287.725 82.3089 287.956 81.7698 288.242 81.3958 cv
285.899 81.3958 li
285.514 82.1653 li
284.953 82.1653 li
284.953 80.3284 li
292.786 80.3284 li
293.238 79.6575 li
293.743 79.6575 li
293.743 81.2415 li
292.908 81.3401 li
cp
f
306.954 168.618 mo
306.954 171.27 li
306.415 171.27 li
306.129 170.808 li
299.099 170.808 li
298.714 171.699 li
298.153 171.699 li
298.153 169.774 li
301.927 169.774 li
301.464 169.345 301.035 168.706 301.035 167.651 cv
301.035 166.352 301.696 165.802 303.214 165.802 cv
306.129 165.802 li
306.129 165.791 li
306.415 164.955 li
306.954 164.955 li
306.954 167.398 li
306.415 167.398 li
306.14 166.903 li
303.665 166.903 li
302.323 166.903 301.959 167.144 301.959 167.958 cv
301.959 168.827 302.477 169.389 303.016 169.719 cv
306.129 169.719 li
306.415 168.618 li
306.954 168.618 li
cp
f
308.747 163.415 mo
307.989 163.108 li
308.208 162.734 308.407 162.184 308.407 161.391 cv
308.407 160.17 307.955 159.796 306.8 159.796 cv
306.426 159.796 li
306.789 160.159 307.097 160.709 307.097 161.556 cv
307.097 162.987 306.449 163.492 304.798 163.492 cv
302.026 163.492 li
301.762 164.241 li
301.179 164.241 li
301.179 162.393 li
304.501 162.393 li
305.766 162.393 306.173 162.128 306.173 161.336 cv
306.173 160.577 305.81 160.082 305.414 159.796 cv
302.048 159.796 li
301.762 160.676 li
301.179 160.676 li
301.179 158.707 li
306.856 158.707 li
308.659 158.707 309.265 159.818 309.265 161.204 cv
309.265 162.448 308.924 163.162 308.747 163.415 cv
cp
f
303.896 152.712 mo
302.454 152.712 301.883 153.053 301.883 153.945 cv
301.883 154.747 302.345 155.297 302.828 155.671 cv
305.799 155.671 li
306.008 155.385 306.24 154.891 306.24 154.043 cv
306.24 152.932 305.239 152.712 303.896 152.712 cv
cp
309.155 157.19 mo
308.616 157.19 li
308.329 156.728 li
302.136 156.728 li
301.685 157.476 li
301.179 157.476 li
301.179 155.825 li
301.915 155.738 li
301.42 155.297 300.991 154.682 300.991 153.713 cv
300.991 152.206 301.762 151.579 303.896 151.579 cv
305.931 151.579 307.097 152.261 307.097 153.878 cv
307.097 154.781 306.932 155.309 306.701 155.671 cv
308.285 155.671 li
308.616 154.67 li
309.155 154.67 li
309.155 157.19 li
cp
f
302.928 146.74 mo
304.028 146.74 li
304.028 149.996 li
302.928 149.996 li
302.928 146.74 li
cp
f
306.954 142.373 mo
306.954 145.025 li
306.415 145.025 li
306.129 144.563 li
302.124 144.563 li
301.74 145.344 li
301.179 145.344 li
301.179 143.671 li
302.168 143.671 li
301.629 143.352 301.069 142.659 301.069 141.581 cv
301.069 139.975 301.662 139.59 303.202 139.59 cv
306.129 139.59 li
306.415 138.765 li
306.954 138.765 li
306.954 141.207 li
306.415 141.207 li
306.129 140.679 li
303.511 140.679 li
302.213 140.679 301.938 140.877 301.938 141.79 cv
301.938 142.505 302.4 143.165 303.037 143.473 cv
306.129 143.473 li
306.415 142.373 li
306.954 142.373 li
cp
f
305.205 133.748 mo
304.391 133.748 li
304.325 134.178 304.292 134.717 304.292 135.157 cv
304.292 136.092 304.567 136.554 305.239 136.554 cv
305.766 136.554 306.184 136.312 306.184 135.751 cv
306.184 135.135 305.634 134.211 305.205 133.748 cv
cp
306.108 133.672 mo
306.526 134.09 307.109 134.871 307.109 135.883 cv
307.109 137.17 306.228 137.676 305.216 137.676 cv
303.775 137.676 303.445 136.28 303.445 135.223 cv
303.445 134.673 303.489 134.145 303.544 133.748 cv
302.972 133.748 li
302.213 133.748 301.806 134.178 301.806 135.113 cv
301.806 135.817 302.003 136.257 302.114 136.455 cv
302.752 136.631 li
302.752 137.368 li
301.541 137.368 li
301.267 136.873 300.981 136.136 300.981 135.014 cv
300.981 133.397 301.585 132.67 302.949 132.67 cv
306.129 132.67 li
306.438 131.966 li
306.954 131.966 li
306.954 133.672 li
306.108 133.672 li
cp
f
306.019 126.445 mo
306.668 126.873 307.097 127.677 307.097 128.678 cv
307.097 130.097 306.449 130.46 304.798 130.46 cv
302.026 130.46 li
301.762 131.208 li
301.179 131.208 li
301.179 129.36 li
304.369 129.36 li
305.744 129.36 306.206 129.184 306.206 128.414 cv
306.206 127.556 305.711 126.917 305.326 126.62 cv
302.059 126.62 li
301.762 127.533 li
301.179 127.533 li
301.179 125.532 li
306.052 125.532 li
306.438 124.717 li
306.954 124.717 li
306.954 126.445 li
306.019 126.445 li
cp
f
304.919 123.465 mo
301.959 123.465 li
301.959 124.169 li
301.179 124.169 li
301.179 123.465 li
300.112 123.102 li
300.112 122.408 li
301.179 122.408 li
301.179 120.737 li
301.959 120.737 li
301.959 122.408 li
304.798 122.408 li
305.755 122.408 306.305 122.331 306.305 121.441 cv
306.305 121.067 306.196 120.814 306.096 120.626 cv
306.735 120.417 li
306.888 120.605 307.097 121.088 307.097 121.804 cv
307.097 123.025 306.526 123.465 304.919 123.465 cv
cp
f
298.34 118.371 mo
298.34 117.723 298.45 117.646 299.111 117.646 cv
299.759 117.646 299.903 117.723 299.903 118.371 cv
299.903 119.032 299.759 119.098 299.111 119.098 cv
298.45 119.098 298.34 119.032 298.34 118.371 cv
cp
306.415 119.328 mo
306.14 118.823 li
302.07 118.823 li
301.74 119.483 li
301.179 119.483 li
301.179 117.734 li
306.129 117.734 li
306.129 117.723 li
306.415 116.886 li
306.954 116.886 li
306.954 119.328 li
306.415 119.328 li
cp
f
303.093 111.783 mo
302.07 111.991 li
301.905 112.179 301.817 112.465 301.817 112.861 cv
301.817 114.126 302.653 114.621 304.05 114.621 cv
305.448 114.621 306.261 114.214 306.261 112.916 cv
306.261 112.058 305.92 111.563 305.689 111.287 cv
306.492 110.903 li
306.767 111.331 307.142 111.926 307.142 112.916 cv
307.142 115.083 306.031 115.754 304.05 115.754 cv
302.07 115.754 300.958 114.786 300.958 112.861 cv
300.958 112.223 301.2 111.431 301.453 111.013 cv
303.093 111.013 li
303.093 111.783 li
cp
f
298.34 105.743 mo
298.34 105.094 298.45 105.017 299.111 105.017 cv
299.759 105.017 299.903 105.094 299.903 105.743 cv
299.903 106.404 299.759 106.469 299.111 106.469 cv
298.45 106.469 298.34 106.404 298.34 105.743 cv
cp
308.385 107.427 mo
308.385 106.799 307.901 106.195 306.735 106.195 cv
302.124 106.195 li
301.74 106.976 li
301.179 106.976 li
301.179 105.138 li
306.856 105.138 li
308.814 105.138 309.177 106.404 309.177 107.427 cv
308.385 107.427 li
cp
f
303.962 99.2532 mo
302.575 99.2532 301.762 99.5286 301.762 100.848 cv
301.762 102.268 302.653 102.444 304.072 102.444 cv
305.48 102.444 306.273 102.18 306.273 100.848 cv
306.273 99.429 305.404 99.2532 303.962 99.2532 cv
cp
304.072 103.566 mo
302.08 103.566 300.893 102.949 300.893 100.848 cv
300.893 98.7913 302.003 98.1311 303.962 98.1311 cv
305.975 98.1311 307.142 98.7473 307.142 100.848 cv
307.142 102.906 306.052 103.566 304.072 103.566 cv
cp
f
306.019 92.3343 mo
306.668 92.763 307.097 93.5667 307.097 94.5677 cv
307.097 95.9866 306.449 96.3499 304.798 96.3499 cv
302.026 96.3499 li
301.762 97.0979 li
301.179 97.0979 li
301.179 95.2493 li
304.369 95.2493 li
305.744 95.2493 306.206 95.0735 306.206 94.303 cv
306.206 93.4456 305.711 92.8069 305.326 92.51 cv
302.059 92.51 li
301.762 93.4231 li
301.179 93.4231 li
301.179 91.4212 li
306.052 91.4212 li
306.438 90.6067 li
306.954 90.6067 li
306.954 92.3343 li
306.019 92.3343 li
cp
f
306.965 86.8792 mo
306.965 89.5305 li
306.426 89.5305 li
306.14 89.0686 li
302.124 89.0686 li
301.74 89.8499 li
301.179 89.8499 li
301.179 88.177 li
302.201 88.177 li
301.618 87.8255 301.069 87.0774 301.069 86.263 cv
301.069 85.7346 301.167 85.3059 301.288 85.218 cv
302.884 85.2727 li
302.884 85.9329 li
301.982 86.2522 li
302.048 87.1761 302.542 87.6936 303.126 87.9798 cv
306.129 87.9798 li
306.426 86.8792 li
306.965 86.8792 li
cp
f
306.954 81.6653 mo
306.954 84.3167 li
306.415 84.3167 li
306.129 83.8548 li
302.124 83.8548 li
301.74 84.636 li
301.179 84.636 li
301.179 82.9632 li
302.168 82.9632 li
301.629 82.6448 301.069 81.9514 301.069 80.8733 cv
301.069 79.2669 301.662 78.8821 303.202 78.8821 cv
306.129 78.8821 li
306.415 78.0569 li
306.954 78.0569 li
306.954 80.4993 li
306.415 80.4993 li
306.129 79.971 li
303.511 79.971 li
302.213 79.971 301.938 80.1692 301.938 81.0823 cv
301.938 81.7971 302.4 82.4573 303.037 82.7649 cv
306.129 82.7649 li
306.415 81.6653 li
306.954 81.6653 li
cp
f
303.5 75.8567 mo
303.5 73.052 li
303.313 73.0296 303.137 73.0296 302.983 73.0296 cv
302.454 73.0296 301.817 73.2825 301.817 74.3499 cv
301.817 75.3733 302.213 75.7688 303.5 75.8567 cv
cp
307.13 74.3938 mo
307.13 76.2639 306.24 77.0013 304.05 77.0013 cv
301.959 77.0013 300.958 76.2093 300.958 74.2835 cv
300.958 72.1936 302.224 72.0286 303.39 72.0179 cv
303.797 72.0179 304.281 72.0618 304.38 72.0833 cv
304.38 75.8684 li
305.744 75.8128 306.25 75.4612 306.25 74.262 cv
306.25 73.3157 305.953 72.8206 305.722 72.5452 cv
306.547 72.1604 li
306.823 72.5901 307.13 73.305 307.13 74.3938 cv
cp
f
308.747 70.1702 mo
307.989 69.8626 li
308.208 69.4886 308.407 68.9388 308.407 68.1458 cv
308.407 66.9251 307.955 66.5511 306.8 66.5511 cv
306.426 66.5511 li
306.789 66.9143 307.097 67.4641 307.097 68.3108 cv
307.097 69.7415 306.449 70.2473 304.798 70.2473 cv
302.026 70.2473 li
301.762 70.9954 li
301.179 70.9954 li
301.179 69.1477 li
304.501 69.1477 li
305.766 69.1477 306.173 68.8831 306.173 68.0911 cv
306.173 67.3323 305.81 66.8372 305.414 66.5511 cv
302.048 66.5511 li
301.762 67.4309 li
301.179 67.4309 li
301.179 65.4622 li
306.856 65.4622 li
308.659 65.4622 309.265 66.5725 309.265 67.9593 cv
309.265 69.2024 308.924 69.9173 308.747 70.1702 cv
cp
f
104.866 515.507 mo
104.866 513.4 li
102.146 514.063 li
99.9192 514.419 li
102.146 514.862 li
104.866 515.507 li
cp
110.832 515.167 mo
110.832 521.61 li
109.014 521.61 li
108.436 520.454 li
98.0833 517.564 li
98.0833 511.207 li
108.418 508.385 li
109.014 507.212 li
110.832 507.212 li
110.832 513.689 li
109.014 513.689 li
108.436 512.532 li
107.211 512.839 li
107.211 516.069 li
108.418 516.358 li
109.014 515.167 li
110.832 515.167 li
cp
f
108.98 506.48 mo
108.537 506.021 li
99.5286 506.021 li
98.9505 506.667 li
97.2337 506.667 li
97.2337 501.806 li
108.537 501.806 li
108.537 501.788 li
108.98 501.177 li
110.832 501.177 li
110.832 506.48 li
108.98 506.48 li
cp
f
110.832 493.883 mo
110.832 500.257 li
108.98 500.257 li
108.537 499.543 li
103.812 499.543 li
103.812 500.546 li
101.399 500.546 li
101.399 499.543 li
100.599 499.543 li
97.8626 499.543 97.0296 498.081 97.0296 495.396 cv
97.0296 494.071 97.2503 493.118 97.4378 492.591 cv
99.5452 493.135 li
99.4095 493.442 99.3245 493.815 99.3245 494.393 cv
99.3245 495.107 99.8343 495.481 100.514 495.481 cv
101.399 495.481 li
101.399 493.271 li
103.812 493.271 li
103.812 495.481 li
108.537 495.481 li
108.98 493.883 li
110.832 493.883 li
cp
f
107.926 486.658 mo
106.889 486.658 li
106.855 486.93 106.821 487.219 106.821 487.576 cv
106.821 488.154 107.16 488.715 107.739 488.715 cv
108.283 488.715 108.537 488.443 108.537 487.984 cv
108.537 487.576 108.232 487.066 107.926 486.658 cv
cp
109.965 486.539 mo
110.492 487.152 111.002 488.086 111.002 489.565 cv
111.002 491.605 109.931 492.557 108.147 492.557 cv
105.937 492.557 105.087 490.653 105.087 488.46 cv
105.087 487.866 105.104 487.237 105.138 486.658 cv
104.288 486.658 li
103.863 486.658 103.557 486.981 103.557 487.559 cv
103.557 488.001 103.795 488.307 103.897 488.375 cv
104.73 488.511 li
104.73 491.809 li
102.198 492.08 li
101.569 490.67 101.126 488.766 101.126 486.641 cv
101.126 484.006 102.113 482.493 104.441 482.493 cv
108.537 482.493 li
109.014 482 li
110.832 482 li
110.832 486.539 li
109.965 486.539 li
cp
f
139.504 513.145 mo
138.093 513.145 137.753 513.774 137.753 514.556 cv
137.753 514.845 137.77 515.236 137.804 515.559 cv
141.221 515.559 li
141.255 515.252 141.272 514.878 141.272 514.726 cv
141.272 513.79 140.728 513.145 139.504 513.145 cv
cp
134.099 513.331 mo
133.011 513.331 132.755 513.978 132.755 514.504 cv
132.755 514.777 132.773 515.218 132.807 515.559 cv
135.731 515.559 li
135.747 515.236 135.747 514.845 135.747 514.623 cv
135.747 513.944 135.39 513.331 134.099 513.331 cv
cp
143.533 521.185 mo
141.832 521.185 li
141.238 519.876 li
132.858 519.876 li
132.433 521.219 li
130.783 521.219 li
130.749 519.621 130.664 515.048 130.664 513.74 cv
130.664 510.884 131.26 509.014 133.861 509.014 cv
135.475 509.014 136.275 509.83 136.615 510.935 cv
136.92 509.507 137.787 508.742 139.776 508.742 cv
142.495 508.793 143.533 510.476 143.533 513.723 cv
143.533 521.185 li
cp
f
143.549 500.87 mo
143.549 507.517 li
141.697 507.517 li
141.255 506.973 li
136.41 506.973 li
135.816 507.84 li
134.099 507.84 li
134.099 503.046 li
135.646 503.046 li
134.71 502.486 133.928 501.601 133.928 500.343 cv
133.928 499.51 134.116 499.034 134.269 498.745 cv
138.756 499.17 li
138.756 501.584 li
136.886 501.958 li
137.039 502.282 137.243 502.536 137.498 502.741 cv
141.238 502.741 li
141.697 500.87 li
143.549 500.87 li
cp
f
140.626 492.285 mo
139.589 492.285 li
139.555 492.557 139.521 492.846 139.521 493.203 cv
139.521 493.781 139.861 494.342 140.439 494.342 cv
140.983 494.342 141.238 494.07 141.238 493.611 cv
141.238 493.203 140.932 492.693 140.626 492.285 cv
cp
142.665 492.166 mo
143.193 492.779 143.702 493.713 143.702 495.192 cv
143.702 497.232 142.631 498.184 140.847 498.184 cv
138.637 498.184 137.787 496.28 137.787 494.087 cv
137.787 493.492 137.804 492.864 137.838 492.285 cv
136.989 492.285 li
136.563 492.285 136.257 492.608 136.257 493.186 cv
136.257 493.628 136.495 493.934 136.597 494.002 cv
137.43 494.138 li
137.43 497.436 li
134.898 497.707 li
134.269 496.297 133.826 494.393 133.826 492.268 cv
133.826 489.633 134.813 488.12 137.141 488.12 cv
141.238 488.12 li
141.714 487.627 li
143.533 487.627 li
143.533 492.166 li
142.665 492.166 li
cp
f
136.223 486.997 mo
135.782 487.575 li
134.099 487.575 li
134.099 482.204 li
135.782 482.204 li
136.223 482.731 li
139.419 481.966 li
140.711 481.796 li
139.419 481.643 li
136.223 480.844 li
135.782 481.422 li
134.099 481.422 li
134.099 476.221 li
135.782 476.221 li
136.223 476.85 li
143.533 479.994 li
143.533 484.074 li
136.223 486.997 li
cp
f
138.756 469.676 mo
137.074 469.676 136.036 469.846 136.036 470.611 cv
136.036 471.393 137.022 471.511 138.756 471.511 cv
140.728 471.511 141.765 471.341 141.765 470.611 cv
141.765 469.812 140.779 469.676 138.756 469.676 cv
cp
138.909 476.016 mo
135.612 476.016 133.707 474.792 133.707 470.645 cv
133.707 466.565 135.492 465.273 138.739 465.273 cv
142.02 465.273 143.907 466.463 143.907 470.645 cv
143.907 474.707 142.139 476.016 138.909 476.016 cv
cp
f
176.571 515.048 mo
176.571 519.349 174.378 521.236 169.924 521.236 cv
165.25 521.236 163.142 518.992 163.142 514.777 cv
163.142 512.839 163.38 511.649 164.077 510.187 cv
168.037 510.459 li
168.037 513.79 li
167.732 513.927 166.456 514.045 165.403 514.267 cv
165.352 514.488 165.335 514.742 165.335 515.048 cv
165.335 516.323 166.933 516.613 169.635 516.647 cv
172.049 516.647 173.851 516.119 173.851 514.198 cv
173.851 512.583 173.12 512.023 172.492 511.41 cv
174.633 509.949 li
175.244 510.527 176.571 511.836 176.571 515.048 cv
cp
f
176.231 503.369 mo
176.231 508.843 li
174.378 508.843 li
173.936 508.299 li
165.08 508.299 li
164.485 508.945 li
162.683 508.945 li
162.683 504.542 li
168.157 504.542 li
167.289 503.845 166.626 502.621 166.626 500.854 cv
166.626 498.763 167.544 498.201 169.924 498.201 cv
173.936 498.201 li
174.378 497.488 li
176.231 497.488 li
176.231 502.69 li
174.378 502.69 li
173.936 502.298 li
170.197 502.298 li
169.635 502.298 169.261 502.468 169.261 502.876 cv
169.261 503.352 169.533 503.76 169.924 504.067 cv
173.936 504.067 li
174.378 503.369 li
176.231 503.369 li
cp
f
173.325 490.908 mo
172.287 490.908 li
172.253 491.18 172.219 491.469 172.219 491.826 cv
172.219 492.404 172.559 492.965 173.137 492.965 cv
173.681 492.965 173.936 492.693 173.936 492.234 cv
173.936 491.826 173.63 491.316 173.325 490.908 cv
cp
175.364 490.789 mo
175.891 491.402 176.401 492.336 176.401 493.815 cv
176.401 495.855 175.329 496.807 173.545 496.807 cv
171.335 496.807 170.486 494.903 170.486 492.71 cv
170.486 492.116 170.502 491.487 170.536 490.908 cv
169.687 490.908 li
169.261 490.908 168.955 491.231 168.955 491.809 cv
168.955 492.251 169.194 492.557 169.295 492.625 cv
170.128 492.761 li
170.128 496.059 li
167.596 496.33 li
166.967 494.92 166.525 493.016 166.525 490.891 cv
166.525 488.256 167.511 486.743 169.839 486.743 cv
173.936 486.743 li
174.412 486.25 li
176.231 486.25 li
176.231 490.789 li
175.364 490.789 li
cp
f
176.247 478.702 mo
176.247 485.349 li
174.395 485.349 li
173.953 484.805 li
169.109 484.805 li
168.514 485.672 li
166.797 485.672 li
166.797 480.878 li
168.344 480.878 li
167.408 480.318 166.626 479.433 166.626 478.175 cv
166.626 477.342 166.814 476.866 166.967 476.577 cv
171.454 477.002 li
171.454 479.416 li
169.584 479.79 li
169.738 480.114 169.942 480.368 170.197 480.573 cv
173.936 480.573 li
174.395 478.702 li
176.247 478.702 li
cp
f
174.378 475.795 mo
173.936 475.336 li
164.927 475.336 li
164.349 475.983 li
162.632 475.983 li
162.632 471.121 li
173.936 471.121 li
173.936 471.104 li
174.378 470.492 li
176.231 470.492 li
176.231 475.795 li
174.378 475.795 li
cp
f
162.072 466.905 mo
162.072 464.984 162.377 464.559 163.975 464.559 cv
165.573 464.559 165.912 464.984 165.912 466.905 cv
165.912 468.842 165.573 469.233 163.975 469.233 cv
162.377 469.233 162.072 468.842 162.072 466.905 cv
cp
174.378 469.505 mo
173.953 468.893 li
169.194 468.893 li
168.684 469.743 li
166.797 469.743 li
166.797 464.66 li
173.936 464.66 li
173.936 464.644 li
174.378 463.692 li
176.231 463.692 li
176.231 469.505 li
174.378 469.505 li
cp
f
170.605 458.61 mo
170.605 456.774 li
170.434 456.756 170.231 456.756 170.009 456.756 cv
169.38 456.756 168.87 457.045 168.87 457.641 cv
168.87 458.303 169.38 458.575 170.605 458.61 cv
cp
176.469 457.607 mo
176.469 461.193 174.956 462.791 171.489 462.791 cv
168.088 462.791 166.508 461.057 166.508 457.674 cv
166.508 454.19 168.021 452.932 170.486 452.932 cv
171.182 452.932 172.389 453 172.542 453.033 cv
172.542 458.473 li
173.562 458.236 173.834 457.658 173.834 456.501 cv
173.834 455.482 173.562 454.36 173.018 453.459 cv
175.551 452.864 li
176.146 453.935 176.469 455.465 176.469 457.607 cv
cp
f
202.42 512.55 mo
198.936 512.55 198.324 513.519 198.324 514.607 cv
198.324 514.878 198.358 515.286 198.392 515.695 cv
206.636 515.695 li
206.654 515.525 206.654 515.355 206.654 515.167 cv
206.654 513.434 205.871 512.55 202.42 512.55 cv
cp
196.063 514.437 mo
196.063 510.425 196.948 507.994 201.961 507.994 cv
207.367 507.994 208.931 509.762 208.931 514.334 cv
208.931 521.134 li
207.027 521.134 li
206.466 519.995 li
198.647 519.995 li
198.256 521.168 li
196.182 521.168 li
196.148 520.063 196.063 515.525 196.063 514.437 cv
cp
f
203.305 502.656 mo
203.305 500.82 li
203.134 500.802 202.931 500.802 202.709 500.802 cv
202.08 500.802 201.571 501.091 201.571 501.687 cv
201.571 502.349 202.08 502.621 203.305 502.656 cv
cp
209.169 501.653 mo
209.169 505.239 207.657 506.837 204.189 506.837 cv
200.788 506.837 199.208 505.103 199.208 501.72 cv
199.208 498.236 200.721 496.978 203.186 496.978 cv
203.882 496.978 205.089 497.046 205.242 497.079 cv
205.242 502.519 li
206.262 502.282 206.534 501.703 206.534 500.547 cv
206.534 499.528 206.262 498.406 205.718 497.505 cv
208.251 496.909 li
208.846 497.981 209.169 499.511 209.169 501.653 cv
cp
f
207.078 495.855 mo
206.636 495.396 li
197.627 495.396 li
197.049 496.042 li
195.332 496.042 li
195.332 491.181 li
206.636 491.181 li
206.636 491.163 li
207.078 490.552 li
208.931 490.552 li
208.931 495.855 li
207.078 495.855 li
cp
f
205.786 489.311 mo
201.91 489.311 li
201.91 490.059 li
199.497 490.059 li
199.497 488.919 li
197.848 488.324 li
197.848 485.129 li
199.497 485.129 li
199.497 483.225 li
201.91 483.225 li
201.91 485.129 li
205.022 485.129 li
205.906 485.129 206.432 485.078 206.432 484.432 cv
206.432 484.109 206.33 483.532 206.211 483.395 cv
208.506 483.123 li
208.897 483.752 209.152 484.585 209.152 485.962 cv
209.152 488.427 208.132 489.311 205.786 489.311 cv
cp
f
206.025 476.748 mo
204.988 476.748 li
204.953 477.02 204.919 477.309 204.919 477.666 cv
204.919 478.243 205.259 478.805 205.837 478.805 cv
206.381 478.805 206.636 478.533 206.636 478.074 cv
206.636 477.666 206.33 477.156 206.025 476.748 cv
cp
208.064 476.629 mo
208.591 477.241 209.101 478.176 209.101 479.655 cv
209.101 481.695 208.03 482.647 206.245 482.647 cv
204.035 482.647 203.186 480.742 203.186 478.55 cv
203.186 477.955 203.202 477.326 203.237 476.748 cv
202.387 476.748 li
201.961 476.748 201.656 477.071 201.656 477.649 cv
201.656 478.091 201.894 478.397 201.995 478.465 cv
202.828 478.601 li
202.828 481.899 li
200.296 482.17 li
199.667 480.76 199.225 478.856 199.225 476.731 cv
199.225 474.096 200.211 472.583 202.539 472.583 cv
206.636 472.583 li
207.113 472.09 li
208.931 472.09 li
208.931 476.629 li
208.064 476.629 li
cp
f
241.631 521.168 mo
239.727 521.168 li
239.166 519.978 li
231.347 519.978 li
230.837 521.168 li
228.882 521.168 li
228.882 509.966 li
232.877 510.068 li
232.877 513.45 li
231.415 513.859 li
231.415 515.66 li
233.795 515.66 li
233.795 512.193 li
236.362 512.193 li
236.362 515.66 li
239.15 515.66 li
239.15 513.79 li
237.433 513.298 li
237.433 509.966 li
241.631 509.898 li
241.631 521.168 li
cp
f
233.285 499.614 mo
236.752 499.614 li
236.752 502.877 li
235.155 502.995 li
234.679 503.149 234.287 503.251 234.287 503.761 cv
234.287 504.372 234.832 504.712 236.719 504.712 cv
238.299 504.712 239.031 504.254 239.031 503.081 cv
239.031 501.84 238.606 500.82 238.163 500.038 cv
240.73 499.359 li
241.461 500.463 241.886 501.636 241.886 503.608 cv
241.886 507.28 240.475 509.047 237.041 509.047 cv
233.455 509.047 231.908 507.466 231.908 503.828 cv
231.908 501.704 232.52 500.463 233.285 499.614 cv
cp
f
241.631 493.238 mo
241.631 498.711 li
239.779 498.711 li
239.336 498.167 li
230.481 498.167 li
229.885 498.813 li
228.083 498.813 li
228.083 494.41 li
233.557 494.41 li
232.69 493.713 232.027 492.49 232.027 490.722 cv
232.027 488.631 232.945 488.07 235.325 488.07 cv
239.336 488.07 li
239.779 487.356 li
241.631 487.356 li
241.631 492.558 li
239.779 492.558 li
239.336 492.166 li
235.597 492.166 li
235.035 492.166 234.661 492.336 234.661 492.744 cv
234.661 493.22 234.934 493.628 235.325 493.935 cv
239.336 493.935 li
239.779 493.238 li
241.631 493.238 li
cp
f
236.855 480.267 mo
235.172 480.267 234.135 480.437 234.135 481.201 cv
234.135 481.984 235.12 482.102 236.855 482.102 cv
238.826 482.102 239.864 481.932 239.864 481.201 cv
239.864 480.403 238.877 480.267 236.855 480.267 cv
cp
237.008 486.607 mo
233.71 486.607 231.806 485.383 231.806 481.236 cv
231.806 477.156 233.591 475.864 236.837 475.864 cv
240.118 475.864 242.005 477.054 242.005 481.236 cv
242.005 485.298 240.238 486.607 237.008 486.607 cv
cp
f
274.33 521.168 mo
272.426 521.168 li
271.849 519.978 li
264.046 519.978 li
263.536 521.168 li
261.581 521.168 li
261.581 510.289 li
266.001 510.476 li
266.001 513.689 li
264.115 514.097 li
264.115 515.66 li
267.225 515.66 li
267.225 512.006 li
269.775 512.006 li
269.775 515.66 li
271.849 515.66 li
272.426 513.57 li
274.33 513.57 li
274.33 521.168 li
cp
f
269.554 503.353 mo
267.871 503.353 266.834 503.523 266.834 504.287 cv
266.834 505.07 267.82 505.188 269.554 505.188 cv
271.526 505.188 272.563 505.018 272.563 504.287 cv
272.563 503.489 271.576 503.353 269.554 503.353 cv
cp
269.707 509.693 mo
266.409 509.693 264.505 508.469 264.505 504.322 cv
264.505 500.241 266.29 498.949 269.536 498.949 cv
272.818 498.949 274.704 500.14 274.704 504.322 cv
274.704 508.384 272.937 509.693 269.707 509.693 cv
cp
f
274.33 492.898 mo
274.33 498.321 li
272.478 498.321 li
272.07 497.658 li
269.605 494.683 li
267.174 497.419 li
266.749 498.151 li
264.897 498.151 li
264.897 492.337 li
266.749 492.337 li
267.191 493.034 li
268.228 491.912 li
267.191 490.841 li
266.749 491.538 li
264.897 491.538 li
264.897 486.337 li
266.749 486.337 li
267.174 487.068 li
269.605 489.652 li
272.053 486.829 li
272.478 486.167 li
274.33 486.167 li
274.33 491.98 li
272.478 491.98 li
272.035 491.233 li
270.846 492.473 li
272.035 493.646 li
272.478 492.898 li
274.33 492.898 li
cp
f
271.186 485.061 mo
267.31 485.061 li
267.31 485.809 li
264.897 485.809 li
264.897 484.669 li
263.247 484.074 li
263.247 480.879 li
264.897 480.879 li
264.897 478.975 li
267.31 478.975 li
267.31 480.879 li
270.421 480.879 li
271.305 480.879 271.831 480.828 271.831 480.182 cv
271.831 479.859 271.73 479.282 271.611 479.145 cv
273.906 478.873 li
274.296 479.502 274.551 480.335 274.551 481.712 cv
274.551 484.177 273.532 485.061 271.186 485.061 cv
cp
f
274.347 471.461 mo
274.347 478.108 li
272.494 478.108 li
272.053 477.564 li
267.208 477.564 li
266.614 478.431 li
264.897 478.431 li
264.897 473.637 li
266.444 473.637 li
265.508 473.076 264.726 472.192 264.726 470.934 cv
264.726 470.101 264.913 469.625 265.067 469.336 cv
269.554 469.761 li
269.554 472.175 li
267.684 472.549 li
267.837 472.872 268.041 473.127 268.296 473.331 cv
272.035 473.331 li
272.494 471.461 li
274.347 471.461 li
cp
f
269.554 462.366 mo
267.871 462.366 266.834 462.536 266.834 463.301 cv
266.834 464.083 267.82 464.201 269.554 464.201 cv
271.526 464.201 272.563 464.032 272.563 463.301 cv
272.563 462.502 271.576 462.366 269.554 462.366 cv
cp
269.707 468.706 mo
266.409 468.706 264.505 467.483 264.505 463.335 cv
264.505 459.255 266.29 457.963 269.536 457.963 cv
272.818 457.963 274.704 459.154 274.704 463.335 cv
274.704 467.398 272.937 468.706 269.707 468.706 cv
cp
f
271.186 456.655 mo
267.31 456.655 li
267.31 457.403 li
264.897 457.403 li
264.897 456.263 li
263.247 455.668 li
263.247 452.473 li
264.897 452.473 li
264.897 450.569 li
267.31 450.569 li
267.31 452.473 li
270.421 452.473 li
271.305 452.473 271.831 452.422 271.831 451.776 cv
271.831 451.452 271.73 450.875 271.611 450.739 cv
273.906 450.467 li
274.296 451.096 274.551 451.929 274.551 453.306 cv
274.551 455.771 273.532 456.655 271.186 456.655 cv
cp
f
307.335 514.538 mo
307.335 519.74 304.785 521.236 300.366 521.236 cv
296.015 521.236 293.941 518.924 293.941 514.573 cv
293.941 512.482 294.298 510.731 295.029 509.337 cv
298.428 509.524 li
298.428 513.076 li
298.207 513.161 297.392 513.383 296.371 513.671 cv
296.201 513.96 296.167 514.215 296.167 514.556 cv
296.167 516.018 297.681 516.391 300.264 516.408 cv
303.273 516.408 304.888 516.136 304.888 514.403 cv
304.888 513.842 304.684 513.331 304.411 513.094 cv
302.763 513.094 li
302.27 514.419 li
300.298 514.419 li
300.298 509.065 li
305.958 509.065 li
306.672 510.204 307.335 511.989 307.335 514.538 cv
cp
f
302.253 501.551 mo
300.571 501.551 299.533 501.721 299.533 502.486 cv
299.533 503.268 300.519 503.386 302.253 503.386 cv
304.225 503.386 305.262 503.216 305.262 502.486 cv
305.262 501.687 304.276 501.551 302.253 501.551 cv
cp
302.407 507.891 mo
299.109 507.891 297.204 506.667 297.204 502.52 cv
297.204 498.44 298.99 497.148 302.236 497.148 cv
305.517 497.148 307.404 498.338 307.404 502.52 cv
307.404 506.582 305.636 507.891 302.407 507.891 cv
cp
f
305.177 496.16 mo
304.735 495.701 li
295.726 495.701 li
295.148 496.348 li
293.431 496.348 li
293.431 491.487 li
304.735 491.487 li
304.735 491.469 li
305.177 490.858 li
307.03 490.858 li
307.03 496.16 li
305.177 496.16 li
cp
f
307.03 483.565 mo
307.03 489.939 li
305.177 489.939 li
304.735 489.225 li
300.009 489.225 li
300.009 490.228 li
297.596 490.228 li
297.596 489.225 li
296.796 489.225 li
294.06 489.225 293.227 487.763 293.227 485.077 cv
293.227 483.752 293.448 482.8 293.635 482.273 cv
295.742 482.817 li
295.607 483.123 295.522 483.496 295.522 484.074 cv
295.522 484.788 296.032 485.162 296.711 485.162 cv
297.596 485.162 li
297.596 482.952 li
300.009 482.952 li
300.009 485.162 li
304.735 485.162 li
305.177 483.565 li
307.03 483.565 li
cp
f
110.832 400.438 mo
110.832 407.153 li
108.928 407.153 li
108.367 405.962 li
100.548 405.962 li
100.073 407.153 li
98.0833 407.153 li
98.0833 400.438 li
100.073 400.438 li
100.548 401.543 li
102.826 401.543 li
102.826 398.365 li
100.548 398.365 li
100.073 399.469 li
98.0833 399.469 li
98.0833 392.755 li
100.073 392.755 li
100.548 393.945 li
108.367 393.945 li
108.928 392.755 li
110.832 392.755 li
110.832 399.486 li
108.928 399.486 li
108.367 398.365 li
105.512 398.365 li
105.512 401.543 li
108.367 401.543 li
108.928 400.438 li
110.832 400.438 li
cp
f
106.056 385.393 mo
104.373 385.393 103.336 385.563 103.336 386.327 cv
103.336 387.11 104.322 387.228 106.056 387.228 cv
108.028 387.228 109.065 387.058 109.065 386.327 cv
109.065 385.529 108.078 385.393 106.056 385.393 cv
cp
106.209 391.733 mo
102.911 391.733 101.007 390.509 101.007 386.362 cv
101.007 382.282 102.792 380.99 106.038 380.99 cv
109.32 380.99 111.206 382.18 111.206 386.362 cv
111.206 390.424 109.439 391.733 106.209 391.733 cv
cp
f
107.688 379.681 mo
103.812 379.681 li
103.812 380.429 li
101.399 380.429 li
101.399 379.289 li
99.7493 378.695 li
99.7493 375.499 li
101.399 375.499 li
101.399 373.595 li
103.812 373.595 li
103.812 375.499 li
106.923 375.499 li
107.807 375.499 108.333 375.449 108.333 374.802 cv
108.333 374.479 108.232 373.902 108.113 373.765 cv
110.408 373.493 li
110.798 374.122 111.053 374.955 111.053 376.332 cv
111.053 378.797 110.033 379.681 107.688 379.681 cv
cp
f
105.206 368.58 mo
105.206 366.744 li
105.035 366.727 104.832 366.727 104.611 366.727 cv
103.982 366.727 103.472 367.016 103.472 367.612 cv
103.472 368.274 103.982 368.546 105.206 368.58 cv
cp
111.071 367.577 mo
111.071 371.163 109.558 372.762 106.09 372.762 cv
102.69 372.762 101.11 371.028 101.11 367.645 cv
101.11 364.16 102.622 362.903 105.087 362.903 cv
105.783 362.903 106.991 362.971 107.144 363.004 cv
107.144 368.444 li
108.163 368.206 108.436 367.628 108.436 366.472 cv
108.436 365.452 108.163 364.33 107.619 363.43 cv
110.153 362.834 li
110.747 363.906 111.071 365.436 111.071 367.577 cv
cp
f
108.98 361.78 mo
108.537 361.321 li
99.5286 361.321 li
98.9505 361.967 li
97.2337 361.967 li
97.2337 357.106 li
108.537 357.106 li
108.537 357.088 li
108.98 356.477 li
110.832 356.477 li
110.832 361.78 li
108.98 361.78 li
cp
f
143.533 407.323 mo
141.628 407.323 li
141.051 406.047 li
133.248 406.047 li
132.67 407.323 li
130.783 407.323 li
130.783 400.319 li
132.67 400.319 li
133.248 401.594 li
141.051 401.594 li
141.628 400.319 li
143.533 400.319 li
143.533 407.323 li
cp
f
143.533 393.875 mo
143.533 399.349 li
141.68 399.349 li
141.238 398.805 li
136.495 398.805 li
135.901 399.451 li
134.099 399.451 li
134.099 395.048 li
135.424 395.048 li
134.591 394.403 133.928 393.213 133.928 391.36 cv
133.928 389.167 134.846 388.573 137.226 388.573 cv
141.238 388.573 li
141.68 387.859 li
143.533 387.859 li
143.533 393.196 li
141.68 393.196 li
141.238 392.805 li
137.498 392.805 li
136.954 392.805 136.58 392.975 136.58 393.383 cv
136.58 393.859 136.869 394.249 137.294 394.573 cv
141.238 394.573 li
141.68 393.875 li
143.533 393.875 li
cp
f
140.949 381.058 mo
136.58 381.058 li
136.376 381.313 136.206 381.618 136.206 381.992 cv
136.206 382.672 137.379 382.791 138.858 382.791 cv
140.592 382.791 141.391 382.52 141.391 381.992 cv
141.391 381.602 141.221 381.295 140.949 381.058 cv
cp
142.598 380.769 mo
143.278 381.295 143.804 382.094 143.804 383.335 cv
143.804 385.715 142.156 387.143 139.062 387.143 cv
135.697 387.143 133.81 386.259 133.81 383.505 cv
133.81 382.435 134.217 381.635 134.744 381.058 cv
132.415 381.058 li
131.821 381.738 li
129.934 381.738 li
129.934 376.859 li
141.187 376.859 li
141.884 376.332 li
143.516 376.332 li
143.516 380.496 li
142.598 380.769 li
cp
f
129.373 372.728 mo
129.373 370.807 129.679 370.382 131.277 370.382 cv
132.874 370.382 133.214 370.807 133.214 372.728 cv
133.214 374.665 132.874 375.056 131.277 375.056 cv
129.679 375.056 129.373 374.665 129.373 372.728 cv
cp
141.68 375.328 mo
141.255 374.716 li
136.495 374.716 li
135.986 375.566 li
134.099 375.566 li
134.099 370.484 li
141.238 370.484 li
141.238 370.467 li
141.68 369.515 li
143.533 369.515 li
143.533 375.328 li
141.68 375.328 li
cp
f
140.626 362.971 mo
139.589 362.971 li
139.555 363.242 139.521 363.532 139.521 363.889 cv
139.521 364.466 139.861 365.028 140.439 365.028 cv
140.983 365.028 141.238 364.755 141.238 364.296 cv
141.238 363.889 140.932 363.378 140.626 362.971 cv
cp
142.665 362.852 mo
143.193 363.464 143.702 364.399 143.702 365.877 cv
143.702 367.917 142.631 368.869 140.847 368.869 cv
138.637 368.869 137.787 366.965 137.787 364.773 cv
137.787 364.178 137.804 363.549 137.838 362.971 cv
136.989 362.971 li
136.563 362.971 136.257 363.293 136.257 363.871 cv
136.257 364.314 136.495 364.619 136.597 364.688 cv
137.43 364.824 li
137.43 368.121 li
134.898 368.393 li
134.269 366.983 133.826 365.078 133.826 362.953 cv
133.826 360.319 134.813 358.806 137.141 358.806 cv
141.238 358.806 li
141.714 358.313 li
143.533 358.313 li
143.533 362.852 li
142.665 362.852 li
cp
f
176.995 408.359 mo
176.995 406.812 175.67 405.928 173.325 405.928 cv
165.777 405.928 li
165.301 407.628 li
163.482 407.628 li
163.482 400.455 li
165.301 400.455 li
165.777 401.645 li
173.137 401.645 li
176.758 401.645 179.274 403.208 179.274 407.968 cv
176.995 408.359 li
cp
f
174.785 393.282 mo
175.908 393.995 176.451 395.083 176.451 396.477 cv
176.451 398.755 175.449 399.316 173.664 399.316 cv
168.955 399.316 li
168.531 399.979 li
166.797 399.979 li
166.797 395.236 li
172.407 395.236 li
173.12 395.236 173.681 395.1 173.681 394.607 cv
173.681 394.148 173.409 393.842 173.052 393.553 cv
169.006 393.553 li
168.547 394.454 li
166.797 394.454 li
166.797 389.491 li
173.936 389.491 li
174.378 388.964 li
176.231 388.964 li
176.231 393.282 li
174.785 393.282 li
cp
f
174.378 388.027 mo
173.936 387.568 li
164.927 387.568 li
164.349 388.214 li
162.632 388.214 li
162.632 383.353 li
173.936 383.353 li
173.936 383.335 li
174.378 382.724 li
176.231 382.724 li
176.231 388.027 li
174.378 388.027 li
cp
f
162.072 379.137 mo
162.072 377.216 162.377 376.791 163.975 376.791 cv
165.573 376.791 165.912 377.216 165.912 379.137 cv
165.912 381.074 165.573 381.465 163.975 381.465 cv
162.377 381.465 162.072 381.074 162.072 379.137 cv
cp
174.378 381.738 mo
173.953 381.125 li
169.194 381.125 li
168.684 381.976 li
166.797 381.976 li
166.797 376.893 li
173.936 376.893 li
173.936 376.876 li
174.378 375.924 li
176.231 375.924 li
176.231 381.738 li
174.378 381.738 li
cp
f
170.605 370.841 mo
170.605 369.005 li
170.434 368.988 170.231 368.988 170.009 368.988 cv
169.38 368.988 168.87 369.277 168.87 369.872 cv
168.87 370.534 169.38 370.807 170.605 370.841 cv
cp
176.469 369.838 mo
176.469 373.424 174.956 375.023 171.489 375.023 cv
168.088 375.023 166.508 373.288 166.508 369.906 cv
166.508 366.421 168.021 365.163 170.486 365.163 cv
171.182 365.163 172.389 365.232 172.542 365.265 cv
172.542 370.704 li
173.562 370.467 173.834 369.889 173.834 368.733 cv
173.834 367.713 173.562 366.591 173.018 365.691 cv
175.551 365.095 li
176.146 366.166 176.469 367.697 176.469 369.838 cv
cp
f
173.086 363.718 mo
169.21 363.718 li
169.21 364.466 li
166.797 364.466 li
166.797 363.326 li
165.148 362.732 li
165.148 359.536 li
166.797 359.536 li
166.797 357.632 li
169.21 357.632 li
169.21 359.536 li
172.322 359.536 li
173.205 359.536 173.732 359.486 173.732 358.839 cv
173.732 358.516 173.63 357.939 173.511 357.802 cv
175.806 357.531 li
176.197 358.159 176.451 358.992 176.451 360.369 cv
176.451 362.834 175.432 363.718 173.086 363.718 cv
cp
f
208.931 400.676 mo
208.931 407.373 li
207.044 407.373 li
206.466 406.132 li
198.307 406.132 li
197.899 407.492 li
196.182 407.492 li
196.182 400.812 li
197.899 400.812 li
198.307 401.883 li
198.307 401.9 li
201.791 401.9 li
198.307 399.146 li
197.866 400.115 li
196.182 400.115 li
196.182 394.454 li
197.967 394.454 li
198.307 395.763 li
200.908 398.16 li
206.806 395.016 li
207.231 393.928 li
208.931 393.928 li
208.931 398.585 li
203.73 400.761 li
204.97 401.9 li
206.466 401.9 li
207.044 400.676 li
208.931 400.676 li
cp
f
194.772 390.561 mo
194.772 388.64 195.077 388.215 196.675 388.215 cv
198.273 388.215 198.613 388.64 198.613 390.561 cv
198.613 392.498 198.273 392.889 196.675 392.889 cv
195.077 392.889 194.772 392.498 194.772 390.561 cv
cp
207.078 393.161 mo
206.654 392.549 li
201.894 392.549 li
201.384 393.4 li
199.497 393.4 li
199.497 388.317 li
206.636 388.317 li
206.636 388.3 li
207.078 387.348 li
208.931 387.348 li
208.931 393.161 li
207.078 393.161 li
cp
f
207.078 386.48 mo
206.636 386.021 li
197.627 386.021 li
197.049 386.667 li
195.332 386.667 li
195.332 381.806 li
206.636 381.806 li
206.636 381.788 li
207.078 381.177 li
208.931 381.177 li
208.931 386.48 li
207.078 386.48 li
cp
f
204.155 374.072 mo
202.472 374.072 201.435 374.241 201.435 375.006 cv
201.435 375.788 202.42 375.907 204.155 375.907 cv
206.126 375.907 207.163 375.737 207.163 375.006 cv
207.163 374.207 206.177 374.072 204.155 374.072 cv
cp
204.308 380.411 mo
201.01 380.411 199.106 379.188 199.106 375.04 cv
199.106 370.96 200.891 369.668 204.137 369.668 cv
207.418 369.668 209.305 370.859 209.305 375.04 cv
209.305 379.103 207.537 380.411 204.308 380.411 cv
cp
f
236.6 399.877 mo
236.6 396.579 li
241.631 396.545 li
241.631 407.323 li
239.727 407.323 li
239.15 406.132 li
231.177 406.132 li
230.769 407.305 li
228.882 407.305 li
228.882 400.064 li
230.769 400.064 li
231.177 401.849 li
239.15 401.849 li
239.15 400.506 li
236.6 399.877 li
cp
f
227.472 393.179 mo
227.472 391.258 227.778 390.833 229.375 390.833 cv
230.973 390.833 231.313 391.258 231.313 393.179 cv
231.313 395.116 230.973 395.507 229.375 395.507 cv
227.778 395.507 227.472 395.116 227.472 393.179 cv
cp
239.779 395.78 mo
239.354 395.167 li
234.594 395.167 li
234.084 396.017 li
232.198 396.017 li
232.198 390.935 li
239.336 390.935 li
239.336 390.918 li
239.779 389.966 li
241.631 389.966 li
241.631 395.78 li
239.779 395.78 li
cp
f
241.631 383.761 mo
241.631 389.166 li
239.779 389.166 li
239.336 388.622 li
234.73 388.622 li
234.135 389.32 li
232.198 389.32 li
232.198 384.696 li
233.574 384.696 li
232.792 384.016 232.044 382.86 232.044 381.262 cv
232.044 379.97 232.537 379.171 233.54 378.781 cv
232.775 378.117 232.044 376.979 232.044 375.414 cv
232.044 373.171 233.285 372.644 235.375 372.644 cv
239.336 372.644 li
239.779 371.948 li
241.631 371.948 li
241.631 377.335 li
239.779 377.335 li
239.37 376.894 li
235.512 376.894 li
235.07 376.894 234.713 376.995 234.713 377.387 cv
234.713 377.879 235.019 378.253 235.461 378.526 cv
239.336 378.526 li
239.779 377.863 li
241.631 377.863 li
241.631 383.149 li
239.779 383.149 li
239.37 382.775 li
235.597 382.775 li
235.053 382.775 234.713 382.86 234.713 383.251 cv
234.713 383.778 234.985 384.152 235.512 384.39 cv
239.336 384.39 li
239.779 383.761 li
241.631 383.761 li
cp
f
238.725 365.384 mo
237.688 365.384 li
237.654 365.656 237.619 365.945 237.619 366.302 cv
237.619 366.88 237.959 367.441 238.537 367.441 cv
239.081 367.441 239.336 367.168 239.336 366.709 cv
239.336 366.302 239.031 365.792 238.725 365.384 cv
cp
240.764 365.265 mo
241.291 365.877 241.801 366.812 241.801 368.29 cv
241.801 370.33 240.73 371.283 238.946 371.283 cv
236.736 371.283 235.886 369.378 235.886 367.186 cv
235.886 366.591 235.903 365.962 235.937 365.384 cv
235.087 365.384 li
234.661 365.384 234.356 365.706 234.356 366.284 cv
234.356 366.727 234.594 367.033 234.696 367.101 cv
235.529 367.237 li
235.529 370.534 li
232.996 370.806 li
232.367 369.396 231.925 367.491 231.925 365.366 cv
231.925 362.732 232.911 361.219 235.24 361.219 cv
239.336 361.219 li
239.813 360.726 li
241.631 360.726 li
241.631 365.265 li
240.764 365.265 li
cp
f
274.33 401.576 mo
274.33 407.458 li
272.444 407.458 li
271.866 406.285 li
264.046 406.031 li
263.468 407.101 li
261.581 407.101 li
261.581 399.605 li
269.741 398.347 li
261.581 397.259 li
261.581 389.797 li
263.468 389.797 li
264.046 390.867 li
271.866 390.647 li
272.444 389.44 li
274.33 389.44 li
274.33 395.338 li
272.444 395.338 li
271.866 394.693 li
267.361 394.693 li
263.52 394.539 li
266.715 394.998 li
273.991 396.63 li
273.991 400.132 li
266.715 401.917 li
263.571 402.409 li
267.361 402.223 li
271.866 402.223 li
272.444 401.576 li
274.33 401.576 li
cp
f
260.171 385.903 mo
260.171 383.982 260.477 383.557 262.074 383.557 cv
263.672 383.557 264.012 383.982 264.012 385.903 cv
264.012 387.84 263.672 388.231 262.074 388.231 cv
260.477 388.231 260.171 387.84 260.171 385.903 cv
cp
272.478 388.503 mo
272.053 387.891 li
267.293 387.891 li
266.783 388.741 li
264.897 388.741 li
264.897 383.658 li
272.035 383.658 li
272.035 383.642 li
272.478 382.69 li
274.33 382.69 li
274.33 388.503 li
272.478 388.503 li
cp
f
274.33 381.874 mo
272.478 381.874 li
272.035 381.245 li
263.213 381.245 li
262.618 382.112 li
260.732 382.112 li
260.732 377.097 li
268.857 377.097 li
266.885 374.785 li
266.511 375.687 li
264.879 375.687 li
264.879 370.842 li
266.749 370.842 li
268.67 373.783 li
272.086 371.403 li
272.46 370.689 li
274.33 370.689 li
274.33 374.378 li
270.268 376.247 li
270.812 377.097 li
272.035 377.097 li
272.478 376.605 li
274.33 376.605 li
274.33 381.874 li
cp
f
268.704 365.725 mo
268.704 363.889 li
268.533 363.871 268.33 363.871 268.109 363.871 cv
267.48 363.871 266.97 364.16 266.97 364.756 cv
266.97 365.418 267.48 365.691 268.704 365.725 cv
cp
274.569 364.722 mo
274.569 368.308 273.056 369.907 269.588 369.907 cv
266.188 369.907 264.608 368.172 264.608 364.789 cv
264.608 361.305 266.12 360.047 268.585 360.047 cv
269.282 360.047 270.489 360.116 270.642 360.149 cv
270.642 365.588 li
271.661 365.351 271.934 364.773 271.934 363.616 cv
271.934 362.597 271.661 361.475 271.117 360.574 cv
273.651 359.979 li
274.245 361.05 274.569 362.58 274.569 364.722 cv
cp
f
307.03 401.475 mo
307.03 407.153 li
305.125 407.153 li
304.531 405.877 li
296.78 405.877 li
296.201 407.153 li
294.281 407.153 li
294.281 401.424 li
300.995 398.007 li
303.408 397.31 li
301.319 397.667 li
296.78 397.821 li
296.201 399.095 li
294.281 399.095 li
294.281 393.605 li
296.201 393.605 li
296.78 394.879 li
307.03 394.879 li
307.03 399.367 li
300.298 402.664 li
298.343 403.345 li
300.401 402.919 li
304.531 402.749 li
305.125 401.475 li
307.03 401.475 li
cp
f
302.253 386.346 mo
300.571 386.346 299.533 386.516 299.533 387.281 cv
299.533 388.063 300.519 388.181 302.253 388.181 cv
304.225 388.181 305.262 388.011 305.262 387.281 cv
305.262 386.482 304.276 386.346 302.253 386.346 cv
cp
302.407 392.686 mo
299.109 392.686 297.204 391.462 297.204 387.315 cv
297.204 383.235 298.99 381.943 302.236 381.943 cv
305.517 381.943 307.404 383.133 307.404 387.315 cv
307.404 391.377 305.636 392.686 302.407 392.686 cv
cp
f
299.72 381.159 mo
299.279 381.738 li
297.596 381.738 li
297.596 376.366 li
299.279 376.366 li
299.72 376.893 li
302.916 376.128 li
304.208 375.958 li
302.916 375.805 li
299.72 375.006 li
299.279 375.584 li
297.596 375.584 li
297.596 370.383 li
299.279 370.383 li
299.72 371.012 li
307.03 374.157 li
307.03 378.236 li
299.72 381.159 li
cp
f
301.404 365.81 mo
301.404 363.974 li
301.233 363.956 301.03 363.956 300.808 363.956 cv
300.179 363.956 299.669 364.245 299.669 364.841 cv
299.669 365.503 300.179 365.776 301.404 365.81 cv
cp
307.268 364.807 mo
307.268 368.393 305.755 369.991 302.287 369.991 cv
298.887 369.991 297.307 368.257 297.307 364.874 cv
297.307 361.39 298.82 360.132 301.284 360.132 cv
301.981 360.132 303.188 360.2 303.341 360.234 cv
303.341 365.673 li
304.361 365.436 304.633 364.858 304.633 363.701 cv
304.633 362.682 304.361 361.56 303.817 360.659 cv
306.35 360.064 li
306.945 361.135 307.268 362.665 307.268 364.807 cv
cp
f
307.03 353.671 mo
307.03 359.076 li
305.177 359.076 li
304.735 358.533 li
300.128 358.533 li
299.533 359.23 li
297.596 359.23 li
297.596 354.606 li
298.972 354.606 li
298.191 353.926 297.443 352.77 297.443 351.172 cv
297.443 349.88 297.936 349.081 298.939 348.691 cv
298.173 348.028 297.443 346.889 297.443 345.324 cv
297.443 343.081 298.684 342.554 300.774 342.554 cv
304.735 342.554 li
305.177 341.858 li
307.03 341.858 li
307.03 347.245 li
305.177 347.245 li
304.769 346.804 li
300.91 346.804 li
300.468 346.804 300.112 346.906 300.112 347.297 cv
300.112 347.789 300.417 348.163 300.86 348.436 cv
304.735 348.436 li
305.177 347.773 li
307.03 347.773 li
307.03 353.059 li
305.177 353.059 li
304.769 352.685 li
300.995 352.685 li
300.451 352.685 300.112 352.77 300.112 353.161 cv
300.112 353.688 300.383 354.062 300.91 354.3 cv
304.735 354.3 li
305.177 353.671 li
307.03 353.671 li
cp
f
302.083 334.802 mo
300.434 334.802 299.703 335.108 299.703 335.601 cv
299.703 335.991 299.857 336.298 300.06 336.519 cv
304.446 336.519 li
304.7 336.315 304.905 336.043 304.905 335.617 cv
304.905 334.921 303.766 334.802 302.083 334.802 cv
cp
305.925 336.909 mo
307.013 337.793 li
307.013 340.7 li
295.879 340.7 li
295.318 341.38 li
293.431 341.38 li
293.431 336.519 li
298.361 336.519 li
297.766 335.991 297.273 335.159 297.273 333.884 cv
297.273 331.929 298.292 330.45 302.049 330.45 cv
305.653 330.45 307.301 331.674 307.301 334.275 cv
307.301 335.55 306.605 336.4 305.925 336.909 cv
cp
f
301.404 325.078 mo
301.404 323.242 li
301.233 323.225 301.03 323.225 300.808 323.225 cv
300.179 323.225 299.669 323.514 299.669 324.11 cv
299.669 324.772 300.179 325.044 301.404 325.078 cv
cp
307.268 324.075 mo
307.268 327.661 305.755 329.26 302.287 329.26 cv
298.887 329.26 297.307 327.526 297.307 324.143 cv
297.307 320.658 298.82 319.401 301.284 319.401 cv
301.981 319.401 303.188 319.469 303.341 319.502 cv
303.341 324.942 li
304.361 324.704 304.633 324.126 304.633 322.97 cv
304.633 321.95 304.361 320.828 303.817 319.928 cv
306.35 319.332 li
306.945 320.404 307.268 321.934 307.268 324.075 cv
cp
f
307.046 311.563 mo
307.046 318.209 li
305.194 318.209 li
304.752 317.665 li
299.908 317.665 li
299.313 318.533 li
297.596 318.533 li
297.596 313.739 li
299.143 313.739 li
298.207 313.178 297.425 312.293 297.425 311.035 cv
297.425 310.202 297.613 309.727 297.766 309.438 cv
302.253 309.863 li
302.253 312.277 li
300.383 312.651 li
300.536 312.974 300.741 313.229 300.995 313.433 cv
304.735 313.433 li
305.194 311.563 li
307.046 311.563 li
cp
f
132.807 263.093 mo
137.074 263.093 li
137.074 262.107 li
137.074 261.104 136.206 260.764 134.898 260.764 cv
133.725 260.764 132.789 261.053 132.789 261.92 cv
132.789 262.192 132.789 262.685 132.807 263.093 cv
cp
143.533 261.121 mo
143.533 268.498 li
141.765 268.498 li
141.238 267.36 li
132.943 267.36 li
132.518 268.533 li
130.783 268.533 li
130.749 266.951 130.664 263.28 130.664 261.716 cv
130.664 258.283 131.107 256.6 134.983 256.6 cv
138.331 256.6 139.3 258.367 139.3 261.376 cv
139.3 263.093 li
141.203 263.093 li
141.765 261.121 li
143.533 261.121 li
cp
f
140.626 250.105 mo
139.589 250.105 li
139.555 250.376 139.521 250.665 139.521 251.023 cv
139.521 251.6 139.861 252.161 140.439 252.161 cv
140.983 252.161 141.238 251.889 141.238 251.43 cv
141.238 251.023 140.932 250.512 140.626 250.105 cv
cp
142.665 249.986 mo
143.193 250.598 143.702 251.533 143.702 253.011 cv
143.702 255.051 142.631 256.003 140.847 256.003 cv
138.637 256.003 137.787 254.099 137.787 251.907 cv
137.787 251.312 137.804 250.683 137.838 250.105 cv
136.989 250.105 li
136.563 250.105 136.257 250.427 136.257 251.005 cv
136.257 251.448 136.495 251.753 136.597 251.822 cv
137.43 251.957 li
137.43 255.255 li
134.898 255.527 li
134.269 254.116 133.826 252.212 133.826 250.087 cv
133.826 247.452 134.813 245.94 137.141 245.94 cv
141.238 245.94 li
141.714 245.447 li
143.533 245.447 li
143.533 249.986 li
142.665 249.986 li
cp
f
138.926 238.289 mo
137.09 238.289 136.445 238.426 136.427 238.918 cv
136.445 239.326 136.597 239.717 137.022 240.024 cv
141.34 240.024 li
141.458 239.82 141.543 239.547 141.543 239.207 cv
141.543 238.408 140.507 238.289 138.926 238.289 cv
cp
146.932 244.749 mo
145.079 244.749 li
144.637 244.205 li
136.427 244.205 li
135.731 245.021 li
134.099 245.021 li
134.099 240.432 li
135.424 240.21 li
134.609 239.616 133.843 238.766 133.843 237.474 cv
133.843 235.315 135.101 234.193 138.603 234.193 cv
141.951 234.193 143.719 235.179 143.719 237.541 cv
143.719 238.698 143.448 239.48 143.09 240.024 cv
144.57 240.024 li
145.079 238.987 li
146.932 238.987 li
146.932 244.749 li
cp
f
140.626 227.546 mo
139.589 227.546 li
139.555 227.818 139.521 228.107 139.521 228.464 cv
139.521 229.041 139.861 229.603 140.439 229.603 cv
140.983 229.603 141.238 229.33 141.238 228.871 cv
141.238 228.464 140.932 227.953 140.626 227.546 cv
cp
142.665 227.427 mo
143.193 228.039 143.702 228.974 143.702 230.452 cv
143.702 232.492 142.631 233.445 140.847 233.445 cv
138.637 233.445 137.787 231.54 137.787 229.348 cv
137.787 228.753 137.804 228.124 137.838 227.546 cv
136.989 227.546 li
136.563 227.546 136.257 227.868 136.257 228.447 cv
136.257 228.889 136.495 229.195 136.597 229.263 cv
137.43 229.399 li
137.43 232.697 li
134.898 232.968 li
134.269 231.558 133.826 229.654 133.826 227.529 cv
133.826 224.894 134.813 223.381 137.141 223.381 cv
141.238 223.381 li
141.714 222.888 li
143.533 222.888 li
143.533 227.427 li
142.665 227.427 li
cp
f
169.823 259.864 mo
167.289 259.897 165.675 260.118 165.675 261.767 cv
165.675 263.415 167.289 263.704 169.823 263.704 cv
172.355 263.704 173.732 263.399 173.732 261.767 cv
173.732 260.118 172.355 259.829 169.823 259.864 cv
cp
177.42 261.868 mo
177.132 261.868 176.86 261.852 176.588 261.801 cv
176.588 266.731 174.395 268.413 169.823 268.43 cv
165.352 268.43 163.075 266.747 163.075 261.767 cv
163.075 256.803 165.352 255.138 169.823 255.138 cv
173.511 255.12 175.653 256.141 176.332 259.2 cv
177.165 258.996 177.574 257.5 177.2 256.174 cv
180.396 256.752 li
180.752 259.149 179.766 261.868 177.42 261.868 cv
cp
f
174.785 247.725 mo
175.908 248.439 176.451 249.527 176.451 250.92 cv
176.451 253.199 175.449 253.759 173.664 253.759 cv
168.955 253.759 li
168.531 254.422 li
166.797 254.422 li
166.797 249.679 li
172.407 249.679 li
173.12 249.679 173.681 249.543 173.681 249.05 cv
173.681 248.591 173.409 248.285 173.052 247.996 cv
169.006 247.996 li
168.547 248.898 li
166.797 248.898 li
166.797 243.934 li
173.936 243.934 li
174.378 243.408 li
176.231 243.408 li
176.231 247.725 li
174.785 247.725 li
cp
f
170.605 238.256 mo
170.605 236.42 li
170.434 236.403 170.231 236.403 170.009 236.403 cv
169.38 236.403 168.87 236.692 168.87 237.287 cv
168.87 237.949 169.38 238.222 170.605 238.256 cv
cp
176.469 237.253 mo
176.469 240.839 174.956 242.438 171.489 242.438 cv
168.088 242.438 166.508 240.703 166.508 237.321 cv
166.508 233.836 168.021 232.578 170.486 232.578 cv
171.182 232.578 172.389 232.647 172.542 232.68 cv
172.542 238.119 li
173.562 237.882 173.834 237.304 173.834 236.148 cv
173.834 235.128 173.562 234.006 173.018 233.106 cv
175.551 232.51 li
176.146 233.581 176.469 235.112 176.469 237.253 cv
cp
f
171.284 225.285 mo
169.635 225.285 168.905 225.591 168.905 226.084 cv
168.905 226.475 169.058 226.782 169.261 227.002 cv
173.647 227.002 li
173.902 226.798 174.106 226.527 174.106 226.101 cv
174.106 225.405 172.967 225.285 171.284 225.285 cv
cp
175.126 227.393 mo
176.214 228.277 li
176.214 231.184 li
165.08 231.184 li
164.519 231.864 li
162.632 231.864 li
162.632 227.002 li
167.562 227.002 li
166.967 226.475 166.474 225.643 166.474 224.367 cv
166.474 222.412 167.493 220.934 171.25 220.934 cv
174.854 220.934 176.502 222.158 176.502 224.758 cv
176.502 226.033 175.806 226.883 175.126 227.393 cv
cp
f
170.605 215.562 mo
170.605 213.726 li
170.434 213.708 170.231 213.708 170.009 213.708 cv
169.38 213.708 168.87 213.997 168.87 214.593 cv
168.87 215.255 169.38 215.528 170.605 215.562 cv
cp
176.469 214.559 mo
176.469 218.145 174.956 219.743 171.489 219.743 cv
168.088 219.743 166.508 218.009 166.508 214.626 cv
166.508 211.142 168.021 209.884 170.486 209.884 cv
171.182 209.884 172.389 209.952 172.542 209.986 cv
172.542 215.425 li
173.562 215.188 173.834 214.61 173.834 213.453 cv
173.834 212.434 173.562 211.312 173.018 210.411 cv
175.551 209.816 li
176.146 210.887 176.469 212.417 176.469 214.559 cv
cp
f
167.885 199.48 mo
171.352 199.48 li
171.352 202.743 li
169.754 202.862 li
169.279 203.015 168.887 203.117 168.887 203.627 cv
168.887 204.239 169.432 204.578 171.319 204.578 cv
172.899 204.578 173.63 204.12 173.63 202.948 cv
173.63 201.706 173.205 200.686 172.763 199.905 cv
175.329 199.225 li
176.061 200.329 176.486 201.502 176.486 203.474 cv
176.486 207.146 175.075 208.913 171.641 208.913 cv
168.055 208.913 166.508 207.332 166.508 203.695 cv
166.508 201.571 167.119 200.329 167.885 199.48 cv
cp
f
198.239 262.685 mo
201.979 262.685 li
201.979 261.631 li
201.979 260.492 201.231 260.254 199.922 260.254 cv
198.732 260.254 198.239 260.696 198.239 261.614 cv
198.239 262.685 li
cp
208.931 261.359 mo
208.931 268.448 li
207.198 268.448 li
206.636 267.138 li
198.511 267.138 li
198.086 268.481 li
196.182 268.481 li
196.182 266.408 196.063 260.798 196.063 259.795 cv
196.063 257.585 196.574 255.733 199.956 255.733 cv
201.605 255.733 202.778 256.497 203.423 257.84 cv
206.636 255.953 li
207.198 254.679 li
208.931 254.679 li
208.931 259.693 li
204.052 261.682 li
204.052 262.685 li
206.636 262.685 li
207.198 261.359 li
208.931 261.359 li
cp
f
204.155 247.878 mo
202.472 247.878 201.435 248.048 201.435 248.813 cv
201.435 249.595 202.42 249.713 204.155 249.713 cv
206.126 249.713 207.163 249.543 207.163 248.813 cv
207.163 248.014 206.177 247.878 204.155 247.878 cv
cp
204.308 254.218 mo
201.01 254.218 199.106 252.994 199.106 248.847 cv
199.106 244.767 200.891 243.475 204.137 243.475 cv
207.418 243.475 209.305 244.665 209.305 248.847 cv
209.305 252.909 207.537 254.218 204.308 254.218 cv
cp
f
208.931 237.152 mo
208.931 242.557 li
207.078 242.557 li
206.636 242.013 li
202.03 242.013 li
201.435 242.71 li
199.497 242.71 li
199.497 238.086 li
200.873 238.086 li
200.092 237.407 199.344 236.25 199.344 234.653 cv
199.344 233.361 199.837 232.562 200.84 232.171 cv
200.075 231.508 199.344 230.369 199.344 228.805 cv
199.344 226.562 200.585 226.034 202.675 226.034 cv
206.636 226.034 li
207.078 225.338 li
208.931 225.338 li
208.931 230.726 li
207.078 230.726 li
206.67 230.284 li
202.812 230.284 li
202.369 230.284 202.013 230.386 202.013 230.778 cv
202.013 231.27 202.319 231.644 202.761 231.916 cv
206.636 231.916 li
207.078 231.253 li
208.931 231.253 li
208.931 236.539 li
207.078 236.539 li
206.67 236.165 li
202.897 236.165 li
202.353 236.165 202.013 236.25 202.013 236.642 cv
202.013 237.168 202.284 237.542 202.812 237.781 cv
206.636 237.781 li
207.078 237.152 li
208.931 237.152 li
cp
f
203.305 220.237 mo
203.305 218.401 li
203.134 218.383 202.931 218.383 202.709 218.383 cv
202.08 218.383 201.571 218.672 201.571 219.268 cv
201.571 219.93 202.08 220.202 203.305 220.237 cv
cp
209.169 219.234 mo
209.169 222.82 207.657 224.418 204.189 224.418 cv
200.788 224.418 199.208 222.684 199.208 219.301 cv
199.208 215.817 200.721 214.559 203.186 214.559 cv
203.882 214.559 205.089 214.627 205.242 214.66 cv
205.242 220.1 li
206.262 219.863 206.534 219.284 206.534 218.128 cv
206.534 217.109 206.262 215.987 205.718 215.086 cv
208.251 214.491 li
208.846 215.562 209.169 217.092 209.169 219.234 cv
cp
f
204.155 207.249 mo
202.472 207.249 201.435 207.419 201.435 208.184 cv
201.435 208.966 202.42 209.084 204.155 209.084 cv
206.126 209.084 207.163 208.914 207.163 208.184 cv
207.163 207.385 206.177 207.249 204.155 207.249 cv
cp
204.308 213.589 mo
201.01 213.589 199.106 212.366 199.106 208.218 cv
199.106 204.138 200.891 202.846 204.137 202.846 cv
207.418 202.846 209.305 204.036 209.305 208.218 cv
209.305 212.281 207.537 213.589 204.308 213.589 cv
cp
f
236.634 263.874 mo
235.682 267.512 234.475 268.413 232.129 268.413 cv
229.783 268.413 228.526 266.986 228.526 263.144 cv
228.526 259.574 229.256 258.283 229.478 258.129 cv
232.894 258.248 li
232.894 261.92 li
231.347 262.107 li
231.211 262.192 230.956 262.497 230.956 263.144 cv
230.956 263.874 231.466 264.163 232.163 264.163 cv
232.758 264.163 233.064 263.739 233.472 262.056 cv
234.254 258.69 235.138 257.484 237.908 257.484 cv
240.986 257.484 241.886 259.405 241.886 262.736 cv
241.886 266.561 241.036 268.056 240.867 268.294 cv
237.348 268.209 li
237.348 264.3 li
238.572 264.163 li
238.639 264.129 239.132 263.603 239.132 263.008 cv
239.132 262.345 238.98 261.783 238.129 261.783 cv
237.381 261.783 237.059 262.226 236.634 263.874 cv
cp
f
227.472 253.811 mo
227.472 251.89 227.778 251.465 229.375 251.465 cv
230.973 251.465 231.313 251.89 231.313 253.811 cv
231.313 255.748 230.973 256.139 229.375 256.139 cv
227.778 256.139 227.472 255.748 227.472 253.811 cv
cp
239.779 256.411 mo
239.354 255.799 li
234.594 255.799 li
234.084 256.649 li
232.198 256.649 li
232.198 251.567 li
239.336 251.567 li
239.336 251.55 li
239.779 250.598 li
241.631 250.598 li
241.631 256.411 li
239.779 256.411 li
cp
f
236.005 245.515 mo
236.005 243.679 li
235.834 243.661 235.631 243.661 235.409 243.661 cv
234.781 243.661 234.271 243.95 234.271 244.546 cv
234.271 245.208 234.781 245.481 236.005 245.515 cv
cp
241.869 244.512 mo
241.869 248.098 240.357 249.697 236.889 249.697 cv
233.489 249.697 231.908 247.962 231.908 244.579 cv
231.908 241.095 233.421 239.837 235.886 239.837 cv
236.582 239.837 237.789 239.906 237.943 239.939 cv
237.943 245.378 li
238.962 245.141 239.235 244.563 239.235 243.407 cv
239.235 242.387 238.962 241.265 238.418 240.365 cv
240.951 239.769 li
241.546 240.84 241.869 242.37 241.869 244.512 cv
cp
f
241.648 232 mo
241.648 238.647 li
239.795 238.647 li
239.354 238.103 li
234.509 238.103 li
233.914 238.97 li
232.198 238.97 li
232.198 234.176 li
233.744 234.176 li
232.809 233.616 232.027 232.731 232.027 231.473 cv
232.027 230.64 232.214 230.164 232.367 229.875 cv
236.855 230.3 li
236.855 232.714 li
234.985 233.088 li
235.138 233.411 235.342 233.666 235.597 233.87 cv
239.336 233.87 li
239.795 232 li
241.648 232 li
cp
f
241.648 222.378 mo
241.648 229.025 li
239.795 229.025 li
239.354 228.481 li
234.509 228.481 li
233.914 229.348 li
232.198 229.348 li
232.198 224.554 li
233.744 224.554 li
232.809 223.993 232.027 223.109 232.027 221.851 cv
232.027 221.018 232.214 220.542 232.367 220.253 cv
236.855 220.678 li
236.855 223.092 li
234.985 223.466 li
235.138 223.789 235.342 224.044 235.597 224.248 cv
239.336 224.248 li
239.795 222.378 li
241.648 222.378 li
cp
f
238.725 213.793 mo
237.688 213.793 li
237.654 214.065 237.619 214.354 237.619 214.711 cv
237.619 215.289 237.959 215.85 238.537 215.85 cv
239.081 215.85 239.336 215.577 239.336 215.118 cv
239.336 214.711 239.031 214.201 238.725 213.793 cv
cp
240.764 213.674 mo
241.291 214.286 241.801 215.221 241.801 216.699 cv
241.801 218.74 240.73 219.692 238.946 219.692 cv
236.736 219.692 235.886 217.787 235.886 215.595 cv
235.886 215 235.903 214.371 235.937 213.793 cv
235.087 213.793 li
234.661 213.793 234.356 214.116 234.356 214.694 cv
234.356 215.136 234.594 215.442 234.696 215.51 cv
235.529 215.646 li
235.529 218.944 li
232.996 219.215 li
232.367 217.805 231.925 215.901 231.925 213.776 cv
231.925 211.141 232.911 209.628 235.24 209.628 cv
239.336 209.628 li
239.813 209.135 li
241.631 209.135 li
241.631 213.674 li
240.764 213.674 li
cp
f
106.209 137.786 mo
100.532 136.257 li
100.073 137.651 li
98.0833 137.651 li
98.0833 131.022 li
100.073 131.022 li
100.497 131.956 li
110.832 136.053 li
110.832 140.439 li
100.497 144.366 li
100.073 145.3 li
98.0833 145.3 li
98.0833 138.449 li
100.073 138.449 li
100.532 139.81 li
106.192 138.297 li
108.181 138.059 li
106.209 137.786 li
cp
f
96.6731 127.57 mo
96.6731 125.649 96.9788 125.224 98.5765 125.224 cv
100.174 125.224 100.514 125.649 100.514 127.57 cv
100.514 129.507 100.174 129.898 98.5765 129.898 cv
96.9788 129.898 96.6731 129.507 96.6731 127.57 cv
cp
108.98 130.17 mo
108.555 129.558 li
103.795 129.558 li
103.285 130.408 li
101.399 130.408 li
101.399 125.325 li
108.537 125.325 li
108.537 125.309 li
108.98 124.357 li
110.832 124.357 li
110.832 130.17 li
108.98 130.17 li
cp
f
102.487 114.208 mo
105.953 114.208 li
105.953 117.472 li
104.356 117.59 li
103.88 117.743 103.489 117.846 103.489 118.356 cv
103.489 118.967 104.033 119.307 105.92 119.307 cv
107.5 119.307 108.232 118.849 108.232 117.676 cv
108.232 116.435 107.807 115.414 107.365 114.633 cv
109.931 113.953 li
110.662 115.058 111.087 116.231 111.087 118.202 cv
111.087 121.874 109.676 123.642 106.242 123.642 cv
102.657 123.642 101.11 122.061 101.11 118.423 cv
101.11 116.299 101.721 115.058 102.487 114.208 cv
cp
f
107.688 112.848 mo
103.812 112.848 li
103.812 113.596 li
101.399 113.596 li
101.399 112.456 li
99.7493 111.862 li
99.7493 108.666 li
101.399 108.666 li
101.399 106.762 li
103.812 106.762 li
103.812 108.666 li
106.923 108.666 li
107.807 108.666 108.333 108.616 108.333 107.969 cv
108.333 107.646 108.232 107.069 108.113 106.932 cv
110.408 106.66 li
110.798 107.289 111.053 108.122 111.053 109.499 cv
111.053 111.964 110.033 112.848 107.688 112.848 cv
cp
f
106.056 99.7757 mo
104.373 99.7757 103.336 99.9456 103.336 100.71 cv
103.336 101.492 104.322 101.611 106.056 101.611 cv
108.028 101.611 109.065 101.441 109.065 100.71 cv
109.065 99.9114 108.078 99.7757 106.056 99.7757 cv
cp
106.209 106.116 mo
102.911 106.116 101.007 104.892 101.007 100.744 cv
101.007 96.6643 102.792 95.3723 106.038 95.3723 cv
109.32 95.3723 111.206 96.5628 111.206 100.744 cv
111.206 104.807 109.439 106.116 106.209 106.116 cv
cp
f
110.849 87.6712 mo
110.849 94.3177 li
108.996 94.3177 li
108.555 93.7737 li
103.71 93.7737 li
103.116 94.6409 li
101.399 94.6409 li
101.399 89.847 li
102.946 89.847 li
102.01 89.2864 101.228 88.4016 101.228 87.1438 cv
101.228 86.3108 101.415 85.8352 101.569 85.5462 cv
106.056 85.971 li
106.056 88.385 li
104.186 88.7591 li
104.339 89.0823 104.543 89.3372 104.798 89.5413 cv
108.537 89.5413 li
108.996 87.6712 li
110.849 87.6712 li
cp
f
135.594 135.594 mo
143.533 136.546 li
143.533 142.393 li
133.214 144.382 li
132.773 145.3 li
130.783 145.3 li
130.783 138.5 li
132.773 138.5 li
133.232 139.98 li
138.824 139.198 li
140.829 139.044 li
138.824 138.892 li
131.192 137.396 li
131.192 133.741 li
138.824 132.262 li
140.829 131.973 li
138.824 131.821 li
133.232 130.903 li
132.773 132.415 li
130.783 132.415 li
130.783 125.769 li
132.773 125.769 li
133.232 126.687 li
143.533 128.913 li
143.533 134.608 li
135.594 135.594 li
cp
f
143.533 119.648 mo
143.533 125.121 li
141.68 125.121 li
141.238 124.577 li
132.382 124.577 li
131.786 125.223 li
129.985 125.223 li
129.985 120.821 li
135.458 120.821 li
134.591 120.123 133.928 118.9 133.928 117.132 cv
133.928 115.041 134.846 114.48 137.226 114.48 cv
141.238 114.48 li
141.68 113.766 li
143.533 113.766 li
143.533 118.968 li
141.68 118.968 li
141.238 118.576 li
137.498 118.576 li
136.937 118.576 136.563 118.746 136.563 119.155 cv
136.563 119.63 136.835 120.038 137.226 120.345 cv
141.238 120.345 li
141.68 119.648 li
143.533 119.648 li
cp
f
129.373 110.196 mo
129.373 108.275 129.679 107.85 131.277 107.85 cv
132.874 107.85 133.214 108.275 133.214 110.196 cv
133.214 112.133 132.874 112.524 131.277 112.524 cv
129.679 112.524 129.373 112.133 129.373 110.196 cv
cp
141.68 112.796 mo
141.255 112.184 li
136.495 112.184 li
135.986 113.033 li
134.099 113.033 li
134.099 107.951 li
141.238 107.951 li
141.238 107.935 li
141.68 106.983 li
143.533 106.983 li
143.533 112.796 li
141.68 112.796 li
cp
f
141.832 101.797 mo
141.832 101.186 141.543 100.828 141.051 100.828 cv
140.694 100.828 140.32 101.219 140.099 102.307 cv
139.402 105.639 138.552 106.336 136.852 106.336 cv
134.506 106.336 133.707 104.585 133.707 101.491 cv
133.707 99.843 134.047 98.4485 134.472 97.4632 cv
136.92 97.5647 li
136.852 100.608 li
135.883 100.778 li
135.747 100.964 135.679 101.186 135.679 101.611 cv
135.679 102.12 135.917 102.596 136.36 102.596 cv
136.801 102.596 137.09 102.035 137.26 100.948 cv
137.804 97.6331 138.756 96.9192 140.694 96.9192 cv
143.175 96.9192 143.856 98.6702 143.856 101.848 cv
143.856 103.854 143.498 105.452 143.124 106.251 cv
140.32 106.251 li
140.405 102.988 li
141.543 102.749 li
141.747 102.511 141.832 102.24 141.832 101.797 cv
cp
f
143.533 96.1712 mo
141.68 96.1712 li
141.238 95.5423 li
132.415 95.5423 li
131.821 96.4085 li
129.934 96.4085 li
129.934 91.3948 li
138.059 91.3948 li
136.087 89.0823 li
135.713 89.9837 li
134.081 89.9837 li
134.081 85.1389 li
135.951 85.1389 li
137.872 88.0794 li
141.288 85.6995 li
141.662 84.9856 li
143.533 84.9856 li
143.533 88.6741 li
139.47 90.5442 li
140.014 91.3948 li
141.238 91.3948 li
141.68 90.9016 li
143.533 90.9016 li
143.533 96.1712 li
cp
f
137.907 80.0218 mo
137.907 78.1858 li
137.736 78.1682 137.533 78.1682 137.311 78.1682 cv
136.682 78.1682 136.172 78.4573 136.172 79.053 cv
136.172 79.7151 136.682 79.9876 137.907 80.0218 cv
cp
143.771 79.0188 mo
143.771 82.6048 142.258 84.2034 138.79 84.2034 cv
135.39 84.2034 133.81 82.469 133.81 79.0862 cv
133.81 75.6018 135.323 74.344 137.787 74.344 cv
138.484 74.344 139.691 74.4124 139.844 74.4456 cv
139.844 79.885 li
140.864 79.6477 141.136 79.0696 141.136 77.9134 cv
141.136 76.8938 140.864 75.7718 140.32 74.8714 cv
142.853 74.2757 li
143.448 75.347 143.771 76.8772 143.771 79.0188 cv
cp
f
146.491 72.6429 mo
144.026 72.1663 li
144.23 71.7249 144.671 70.7386 144.671 69.5149 cv
144.671 67.9514 144.093 67.135 142.7 67.0501 cv
143.175 67.6624 143.516 68.4436 143.516 69.4973 cv
143.516 71.8264 142.41 72.8977 139.861 72.8977 cv
136.597 72.9319 li
136.189 73.4075 li
134.099 73.4075 li
134.099 68.6819 li
139.062 68.6819 li
140.558 68.6819 141.085 68.512 141.085 68.0188 cv
141.085 67.6106 140.847 67.2708 140.507 67.0501 cv
136.631 67.0501 li
136.189 67.7298 li
134.099 67.7298 li
134.099 62.8177 li
141.747 62.8177 li
145.725 62.8177 147.306 64.7552 147.306 68.5286 cv
147.306 70.8577 146.762 72.1155 146.491 72.6429 cv
cp
f
176.231 138.841 mo
176.231 145.385 li
174.378 145.385 li
173.936 144.229 li
169.908 140.914 li
165.742 144.196 li
165.335 145.215 li
163.482 145.215 li
163.482 138.688 li
165.335 138.688 li
165.742 139.503 li
167.732 138.025 li
165.742 136.733 li
165.335 137.616 li
163.482 137.616 li
163.482 131.242 li
165.318 131.242 li
165.742 132.296 li
169.635 135.526 li
173.936 132.16 li
174.378 131.073 li
176.231 131.073 li
176.231 137.685 li
174.378 137.685 li
173.936 136.852 li
171.896 138.399 li
173.936 139.759 li
174.378 138.841 li
176.231 138.841 li
cp
f
176.247 123.659 mo
176.247 130.306 li
174.395 130.306 li
173.953 129.762 li
169.109 129.762 li
168.514 130.629 li
166.797 130.629 li
166.797 125.835 li
168.344 125.835 li
167.408 125.275 166.626 124.39 166.626 123.132 cv
166.626 122.299 166.814 121.824 166.967 121.534 cv
171.454 121.959 li
171.454 124.373 li
169.584 124.747 li
169.738 125.071 169.942 125.325 170.197 125.53 cv
173.936 125.53 li
174.395 123.659 li
176.247 123.659 li
cp
f
173.325 115.075 mo
172.287 115.075 li
172.253 115.347 172.219 115.636 172.219 115.993 cv
172.219 116.571 172.559 117.132 173.137 117.132 cv
173.681 117.132 173.936 116.86 173.936 116.401 cv
173.936 115.993 173.63 115.483 173.325 115.075 cv
cp
175.364 114.956 mo
175.891 115.569 176.401 116.503 176.401 117.982 cv
176.401 120.022 175.329 120.974 173.545 120.974 cv
171.335 120.974 170.486 119.07 170.486 116.877 cv
170.486 116.283 170.502 115.654 170.536 115.075 cv
169.687 115.075 li
169.261 115.075 168.955 115.398 168.955 115.976 cv
168.955 116.418 169.194 116.724 169.295 116.792 cv
170.128 116.928 li
170.128 120.226 li
167.596 120.497 li
166.967 119.087 166.525 117.183 166.525 115.058 cv
166.525 112.423 167.511 110.91 169.839 110.91 cv
173.936 110.91 li
174.412 110.417 li
176.231 110.417 li
176.231 114.956 li
175.364 114.956 li
cp
f
179.189 109.006 mo
176.724 108.53 li
176.928 108.088 177.369 107.102 177.369 105.878 cv
177.369 104.315 176.791 103.498 175.398 103.413 cv
175.873 104.026 176.214 104.807 176.214 105.861 cv
176.214 108.19 175.109 109.261 172.559 109.261 cv
169.295 109.295 li
168.887 109.771 li
166.797 109.771 li
166.797 105.045 li
171.76 105.045 li
173.256 105.045 173.783 104.875 173.783 104.382 cv
173.783 103.974 173.545 103.634 173.205 103.413 cv
169.329 103.413 li
168.887 104.093 li
166.797 104.093 li
166.797 99.1809 li
174.446 99.1809 li
178.423 99.1809 180.004 101.118 180.004 104.892 cv
180.004 107.221 179.46 108.479 179.189 109.006 cv
cp
f
201.69 138.144 mo
198.477 137.039 li
198.001 137.956 li
196.182 137.956 li
196.182 131.566 li
198.001 131.566 li
198.477 132.739 li
204.308 136.444 li
206.619 136.444 li
207.214 135.169 li
208.931 135.169 li
208.931 142.121 li
207.214 142.121 li
206.619 140.847 li
204.308 140.847 li
198.477 144.196 li
198.001 145.385 li
196.182 145.385 li
196.182 138.789 li
198.001 138.789 li
198.477 139.64 li
201.706 138.552 li
202.879 138.365 li
201.69 138.144 li
cp
f
206.025 125.19 mo
204.988 125.19 li
204.953 125.461 204.919 125.75 204.919 126.108 cv
204.919 126.686 205.259 127.246 205.837 127.246 cv
206.381 127.246 206.636 126.974 206.636 126.515 cv
206.636 126.108 206.33 125.598 206.025 125.19 cv
cp
208.064 125.071 mo
208.591 125.683 209.101 126.617 209.101 128.096 cv
209.101 130.136 208.03 131.088 206.245 131.088 cv
204.035 131.088 203.186 129.184 203.186 126.991 cv
203.186 126.397 203.202 125.768 203.237 125.19 cv
202.387 125.19 li
201.961 125.19 201.656 125.512 201.656 126.09 cv
201.656 126.533 201.894 126.838 201.995 126.907 cv
202.828 127.042 li
202.828 130.34 li
200.296 130.612 li
199.667 129.201 199.225 127.297 199.225 125.172 cv
199.225 122.537 200.211 121.025 202.539 121.025 cv
206.636 121.025 li
207.113 120.532 li
208.931 120.532 li
208.931 125.071 li
208.064 125.071 li
cp
f
208.931 114.258 mo
208.931 119.732 li
207.078 119.732 li
206.636 119.188 li
201.894 119.188 li
201.299 119.834 li
199.497 119.834 li
199.497 115.431 li
200.823 115.431 li
199.99 114.785 199.326 113.596 199.326 111.742 cv
199.326 109.55 200.244 108.955 202.624 108.955 cv
206.636 108.955 li
207.078 108.241 li
208.931 108.241 li
208.931 113.578 li
207.078 113.578 li
206.636 113.188 li
202.897 113.188 li
202.353 113.188 201.979 113.358 201.979 113.766 cv
201.979 114.241 202.268 114.632 202.693 114.955 cv
206.636 114.955 li
207.078 114.258 li
208.931 114.258 li
cp
f
208.931 107.425 mo
207.078 107.425 li
206.636 106.796 li
197.814 106.796 li
197.219 107.662 li
195.332 107.662 li
195.332 102.649 li
203.457 102.649 li
201.486 100.336 li
201.112 101.238 li
199.48 101.238 li
199.48 96.3929 li
201.35 96.3929 li
203.271 99.3333 li
206.687 96.9534 li
207.061 96.2395 li
208.931 96.2395 li
208.931 99.928 li
204.868 101.798 li
205.412 102.649 li
206.636 102.649 li
207.078 102.156 li
208.931 102.156 li
208.931 107.425 li
cp
f
203.305 91.2757 mo
203.305 89.4397 li
203.134 89.4221 202.931 89.4221 202.709 89.4221 cv
202.08 89.4221 201.571 89.7112 201.571 90.3069 cv
201.571 90.969 202.08 91.2415 203.305 91.2757 cv
cp
209.169 90.2727 mo
209.169 93.8587 207.657 95.4573 204.189 95.4573 cv
200.788 95.4573 199.208 93.7229 199.208 90.3401 cv
199.208 86.8557 200.721 85.5979 203.186 85.5979 cv
203.882 85.5979 205.089 85.6663 205.242 85.6995 cv
205.242 91.1389 li
206.262 90.9016 206.534 90.3235 206.534 89.1673 cv
206.534 88.1477 206.262 87.0257 205.718 86.1253 cv
208.251 85.5296 li
208.846 86.6009 209.169 88.1311 209.169 90.2727 cv
cp
f
203.305 80.2591 mo
203.305 78.4231 li
203.134 78.4055 202.931 78.4055 202.709 78.4055 cv
202.08 78.4055 201.571 78.6946 201.571 79.2903 cv
201.571 79.9524 202.08 80.2249 203.305 80.2591 cv
cp
209.169 79.2561 mo
209.169 82.8421 207.657 84.4407 204.189 84.4407 cv
200.788 84.4407 199.208 82.7063 199.208 79.3235 cv
199.208 75.8391 200.721 74.5813 203.186 74.5813 cv
203.882 74.5813 205.089 74.6497 205.242 74.6829 cv
205.242 80.1223 li
206.262 79.885 206.534 79.3069 206.534 78.1507 cv
206.534 77.1311 206.262 76.0091 205.718 75.1087 cv
208.251 74.513 li
208.846 75.5843 209.169 77.1145 209.169 79.2561 cv
cp
f
238.622 145.028 mo
231.211 138.11 li
231.211 140.932 li
233.914 141.612 li
233.914 144.74 li
228.882 144.74 li
228.882 133.605 li
231.891 133.605 li
239.081 139.98 li
239.081 137.242 li
236.107 136.495 li
236.107 133.384 li
241.631 133.418 li
241.631 144.994 li
238.622 145.028 li
cp
f
240.186 126.109 mo
241.308 126.823 241.852 127.91 241.852 129.304 cv
241.852 131.582 240.849 132.143 239.065 132.143 cv
234.356 132.143 li
233.931 132.806 li
232.198 132.806 li
232.198 128.063 li
237.807 128.063 li
238.521 128.063 239.081 127.927 239.081 127.434 cv
239.081 126.975 238.81 126.669 238.452 126.38 cv
234.407 126.38 li
233.948 127.282 li
232.198 127.282 li
232.198 122.318 li
239.336 122.318 li
239.779 121.791 li
241.631 121.791 li
241.631 126.109 li
240.186 126.109 li
cp
f
239.779 120.854 mo
239.336 120.395 li
230.327 120.395 li
229.749 121.041 li
228.033 121.041 li
228.033 116.18 li
239.336 116.18 li
239.336 116.162 li
239.779 115.551 li
241.631 115.551 li
241.631 120.854 li
239.779 120.854 li
cp
f
240.186 108.326 mo
241.308 109.04 241.852 110.128 241.852 111.522 cv
241.852 113.8 240.849 114.361 239.065 114.361 cv
234.356 114.361 li
233.931 115.024 li
232.198 115.024 li
232.198 110.281 li
237.807 110.281 li
238.521 110.281 239.081 110.145 239.081 109.652 cv
239.081 109.193 238.81 108.887 238.452 108.598 cv
234.407 108.598 li
233.948 109.499 li
232.198 109.499 li
232.198 104.535 li
239.336 104.535 li
239.779 104.009 li
241.631 104.009 li
241.631 108.326 li
240.186 108.326 li
cp
f
263.961 264.673 mo
263.961 265.251 li
266.188 265.506 li
266.188 268.498 li
261.581 268.668 li
261.581 256.362 li
266.188 256.532 li
266.188 259.523 li
263.961 259.778 li
263.961 260.356 li
271.916 260.356 li
272.426 258.69 li
274.33 258.69 li
274.33 266.339 li
272.426 266.339 li
271.916 264.673 li
263.961 264.673 li
cp
f
271.424 249.817 mo
270.387 249.817 li
270.353 250.088 270.319 250.377 270.319 250.735 cv
270.319 251.313 270.658 251.873 271.237 251.873 cv
271.781 251.873 272.035 251.601 272.035 251.142 cv
272.035 250.735 271.73 250.225 271.424 249.817 cv
cp
273.463 249.698 mo
273.991 250.31 274.5 251.244 274.5 252.723 cv
274.5 254.763 273.429 255.715 271.645 255.715 cv
269.435 255.715 268.585 253.811 268.585 251.618 cv
268.585 251.024 268.602 250.395 268.636 249.817 cv
267.786 249.817 li
267.361 249.817 267.055 250.139 267.055 250.717 cv
267.055 251.159 267.293 251.465 267.395 251.533 cv
268.228 251.669 li
268.228 254.967 li
265.696 255.239 li
265.067 253.828 264.624 251.924 264.624 249.799 cv
264.624 247.164 265.611 245.652 267.939 245.652 cv
272.035 245.652 li
272.512 245.158 li
274.33 245.158 li
274.33 249.698 li
273.463 249.698 li
cp
f
274.33 238.885 mo
274.33 244.359 li
272.478 244.359 li
272.035 243.815 li
267.293 243.815 li
266.699 244.461 li
264.897 244.461 li
264.897 240.058 li
266.222 240.058 li
265.389 239.412 264.726 238.223 264.726 236.369 cv
264.726 234.177 265.644 233.582 268.024 233.582 cv
272.035 233.582 li
272.478 232.868 li
274.33 232.868 li
274.33 238.205 li
272.478 238.205 li
272.035 237.815 li
268.296 237.815 li
267.752 237.815 267.378 237.985 267.378 238.393 cv
267.378 238.868 267.667 239.259 268.092 239.582 cv
272.035 239.582 li
272.478 238.885 li
274.33 238.885 li
cp
f
271.679 226.068 mo
267.344 226.068 li
267.174 226.238 267.073 226.458 267.073 226.866 cv
267.073 227.615 268.143 227.835 269.571 227.835 cv
270.863 227.835 271.883 227.631 271.883 226.849 cv
271.883 226.56 271.815 226.305 271.679 226.068 cv
cp
277.118 231.744 mo
274.551 231.269 li
274.891 230.691 275.198 229.841 275.198 228.617 cv
275.198 226.782 274.602 226.101 273.514 226.068 cv
273.803 226.662 273.956 227.41 273.956 228.413 cv
273.956 230.674 272.919 232.153 269.724 232.153 cv
266.001 232.153 264.574 230.64 264.574 228.26 cv
264.574 226.798 265.033 225.931 265.661 225.37 cv
264.897 224.946 li
264.897 221.274 li
266.783 221.274 li
267.31 221.92 li
273.073 221.92 li
276.438 221.92 277.917 224.248 277.917 227.41 cv
277.917 229.722 277.543 230.844 277.118 231.744 cv
cp
f
269.554 214.253 mo
267.871 214.253 266.834 214.423 266.834 215.188 cv
266.834 215.97 267.82 216.088 269.554 216.088 cv
271.526 216.088 272.563 215.918 272.563 215.188 cv
272.563 214.389 271.576 214.253 269.554 214.253 cv
cp
269.707 220.593 mo
266.409 220.593 264.505 219.369 264.505 215.222 cv
264.505 211.142 266.29 209.85 269.536 209.85 cv
272.818 209.85 274.704 211.04 274.704 215.222 cv
274.704 219.284 272.937 220.593 269.707 220.593 cv
cp
f
296.745 267.325 mo
296.27 268.515 li
294.281 268.515 li
294.281 261.801 li
296.27 261.801 li
296.745 262.821 li
302.338 262.821 li
303.358 262.821 304.361 262.616 304.361 261.444 cv
304.361 260.271 303.341 259.999 302.338 259.982 cv
296.745 259.982 li
296.27 261.002 li
294.281 261.002 li
294.281 254.441 li
296.27 254.441 li
296.745 255.63 li
303.188 255.63 li
305.398 255.682 307.353 257.245 307.353 261.444 cv
307.353 265.761 305.414 267.325 303.188 267.325 cv
296.745 267.325 li
cp
f
307.03 248.047 mo
307.03 253.521 li
305.177 253.521 li
304.735 252.977 li
299.992 252.977 li
299.398 253.623 li
297.596 253.623 li
297.596 249.22 li
298.921 249.22 li
298.088 248.574 297.425 247.385 297.425 245.532 cv
297.425 243.339 298.343 242.744 300.723 242.744 cv
304.735 242.744 li
305.177 242.031 li
307.03 242.031 li
307.03 247.367 li
305.177 247.367 li
304.735 246.977 li
300.995 246.977 li
300.451 246.977 300.077 247.147 300.077 247.555 cv
300.077 248.031 300.366 248.421 300.791 248.744 cv
304.735 248.744 li
305.177 248.047 li
307.03 248.047 li
cp
f
292.87 238.494 mo
292.87 236.574 293.176 236.149 294.774 236.149 cv
296.371 236.149 296.711 236.574 296.711 238.494 cv
296.711 240.432 296.371 240.823 294.774 240.823 cv
293.176 240.823 292.87 240.432 292.87 238.494 cv
cp
305.177 241.095 mo
304.752 240.483 li
299.992 240.483 li
299.483 241.332 li
297.596 241.332 li
297.596 236.25 li
304.735 236.25 li
304.735 236.234 li
305.177 235.282 li
307.03 235.282 li
307.03 241.095 li
305.177 241.095 li
cp
f
307.03 228.039 mo
307.03 234.413 li
305.177 234.413 li
304.735 233.699 li
300.009 233.699 li
300.009 234.702 li
297.596 234.702 li
297.596 233.699 li
296.796 233.699 li
294.06 233.699 293.227 232.238 293.227 229.552 cv
293.227 228.227 293.448 227.275 293.635 226.747 cv
295.742 227.291 li
295.607 227.598 295.522 227.971 295.522 228.549 cv
295.522 229.263 296.032 229.637 296.711 229.637 cv
297.596 229.637 li
297.596 227.427 li
300.009 227.427 li
300.009 229.637 li
304.735 229.637 li
305.177 228.039 li
307.03 228.039 li
cp
f
302.253 220.305 mo
300.571 220.305 299.533 220.475 299.533 221.24 cv
299.533 222.022 300.519 222.14 302.253 222.14 cv
304.225 222.14 305.262 221.97 305.262 221.24 cv
305.262 220.441 304.276 220.305 302.253 220.305 cv
cp
302.407 226.645 mo
299.109 226.645 297.204 225.421 297.204 221.274 cv
297.204 217.194 298.99 215.902 302.236 215.902 cv
305.517 215.902 307.404 217.092 307.404 221.274 cv
307.404 225.336 305.636 226.645 302.407 226.645 cv
cp
f
307.046 208.2 mo
307.046 214.847 li
305.194 214.847 li
304.752 214.303 li
299.908 214.303 li
299.313 215.17 li
297.596 215.17 li
297.596 210.376 li
299.143 210.376 li
298.207 209.816 297.425 208.931 297.425 207.673 cv
297.425 206.84 297.613 206.365 297.766 206.075 cv
302.253 206.5 li
302.253 208.914 li
300.383 209.288 li
300.536 209.612 300.741 209.866 300.995 210.071 cv
304.735 210.071 li
305.194 208.2 li
307.046 208.2 li
cp
f
307.03 199.955 mo
307.03 205.361 li
305.177 205.361 li
304.735 204.817 li
300.128 204.817 li
299.533 205.514 li
297.596 205.514 li
297.596 200.89 li
298.972 200.89 li
298.191 200.21 297.443 199.054 297.443 197.456 cv
297.443 196.164 297.936 195.366 298.939 194.975 cv
298.173 194.312 297.443 193.173 297.443 191.609 cv
297.443 189.366 298.684 188.838 300.774 188.838 cv
304.735 188.838 li
305.177 188.142 li
307.03 188.142 li
307.03 193.53 li
305.177 193.53 li
304.769 193.088 li
300.91 193.088 li
300.468 193.088 300.112 193.19 300.112 193.581 cv
300.112 194.074 300.417 194.448 300.86 194.72 cv
304.735 194.72 li
305.177 194.057 li
307.03 194.057 li
307.03 199.343 li
305.177 199.343 li
304.769 198.969 li
300.995 198.969 li
300.451 198.969 300.112 199.054 300.112 199.446 cv
300.112 199.972 300.383 200.346 300.91 200.584 cv
304.735 200.584 li
305.177 199.955 li
307.03 199.955 li
cp
f
365.697 584 mo
365.697 602 li
366.197 602 li
366.197 584 li
f
5.69667 584 mo
5.69667 602 li
6.19667 602 li
6.19667 584 li
f
422.363 584 mo
422.363 602 li
422.863 602 li
422.863 584 li
f
782.363 584 mo
782.363 602 li
782.863 602 li
782.863 584 li
f
791.613 35.25 mo
809.613 35.25 li
809.613 34.75 li
791.613 34.75 li
f
791.613 575.25 mo
809.613 575.25 li
809.613 574.75 li
791.613 574.75 li
f
395.609 35.25 mo
413.609 35.25 li
413.609 34.75 li
395.609 34.75 li
f
395.609 575.25 mo
413.609 575.25 li
413.609 574.75 li
395.609 574.75 li
f
374.947 35.25 mo
392.947 35.25 li
392.947 34.75 li
374.947 34.75 li
f
365.697 8 mo
365.697 26 li
366.197 26 li
366.197 8 li
f
5.69667 8 mo
5.69667 26 li
6.19667 26 li
6.19667 8 li
f
422.363 8 mo
422.363 26 li
422.863 26 li
422.863 8 li
f
782.363 8 mo
782.363 26 li
782.863 26 li
782.863 8 li
f
374.947 575.25 mo
392.947 575.25 li
392.947 574.75 li
374.947 574.75 li
f
-21.0545 35.25 mo
-3.05449 35.25 li
-3.05449 34.75 li
-21.0545 34.75 li
f
-21.0545 575.25 mo
-3.05449 575.25 li
-3.05449 574.75 li
-21.0545 574.75 li
f
486.237 545.051 mo
470.797 545.051 li
472.349 534.731 li
484.685 534.731 li
486.237 545.051 li
0 0 0 .25098 cmyk
f
484.685 534.731 mo
472.349 534.731 li
473.902 524.411 li
483.132 524.411 li
484.685 534.731 li
0 0 0 1 cmyk
f
483.132 524.411 mo
473.902 524.411 li
475.455 514.09 li
481.579 514.09 li
483.132 524.411 li
0 0 0 .25098 cmyk
f
478.517 491.708 mo
476.167 491.708 474.262 489.803 474.262 487.452 cv
474.262 485.102 476.167 483.197 478.517 483.197 cv
480.867 483.197 482.772 485.102 482.772 487.452 cv
482.772 489.803 480.867 491.708 478.517 491.708 cv
0 0 0 1 cmyk
f
486.237 294.705 mo
470.797 294.705 li
473.126 279.224 li
483.909 279.224 li
486.237 294.705 li
0 0 0 .25098 cmyk
f
478.516 244.636 mo
470.797 244.636 li
475.454 213.674 li
478.516 213.674 li
478.516 244.636 li
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
486.237 94.4274 mo
478.517 94.4274 li
478.517 82.8068 li
484.49 82.8068 li
486.237 94.4274 li
0 0 0 1 cmyk
f
484.49 82.8068 mo
478.517 82.8068 li
478.517 63.4663 li
481.58 63.4663 li
484.49 82.8068 li
0 0 0 .25098 cmyk
f
478.517 82.8068 mo
472.545 82.8068 li
475.454 63.4663 li
478.517 63.4663 li
478.517 82.8068 li
1 /0 /CSD get_res sepcs
1 sep
f
479.619 144.497 mo
477.416 144.497 li
477.416 135.91 li
472.089 135.91 li
472.42 133.708 li
477.416 133.708 li
477.416 113.535 li
479.619 113.535 li
479.619 133.708 li
484.615 133.708 li
484.946 135.91 li
479.619 135.91 li
479.619 144.497 li
0 0 0 1 cmyk
f
478.517 194.566 mo
470.797 194.566 li
475.454 163.605 li
478.517 163.605 li
478.517 194.566 li
0 0 0 .25098 cmyk
f
486.237 194.566 mo
478.517 194.566 li
478.517 163.605 li
481.58 163.605 li
486.237 194.566 li
0 0 0 1 cmyk
f
477.416 344.774 mo
470.797 344.774 li
472.089 336.187 li
477.416 336.187 li
477.416 344.774 li
f
477.416 333.986 mo
472.42 333.986 li
475.454 313.813 li
477.416 313.813 li
477.416 333.986 li
f
486.237 344.774 mo
479.618 344.774 li
479.618 336.187 li
484.946 336.187 li
486.237 344.774 li
f
484.615 333.986 mo
479.618 333.986 li
479.618 313.813 li
481.58 313.813 li
484.615 333.986 li
f
486.237 394.843 mo
470.797 394.843 li
472.349 384.523 li
484.685 384.523 li
486.237 394.843 li
f
562.904 546.529 mo
544.221 546.529 li
544.221 527.847 li
553.563 532.517 li
562.904 527.847 li
562.904 546.529 li
f
628.304 546.53 mo
623.638 546.53 li
623.638 527.847 li
628.304 527.847 li
628.304 546.53 li
0 0 0 .25098 cmyk
f
614.113 546.529 mo
609.62 546.529 li
609.62 527.847 li
614.113 527.847 li
614.113 546.529 li
f
588.13 546.529 mo
584.395 546.529 li
584.395 527.847 li
588.13 527.847 li
588.13 546.529 li
0 0 0 1 cmyk
f
661.003 546.53 mo
650.802 546.53 li
650.802 527.847 li
661.003 527.847 li
661.003 546.53 li
f
684.361 546.529 mo
675.019 537.188 li
684.361 527.847 li
693.702 537.188 li
684.361 546.529 li
f
726.402 546.529 mo
707.719 546.529 li
707.719 543.415 li
726.402 543.415 li
726.402 546.529 li
0 0 0 .25098 cmyk
f
726.402 540.302 mo
707.719 540.302 li
707.719 537.188 li
726.402 537.188 li
726.402 540.302 li
f
726.402 534.074 mo
707.719 534.074 li
707.719 530.961 li
726.402 530.961 li
726.402 534.074 li
f
530.205 423.093 mo
511.522 423.093 li
511.522 413.753 li
530.205 413.753 li
530.205 423.093 li
0 0 0 1 cmyk
f
628.303 432.435 mo
609.621 432.435 li
609.621 413.753 li
628.303 413.753 li
628.303 432.435 li
0 0 0 .25098 cmyk
f
651.661 423.094 mo
642.32 423.094 li
642.32 413.753 li
651.661 413.753 li
651.661 423.094 li
1 /0 /CSD get_res sepcs
1 sep
f
661.003 432.435 mo
651.661 432.435 li
651.661 423.094 li
661.003 423.094 li
661.003 432.435 li
f
651.661 432.435 mo
642.32 432.435 li
642.32 423.094 li
651.661 423.094 li
651.661 432.435 li
0 0 0 .25098 cmyk
f
661.003 423.094 mo
661.003 423.094 li
651.661 423.094 li
651.661 413.753 li
661.003 413.753 li
661.003 423.094 li
f
562.908 432.435 mo
544.225 432.435 li
544.225 413.752 li
562.908 413.752 li
562.908 432.435 li
553.566 417.674 mo
550.573 417.674 548.147 420.1 548.147 423.093 cv
548.147 426.087 550.573 428.513 553.566 428.513 cv
556.56 428.513 558.987 426.087 558.987 423.093 cv
558.987 420.1 556.56 417.674 553.566 417.674 cv
f
553.566 428.513 mo
550.573 428.513 548.147 426.087 548.147 423.093 cv
548.147 420.1 550.573 417.674 553.566 417.674 cv
556.56 417.674 558.987 420.1 558.987 423.093 cv
558.987 426.087 556.56 428.513 553.566 428.513 cv
0 0 0 1 cmyk
f
510.837 292.751 mo
510.837 292.751 li
510.837 274.069 li
529.52 274.069 li
510.837 292.751 li
f
529.52 292.751 mo
510.837 292.751 li
529.52 274.069 li
529.52 292.751 li
0 0 0 .25098 cmyk
f
717.061 292.751 mo
707.719 292.751 li
707.719 283.41 li
717.061 283.41 li
717.061 292.751 li
0 0 0 1 cmyk
f
726.402 283.41 mo
717.061 283.41 li
717.061 274.068 li
726.402 274.068 li
726.402 283.41 li
f
556.182 163.186 mo
549.752 163.186 li
549.752 156.756 li
556.182 156.756 li
556.182 163.186 li
f
530.205 169.313 mo
528.949 169.313 li
520.864 161.227 li
512.778 169.313 li
511.522 169.313 li
511.522 168.057 li
519.608 159.971 li
511.522 151.886 li
511.522 150.63 li
512.778 150.63 li
520.864 158.716 li
528.949 150.63 li
530.205 150.63 li
530.205 151.886 li
522.12 159.971 li
530.205 168.057 li
530.205 169.313 li
f
gsave
628.303 150.63 mo
628.303 169.313 li
609.62 169.313 li
609.62 150.63 li
628.303 150.63 li
clp
613.311 169.313 mo
609.62 169.313 li
609.62 165.622 li
613.311 169.313 li
0 0 0 .25098 cmyk
f
617.058 169.313 mo
613.311 169.313 li
609.62 165.622 li
609.62 161.875 li
617.058 169.313 li
0 0 0 1 cmyk
f
620.807 169.313 mo
617.058 169.313 li
609.62 161.875 li
609.62 158.126 li
620.807 169.313 li
0 0 0 .25098 cmyk
f
624.555 169.313 mo
620.807 169.313 li
609.62 158.126 li
609.62 154.378 li
624.555 169.313 li
0 0 0 1 cmyk
f
628.303 169.313 mo
624.555 169.313 li
609.62 154.378 li
609.62 150.63 li
628.303 169.312 li
628.303 169.313 li
0 0 0 .25098 cmyk
f
628.303 169.312 mo
609.62 150.63 li
613.37 150.63 li
628.303 165.564 li
628.303 169.313 li
0 0 0 1 cmyk
f
628.303 165.564 mo
613.37 150.63 li
617.118 150.63 li
628.303 161.816 li
628.303 165.564 li
0 0 0 .25098 cmyk
f
628.303 161.816 mo
617.118 150.63 li
620.866 150.63 li
628.303 158.068 li
628.303 161.816 li
0 0 0 1 cmyk
f
628.303 158.068 mo
620.866 150.63 li
624.614 150.63 li
628.303 154.32 li
628.303 158.068 li
0 0 0 .25098 cmyk
f
628.303 154.32 mo
624.614 150.63 li
628.303 150.63 li
628.303 154.32 li
0 0 0 1 cmyk
f
grestore
661.003 169.313 mo
661.003 169.313 li
651.662 159.971 li
642.32 169.313 li
651.662 159.971 li
642.32 150.631 li
642.32 169.313 li
642.32 150.631 li
661.003 150.631 li
651.662 159.971 li
661.003 169.313 li
0 0 0 .25098 cmyk
f
661.003 169.313 mo
661.003 169.313 li
651.662 159.971 li
661.003 150.631 li
661.003 169.313 li
0 0 0 1 cmyk
f
642.32 169.313 mo
642.32 169.313 li
642.32 150.631 li
651.662 159.971 li
642.32 169.313 li
0 0 0 .25098 cmyk
f
661.003 169.313 mo
642.32 169.313 li
651.662 159.971 li
661.003 169.313 li
0 0 0 1 cmyk
f
617.577 292.751 mo
609.621 292.751 li
609.621 284.795 li
617.577 284.795 li
617.577 292.751 li
f
617.577 282.025 mo
609.621 282.025 li
609.621 274.068 li
617.577 274.068 li
617.577 282.025 li
f
628.303 292.751 mo
620.347 292.751 li
620.347 284.795 li
628.303 284.795 li
628.303 292.751 li
f
628.303 282.025 mo
620.347 282.025 li
620.347 274.068 li
628.303 274.068 li
628.303 282.025 li
f
620.347 292.751 mo
617.577 292.751 li
617.577 284.795 li
609.621 284.795 li
609.621 282.025 li
617.577 282.025 li
617.577 274.068 li
620.347 274.068 li
620.347 282.025 li
628.303 282.025 li
628.303 284.795 li
620.347 284.795 li
620.347 292.751 li
0 0 0 .25098 cmyk
f
693.406 292.751 mo
674.723 292.751 li
674.723 286.524 li
693.406 286.524 li
693.406 292.751 li
0 0 0 1 cmyk
f
595.413 292.751 mo
576.731 292.751 li
576.731 274.068 li
595.413 274.068 li
595.413 292.751 li
0 0 0 .25098 cmyk
f
498.147 547.403 mo
497.147 547.403 li
497.147 62.5974 li
498.147 62.5974 li
498.147 547.403 li
0 0 0 1 cmyk
f
740.566 547.403 mo
739.566 547.403 li
739.566 62.5974 li
740.566 62.5974 li
740.566 547.403 li
f
675.585 175.002 mo
674.585 175.002 li
674.585 61.7238 li
675.585 61.7238 li
675.585 175.002 li
f
521.091 268.43 mo
516.62 268.43 514.343 266.747 514.343 261.767 cv
514.343 256.803 516.62 255.138 521.091 255.138 cv
521.116 255.138 521.141 255.138 521.166 255.138 cv
525.687 255.138 527.856 256.729 527.856 261.783 cv
527.856 266.731 525.663 268.413 521.091 268.43 cv
521.454 259.861 mo
521.336 259.861 521.215 259.862 521.091 259.863 cv
518.557 259.897 516.943 260.118 516.943 261.767 cv
516.943 263.415 518.557 263.704 521.091 263.704 cv
523.623 263.704 525 263.399 525 261.767 cv
525 260.199 523.754 259.861 521.454 259.861 cv
f
519.799 254.422 mo
518.065 254.422 li
518.065 249.679 li
523.675 249.679 li
524.389 249.679 524.949 249.543 524.949 249.05 cv
524.949 248.591 524.678 248.286 524.32 247.996 cv
520.274 247.996 li
519.815 248.898 li
518.065 248.898 li
518.065 243.934 li
525.204 243.934 li
525.646 243.407 li
527.499 243.407 li
527.499 247.725 li
526.054 247.725 li
527.176 248.439 527.72 249.527 527.72 250.92 cv
527.72 253.198 526.717 253.759 524.933 253.759 cv
520.224 253.759 li
519.799 254.422 li
f
519.952 242.641 mo
518.065 242.641 li
518.065 237.559 li
525.204 237.559 li
525.204 237.542 li
525.646 236.59 li
527.499 236.59 li
527.499 242.404 li
525.646 242.404 li
525.222 241.791 li
520.462 241.791 li
519.952 242.641 li
515.243 242.131 mo
513.645 242.131 513.34 241.74 513.34 239.803 cv
513.34 237.882 513.645 237.457 515.243 237.457 cv
516.841 237.457 517.181 237.882 517.181 239.803 cv
517.181 241.74 516.841 242.131 515.243 242.131 cv
f
528.688 237.592 mo
528.688 236.113 528.111 235.416 526.649 235.416 cv
520.547 235.416 li
519.952 236.284 li
518.065 236.284 li
518.065 231.235 li
525.612 231.235 li
530.423 231.235 530.967 233.835 530.967 237.286 cv
528.688 237.592 li
515.243 235.859 mo
513.645 235.859 513.34 235.467 513.34 233.53 cv
513.34 231.609 513.645 231.184 515.243 231.184 cv
516.841 231.184 517.181 231.609 517.181 233.53 cv
517.181 235.467 516.841 235.859 515.243 235.859 cv
f
524.813 230.13 mo
522.603 230.13 521.754 228.226 521.754 226.033 cv
521.754 225.439 521.77 224.81 521.805 224.232 cv
520.955 224.232 li
520.529 224.232 520.224 224.554 520.224 225.132 cv
520.224 225.574 520.462 225.88 520.563 225.949 cv
521.396 226.084 li
521.396 229.382 li
518.864 229.653 li
518.235 228.243 517.793 226.339 517.793 224.214 cv
517.793 221.579 518.779 220.067 521.107 220.067 cv
525.204 220.067 li
525.681 219.573 li
527.499 219.573 li
527.499 224.112 li
526.632 224.112 li
527.159 224.725 527.669 225.66 527.669 227.138 cv
527.669 229.178 526.598 230.13 524.813 230.13 cv
523.556 224.232 mo
523.522 224.503 523.487 224.792 523.487 225.15 cv
523.487 225.727 523.827 226.288 524.405 226.288 cv
524.949 226.288 525.204 226.016 525.204 225.557 cv
525.204 225.15 524.898 224.639 524.593 224.232 cv
523.556 224.232 li
f
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
Adobe_AGM_OnHost_Seps/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
Adobe_AGM_OnHost_Seps/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_OnHost_Seps 1.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *PageSize Letter
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
